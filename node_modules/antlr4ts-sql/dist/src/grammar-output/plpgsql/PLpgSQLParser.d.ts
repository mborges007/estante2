import { ATN } from "antlr4ts/atn/ATN";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { RuleContext } from "antlr4ts/RuleContext";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { PLpgSQLParserListener } from "./PLpgSQLParserListener";
export declare class PLpgSQLParser extends Parser {
    static readonly ABORT = 1;
    static readonly ABSOLUTE = 2;
    static readonly ACCESS = 3;
    static readonly ACTION = 4;
    static readonly ADD = 5;
    static readonly ADMIN = 6;
    static readonly AFTER = 7;
    static readonly AGGREGATE = 8;
    static readonly ALSO = 9;
    static readonly ALTER = 10;
    static readonly ALWAYS = 11;
    static readonly ASSERTION = 12;
    static readonly ASSIGNMENT = 13;
    static readonly AT = 14;
    static readonly ATTACH = 15;
    static readonly ATTRIBUTE = 16;
    static readonly BACKWARD = 17;
    static readonly BEFORE = 18;
    static readonly BEGIN = 19;
    static readonly BY = 20;
    static readonly CACHE = 21;
    static readonly CALL = 22;
    static readonly CALLED = 23;
    static readonly CASCADE = 24;
    static readonly CASCADED = 25;
    static readonly CATALOG = 26;
    static readonly CHAIN = 27;
    static readonly CHARACTERISTICS = 28;
    static readonly CHECKPOINT = 29;
    static readonly CLASS = 30;
    static readonly CLOSE = 31;
    static readonly CLUSTER = 32;
    static readonly COLUMNS = 33;
    static readonly COMMENT = 34;
    static readonly COMMENTS = 35;
    static readonly COMMIT = 36;
    static readonly COMMITTED = 37;
    static readonly CONFIGURATION = 38;
    static readonly CONFLICT = 39;
    static readonly CONNECTION = 40;
    static readonly CONSTRAINTS = 41;
    static readonly CONTENT = 42;
    static readonly CONTINUE = 43;
    static readonly CONVERSION = 44;
    static readonly COPY = 45;
    static readonly COST = 46;
    static readonly CSV = 47;
    static readonly CUBE = 48;
    static readonly CURRENT = 49;
    static readonly CURSOR = 50;
    static readonly CYCLE = 51;
    static readonly DATA = 52;
    static readonly DATABASE = 53;
    static readonly DAY = 54;
    static readonly DEALLOCATE = 55;
    static readonly DECLARE = 56;
    static readonly DEFAULTS = 57;
    static readonly DEFERRED = 58;
    static readonly DEFINER = 59;
    static readonly DELETE = 60;
    static readonly DELIMITER = 61;
    static readonly DELIMITERS = 62;
    static readonly DEPENDS = 63;
    static readonly DETACH = 64;
    static readonly DICTIONARY = 65;
    static readonly DISABLE = 66;
    static readonly DISCARD = 67;
    static readonly DOCUMENT = 68;
    static readonly DOMAIN = 69;
    static readonly DOUBLE = 70;
    static readonly DROP = 71;
    static readonly EACH = 72;
    static readonly ENABLE = 73;
    static readonly ENCODING = 74;
    static readonly ENCRYPTED = 75;
    static readonly ENUM = 76;
    static readonly ESCAPE = 77;
    static readonly EVENT = 78;
    static readonly EXCLUDE = 79;
    static readonly EXCLUDING = 80;
    static readonly EXCLUSIVE = 81;
    static readonly EXECUTE = 82;
    static readonly EXPLAIN = 83;
    static readonly EXTENSION = 84;
    static readonly EXTERNAL = 85;
    static readonly FAMILY = 86;
    static readonly FILTER = 87;
    static readonly FIRST = 88;
    static readonly FOLLOWING = 89;
    static readonly FORCE = 90;
    static readonly FORWARD = 91;
    static readonly FUNCTION = 92;
    static readonly FUNCTIONS = 93;
    static readonly GENERATED = 94;
    static readonly GLOBAL = 95;
    static readonly GRANTED = 96;
    static readonly GROUPS = 97;
    static readonly HANDLER = 98;
    static readonly HEADER = 99;
    static readonly HOLD = 100;
    static readonly HOUR = 101;
    static readonly IDENTITY = 102;
    static readonly IF = 103;
    static readonly IMMEDIATE = 104;
    static readonly IMMUTABLE = 105;
    static readonly IMPLICIT = 106;
    static readonly IMPORT = 107;
    static readonly INCLUDE = 108;
    static readonly INCLUDING = 109;
    static readonly INCREMENT = 110;
    static readonly INDEX = 111;
    static readonly INDEXES = 112;
    static readonly INHERIT = 113;
    static readonly INHERITS = 114;
    static readonly INLINE = 115;
    static readonly INPUT = 116;
    static readonly INSENSITIVE = 117;
    static readonly INSERT = 118;
    static readonly INSTEAD = 119;
    static readonly INVOKER = 120;
    static readonly ISOLATION = 121;
    static readonly KEY = 122;
    static readonly LABEL = 123;
    static readonly LANGUAGE = 124;
    static readonly LARGE = 125;
    static readonly LAST = 126;
    static readonly LEAKPROOF = 127;
    static readonly LEVEL = 128;
    static readonly LISTEN = 129;
    static readonly LOAD = 130;
    static readonly LOCAL = 131;
    static readonly LOCATION = 132;
    static readonly LOCK = 133;
    static readonly LOCKED = 134;
    static readonly LOGGED = 135;
    static readonly MAPPING = 136;
    static readonly MATCH = 137;
    static readonly MATERIALIZED = 138;
    static readonly MAXVALUE = 139;
    static readonly METHOD = 140;
    static readonly MINUTE = 141;
    static readonly MINVALUE = 142;
    static readonly MODE = 143;
    static readonly MONTH = 144;
    static readonly MOVE = 145;
    static readonly NAME = 146;
    static readonly NAMES = 147;
    static readonly NEW = 148;
    static readonly NEXT = 149;
    static readonly NO = 150;
    static readonly NOTHING = 151;
    static readonly NOTIFY = 152;
    static readonly NOWAIT = 153;
    static readonly NULLS = 154;
    static readonly OBJECT = 155;
    static readonly OF = 156;
    static readonly OFF = 157;
    static readonly OIDS = 158;
    static readonly OLD = 159;
    static readonly OPERATOR = 160;
    static readonly OPTION = 161;
    static readonly OPTIONS = 162;
    static readonly ORDINALITY = 163;
    static readonly OTHERS = 164;
    static readonly OVER = 165;
    static readonly OVERRIDING = 166;
    static readonly OWNED = 167;
    static readonly OWNER = 168;
    static readonly PARALLEL = 169;
    static readonly PARSER = 170;
    static readonly PARTIAL = 171;
    static readonly PARTITION = 172;
    static readonly PASSING = 173;
    static readonly PASSWORD = 174;
    static readonly PLANS = 175;
    static readonly POLICY = 176;
    static readonly PRECEDING = 177;
    static readonly PREPARE = 178;
    static readonly PREPARED = 179;
    static readonly PRESERVE = 180;
    static readonly PRIOR = 181;
    static readonly PRIVILEGES = 182;
    static readonly PROCEDURAL = 183;
    static readonly PROCEDURE = 184;
    static readonly PROCEDURES = 185;
    static readonly PROGRAM = 186;
    static readonly PUBLICATION = 187;
    static readonly QUOTE = 188;
    static readonly RANGE = 189;
    static readonly READ = 190;
    static readonly REASSIGN = 191;
    static readonly RECHECK = 192;
    static readonly RECURSIVE = 193;
    static readonly REF = 194;
    static readonly REFERENCING = 195;
    static readonly REFRESH = 196;
    static readonly REINDEX = 197;
    static readonly RELATIVE = 198;
    static readonly RELEASE = 199;
    static readonly RENAME = 200;
    static readonly REPEATABLE = 201;
    static readonly REPLACE = 202;
    static readonly REPLICA = 203;
    static readonly RESET = 204;
    static readonly RESTART = 205;
    static readonly RESTRICT = 206;
    static readonly RETURNS = 207;
    static readonly REVOKE = 208;
    static readonly ROLE = 209;
    static readonly ROLLBACK = 210;
    static readonly ROLLUP = 211;
    static readonly ROUTINE = 212;
    static readonly ROUTINES = 213;
    static readonly ROWS = 214;
    static readonly RULE = 215;
    static readonly SAVEPOINT = 216;
    static readonly SCHEMA = 217;
    static readonly SCHEMAS = 218;
    static readonly SCROLL = 219;
    static readonly SEARCH = 220;
    static readonly SECOND = 221;
    static readonly SECURITY = 222;
    static readonly SEQUENCE = 223;
    static readonly SEQUENCES = 224;
    static readonly SERIALIZABLE = 225;
    static readonly SERVER = 226;
    static readonly SESSION = 227;
    static readonly SET = 228;
    static readonly SETS = 229;
    static readonly SHARE = 230;
    static readonly SHOW = 231;
    static readonly SIMPLE = 232;
    static readonly SKIP_ = 233;
    static readonly SNAPSHOT = 234;
    static readonly SQL = 235;
    static readonly STABLE = 236;
    static readonly STANDALONE = 237;
    static readonly START = 238;
    static readonly STATEMENT = 239;
    static readonly STATISTICS = 240;
    static readonly STDIN = 241;
    static readonly STDOUT = 242;
    static readonly STORAGE = 243;
    static readonly STORED = 244;
    static readonly STRICT = 245;
    static readonly STRIP = 246;
    static readonly SUBSCRIPTION = 247;
    static readonly SUPPORT = 248;
    static readonly SYSID = 249;
    static readonly SYSTEM = 250;
    static readonly TABLES = 251;
    static readonly TABLESPACE = 252;
    static readonly TEMP = 253;
    static readonly TEMPLATE = 254;
    static readonly TEMPORARY = 255;
    static readonly TEXT = 256;
    static readonly TIES = 257;
    static readonly TRANSACTION = 258;
    static readonly TRANSFORM = 259;
    static readonly TRIGGER = 260;
    static readonly TRUNCATE = 261;
    static readonly TRUSTED = 262;
    static readonly TYPE = 263;
    static readonly TYPES = 264;
    static readonly UNBOUNDED = 265;
    static readonly UNCOMMITTED = 266;
    static readonly UNENCRYPTED = 267;
    static readonly UNKNOWN = 268;
    static readonly UNLISTEN = 269;
    static readonly UNLOGGED = 270;
    static readonly UNTIL = 271;
    static readonly UPDATE = 272;
    static readonly VACUUM = 273;
    static readonly VALID = 274;
    static readonly VALIDATE = 275;
    static readonly VALIDATOR = 276;
    static readonly VALUE = 277;
    static readonly VARYING = 278;
    static readonly VERSION = 279;
    static readonly VIEW = 280;
    static readonly VIEWS = 281;
    static readonly VOLATILE = 282;
    static readonly WHITESPACE = 283;
    static readonly WITHIN = 284;
    static readonly WITHOUT = 285;
    static readonly WORK = 286;
    static readonly WRAPPER = 287;
    static readonly WRITE = 288;
    static readonly XML = 289;
    static readonly YEAR = 290;
    static readonly YES = 291;
    static readonly ZONE = 292;
    static readonly BETWEEN = 293;
    static readonly BIGINT = 294;
    static readonly BIT = 295;
    static readonly BOOLEAN = 296;
    static readonly CHAR = 297;
    static readonly CHARACTER = 298;
    static readonly COALESCE = 299;
    static readonly DEC = 300;
    static readonly DECIMAL = 301;
    static readonly EXISTS = 302;
    static readonly EXTRACT = 303;
    static readonly FLOAT = 304;
    static readonly GREATEST = 305;
    static readonly GROUPING = 306;
    static readonly INOUT = 307;
    static readonly INT = 308;
    static readonly INTEGER = 309;
    static readonly INTERVAL = 310;
    static readonly LEAST = 311;
    static readonly NATIONAL = 312;
    static readonly NCHAR = 313;
    static readonly NONE = 314;
    static readonly NULLIF = 315;
    static readonly NUMERIC = 316;
    static readonly OUT = 317;
    static readonly OVERLAY = 318;
    static readonly POSITION = 319;
    static readonly PRECISION = 320;
    static readonly REAL = 321;
    static readonly ROW = 322;
    static readonly SETOF = 323;
    static readonly SMALLINT = 324;
    static readonly SUBSTRING = 325;
    static readonly TIME = 326;
    static readonly TIMESTAMP = 327;
    static readonly TREAT = 328;
    static readonly TRIM = 329;
    static readonly VALUES = 330;
    static readonly VARCHAR = 331;
    static readonly XMLATTRIBUTES = 332;
    static readonly XMLCONCAT = 333;
    static readonly XMLELEMENT = 334;
    static readonly XMLEXISTS = 335;
    static readonly XMLFOREST = 336;
    static readonly XMLNAMESPACES = 337;
    static readonly XMLPARSE = 338;
    static readonly XMLPI = 339;
    static readonly XMLROOT = 340;
    static readonly XMLSERIALIZE = 341;
    static readonly XMLTABLE = 342;
    static readonly AUTHORIZATION = 343;
    static readonly BINARY = 344;
    static readonly COLLATION = 345;
    static readonly CONCURRENTLY = 346;
    static readonly CROSS = 347;
    static readonly CURRENT_SCHEMA = 348;
    static readonly FREEZE = 349;
    static readonly FULL = 350;
    static readonly ILIKE = 351;
    static readonly INNER = 352;
    static readonly IS = 353;
    static readonly ISNULL = 354;
    static readonly JOIN = 355;
    static readonly LEFT = 356;
    static readonly LIKE = 357;
    static readonly NATURAL = 358;
    static readonly NOTNULL = 359;
    static readonly OUTER = 360;
    static readonly OVERLAPS = 361;
    static readonly RIGHT = 362;
    static readonly SIMILAR = 363;
    static readonly TABLESAMPLE = 364;
    static readonly VERBOSE = 365;
    static readonly ALL = 366;
    static readonly ANALYZE = 367;
    static readonly AND = 368;
    static readonly ANY = 369;
    static readonly ARRAY = 370;
    static readonly AS = 371;
    static readonly ASC = 372;
    static readonly ASYMMETRIC = 373;
    static readonly BOTH = 374;
    static readonly CASE = 375;
    static readonly CAST = 376;
    static readonly CHECK = 377;
    static readonly COLLATE = 378;
    static readonly COLUMN = 379;
    static readonly CONSTRAINT = 380;
    static readonly CREATE = 381;
    static readonly CURRENT_CATALOG = 382;
    static readonly CURRENT_DATE = 383;
    static readonly CURRENT_ROLE = 384;
    static readonly CURRENT_TIME = 385;
    static readonly CURRENT_TIMESTAMP = 386;
    static readonly CURRENT_USER = 387;
    static readonly DEFAULT = 388;
    static readonly DEFERRABLE = 389;
    static readonly DESC = 390;
    static readonly DISTINCT = 391;
    static readonly DO = 392;
    static readonly ELSE = 393;
    static readonly END = 394;
    static readonly EXCEPT = 395;
    static readonly FALSE = 396;
    static readonly FETCH = 397;
    static readonly FOR = 398;
    static readonly FOREIGN = 399;
    static readonly FROM = 400;
    static readonly GRANT = 401;
    static readonly GROUP = 402;
    static readonly HAVING = 403;
    static readonly IN = 404;
    static readonly INITIALLY = 405;
    static readonly INTERSECT = 406;
    static readonly INTO = 407;
    static readonly LATERAL = 408;
    static readonly LEADING = 409;
    static readonly LIMIT = 410;
    static readonly LOCALTIME = 411;
    static readonly LOCALTIMESTAMP = 412;
    static readonly NOT = 413;
    static readonly NULL = 414;
    static readonly OFFSET = 415;
    static readonly ON = 416;
    static readonly ONLY = 417;
    static readonly OR = 418;
    static readonly ORDER = 419;
    static readonly PLACING = 420;
    static readonly PRIMARY = 421;
    static readonly REFERENCES = 422;
    static readonly RETURNING = 423;
    static readonly SELECT = 424;
    static readonly SESSION_USER = 425;
    static readonly SOME = 426;
    static readonly SYMMETRIC = 427;
    static readonly TABLE = 428;
    static readonly THEN = 429;
    static readonly TO = 430;
    static readonly TRAILING = 431;
    static readonly TRUE = 432;
    static readonly UNION = 433;
    static readonly UNIQUE = 434;
    static readonly USER = 435;
    static readonly USING = 436;
    static readonly VARIADIC = 437;
    static readonly WHEN = 438;
    static readonly WHERE = 439;
    static readonly WINDOW = 440;
    static readonly WITH = 441;
    static readonly ALIGNMENT = 442;
    static readonly BASETYPE = 443;
    static readonly BUFFERS = 444;
    static readonly BYPASSRLS = 445;
    static readonly CANONICAL = 446;
    static readonly CATEGORY = 447;
    static readonly COLLATABLE = 448;
    static readonly COMBINEFUNC = 449;
    static readonly COMMUTATOR = 450;
    static readonly CONNECT = 451;
    static readonly COSTS = 452;
    static readonly CREATEDB = 453;
    static readonly CREATEROLE = 454;
    static readonly DESERIALFUNC = 455;
    static readonly DETERMINISTIC = 456;
    static readonly DISABLE_PAGE_SKIPPING = 457;
    static readonly ELEMENT = 458;
    static readonly EXTENDED = 459;
    static readonly FINALFUNC = 460;
    static readonly FINALFUNC_EXTRA = 461;
    static readonly FINALFUNC_MODIFY = 462;
    static readonly FORCE_NOT_NULL = 463;
    static readonly FORCE_NULL = 464;
    static readonly FORCE_QUOTE = 465;
    static readonly FORMAT = 466;
    static readonly GETTOKEN = 467;
    static readonly HASH = 468;
    static readonly HASHES = 469;
    static readonly HEADLINE = 470;
    static readonly HYPOTHETICAL = 471;
    static readonly INDEX_CLEANUP = 472;
    static readonly INIT = 473;
    static readonly INITCOND = 474;
    static readonly INTERNALLENGTH = 475;
    static readonly JSON = 476;
    static readonly LC_COLLATE = 477;
    static readonly LC_CTYPE = 478;
    static readonly LEFTARG = 479;
    static readonly LEXIZE = 480;
    static readonly LEXTYPES = 481;
    static readonly LIST = 482;
    static readonly LOCALE = 483;
    static readonly LOGIN = 484;
    static readonly MAIN = 485;
    static readonly MERGES = 486;
    static readonly MFINALFUNC = 487;
    static readonly MFINALFUNC_EXTRA = 488;
    static readonly MFINALFUNC_MODIFY = 489;
    static readonly MINITCOND = 490;
    static readonly MINVFUNC = 491;
    static readonly MODULUS = 492;
    static readonly MSFUNC = 493;
    static readonly MSSPACE = 494;
    static readonly MSTYPE = 495;
    static readonly NEGATOR = 496;
    static readonly NOBYPASSRLS = 497;
    static readonly NOCREATEDB = 498;
    static readonly NOCREATEROLE = 499;
    static readonly NOINHERIT = 500;
    static readonly NOLOGIN = 501;
    static readonly NOREPLICATION = 502;
    static readonly NOSUPERUSER = 503;
    static readonly OUTPUT = 504;
    static readonly PASSEDBYVALUE = 505;
    static readonly PATH = 506;
    static readonly PERMISSIVE = 507;
    static readonly PLAIN = 508;
    static readonly PREFERRED = 509;
    static readonly PROVIDER = 510;
    static readonly READ_ONLY = 511;
    static readonly READ_WRITE = 512;
    static readonly RECEIVE = 513;
    static readonly REMAINDER = 514;
    static readonly REPLICATION = 515;
    static readonly RESTRICTED = 516;
    static readonly RESTRICTIVE = 517;
    static readonly RIGHTARG = 518;
    static readonly SAFE = 519;
    static readonly SEND = 520;
    static readonly SERIALFUNC = 521;
    static readonly SETTINGS = 522;
    static readonly SFUNC = 523;
    static readonly SHAREABLE = 524;
    static readonly SKIP_LOCKED = 525;
    static readonly SORTOP = 526;
    static readonly SSPACE = 527;
    static readonly STYPE = 528;
    static readonly SUBTYPE_DIFF = 529;
    static readonly SUBTYPE_OPCLASS = 530;
    static readonly SUBTYPE = 531;
    static readonly SUMMARY = 532;
    static readonly SUPERUSER = 533;
    static readonly TIMING = 534;
    static readonly TYPMOD_IN = 535;
    static readonly TYPMOD_OUT = 536;
    static readonly UNSAFE = 537;
    static readonly USAGE = 538;
    static readonly VARIABLE = 539;
    static readonly YAML = 540;
    static readonly ALIAS = 541;
    static readonly ASSERT = 542;
    static readonly CONSTANT = 543;
    static readonly DATATYPE = 544;
    static readonly DEBUG = 545;
    static readonly DETAIL = 546;
    static readonly DIAGNOSTICS = 547;
    static readonly ELSEIF = 548;
    static readonly ELSIF = 549;
    static readonly ERRCODE = 550;
    static readonly EXIT = 551;
    static readonly EXCEPTION = 552;
    static readonly FOREACH = 553;
    static readonly GET = 554;
    static readonly HINT = 555;
    static readonly INFO = 556;
    static readonly LOG = 557;
    static readonly LOOP = 558;
    static readonly MESSAGE = 559;
    static readonly NOTICE = 560;
    static readonly OPEN = 561;
    static readonly PERFORM = 562;
    static readonly QUERY = 563;
    static readonly RAISE = 564;
    static readonly RECORD = 565;
    static readonly RETURN = 566;
    static readonly REVERSE = 567;
    static readonly ROWTYPE = 568;
    static readonly SLICE = 569;
    static readonly SQLSTATE = 570;
    static readonly STACKED = 571;
    static readonly WARNING = 572;
    static readonly WHILE = 573;
    static readonly CAST_EXPRESSION = 574;
    static readonly EQUAL = 575;
    static readonly COLON = 576;
    static readonly SEMI_COLON = 577;
    static readonly COMMA = 578;
    static readonly NOT_EQUAL = 579;
    static readonly LTH = 580;
    static readonly LEQ = 581;
    static readonly GTH = 582;
    static readonly GEQ = 583;
    static readonly LEFT_PAREN = 584;
    static readonly RIGHT_PAREN = 585;
    static readonly PLUS = 586;
    static readonly MINUS = 587;
    static readonly MULTIPLY = 588;
    static readonly DIVIDE = 589;
    static readonly MODULAR = 590;
    static readonly EXP = 591;
    static readonly DOT = 592;
    static readonly QUOTE_CHAR = 593;
    static readonly DOUBLE_QUOTE = 594;
    static readonly DOLLAR = 595;
    static readonly LEFT_BRACKET = 596;
    static readonly RIGHT_BRACKET = 597;
    static readonly EQUAL_GTH = 598;
    static readonly COLON_EQUAL = 599;
    static readonly LESS_LESS = 600;
    static readonly GREATER_GREATER = 601;
    static readonly DOUBLE_DOT = 602;
    static readonly HASH_SIGN = 603;
    static readonly BlockComment = 604;
    static readonly LineComment = 605;
    static readonly OP_CHARS = 606;
    static readonly NUMBER_LITERAL = 607;
    static readonly REAL_NUMBER = 608;
    static readonly DOLLAR_NUMBER = 609;
    static readonly Identifier = 610;
    static readonly QuotedIdentifier = 611;
    static readonly Character_String_Literal = 612;
    static readonly BeginDollarStringConstant = 613;
    static readonly Space = 614;
    static readonly White_Space = 615;
    static readonly New_Line = 616;
    static readonly Tab = 617;
    static readonly BOM = 618;
    static readonly BAD = 619;
    static readonly Text_between_Dollar = 620;
    static readonly EndDollarStringConstant = 621;
    static readonly RULE_sql = 0;
    static readonly RULE_qname_parser = 1;
    static readonly RULE_function_args_parser = 2;
    static readonly RULE_vex_eof = 3;
    static readonly RULE_plpgsql_function = 4;
    static readonly RULE_plpgsql_function_test_list = 5;
    static readonly RULE_statement = 6;
    static readonly RULE_data_statement = 7;
    static readonly RULE_script_statement = 8;
    static readonly RULE_script_transaction = 9;
    static readonly RULE_transaction_mode = 10;
    static readonly RULE_lock_table = 11;
    static readonly RULE_lock_mode = 12;
    static readonly RULE_script_additional = 13;
    static readonly RULE_additional_statement = 14;
    static readonly RULE_explain_statement = 15;
    static readonly RULE_explain_query = 16;
    static readonly RULE_execute_statement = 17;
    static readonly RULE_declare_statement = 18;
    static readonly RULE_show_statement = 19;
    static readonly RULE_explain_option = 20;
    static readonly RULE_user_name = 21;
    static readonly RULE_table_cols_list = 22;
    static readonly RULE_table_cols = 23;
    static readonly RULE_vacuum_mode = 24;
    static readonly RULE_vacuum_option = 25;
    static readonly RULE_analyze_mode = 26;
    static readonly RULE_boolean_value = 27;
    static readonly RULE_fetch_move_direction = 28;
    static readonly RULE_schema_statement = 29;
    static readonly RULE_schema_create = 30;
    static readonly RULE_schema_alter = 31;
    static readonly RULE_schema_drop = 32;
    static readonly RULE_schema_import = 33;
    static readonly RULE_alter_function_statement = 34;
    static readonly RULE_alter_aggregate_statement = 35;
    static readonly RULE_alter_extension_statement = 36;
    static readonly RULE_alter_extension_action = 37;
    static readonly RULE_extension_member_object = 38;
    static readonly RULE_alter_schema_statement = 39;
    static readonly RULE_alter_language_statement = 40;
    static readonly RULE_alter_table_statement = 41;
    static readonly RULE_table_action = 42;
    static readonly RULE_column_action = 43;
    static readonly RULE_identity_body = 44;
    static readonly RULE_alter_identity = 45;
    static readonly RULE_storage_option = 46;
    static readonly RULE_validate_constraint = 47;
    static readonly RULE_drop_constraint = 48;
    static readonly RULE_table_deferrable = 49;
    static readonly RULE_table_initialy_immed = 50;
    static readonly RULE_function_actions_common = 51;
    static readonly RULE_function_def = 52;
    static readonly RULE_alter_index_statement = 53;
    static readonly RULE_index_def_action = 54;
    static readonly RULE_alter_default_privileges = 55;
    static readonly RULE_abbreviated_grant_or_revoke = 56;
    static readonly RULE_grant_option_for = 57;
    static readonly RULE_alter_sequence_statement = 58;
    static readonly RULE_alter_view_statement = 59;
    static readonly RULE_alter_event_trigger = 60;
    static readonly RULE_alter_event_trigger_action = 61;
    static readonly RULE_alter_type_statement = 62;
    static readonly RULE_alter_domain_statement = 63;
    static readonly RULE_alter_server_statement = 64;
    static readonly RULE_alter_server_action = 65;
    static readonly RULE_alter_fts_statement = 66;
    static readonly RULE_alter_fts_configuration = 67;
    static readonly RULE_type_action = 68;
    static readonly RULE_set_def_column = 69;
    static readonly RULE_drop_def = 70;
    static readonly RULE_create_index_statement = 71;
    static readonly RULE_index_rest = 72;
    static readonly RULE_index_sort = 73;
    static readonly RULE_including_index = 74;
    static readonly RULE_index_where = 75;
    static readonly RULE_create_extension_statement = 76;
    static readonly RULE_create_language_statement = 77;
    static readonly RULE_create_event_trigger = 78;
    static readonly RULE_create_type_statement = 79;
    static readonly RULE_create_domain_statement = 80;
    static readonly RULE_create_server_statement = 81;
    static readonly RULE_create_fts_dictionary = 82;
    static readonly RULE_option_with_value = 83;
    static readonly RULE_create_fts_configuration = 84;
    static readonly RULE_create_fts_template = 85;
    static readonly RULE_create_fts_parser = 86;
    static readonly RULE_create_collation = 87;
    static readonly RULE_alter_collation = 88;
    static readonly RULE_collation_option = 89;
    static readonly RULE_create_user_mapping = 90;
    static readonly RULE_alter_user_mapping = 91;
    static readonly RULE_alter_user_or_role = 92;
    static readonly RULE_alter_user_or_role_set_reset = 93;
    static readonly RULE_user_or_role_set_reset = 94;
    static readonly RULE_alter_group = 95;
    static readonly RULE_alter_group_action = 96;
    static readonly RULE_alter_tablespace = 97;
    static readonly RULE_alter_owner = 98;
    static readonly RULE_alter_tablespace_action = 99;
    static readonly RULE_alter_statistics = 100;
    static readonly RULE_alter_foreign_data_wrapper = 101;
    static readonly RULE_alter_foreign_data_wrapper_action = 102;
    static readonly RULE_alter_operator_statement = 103;
    static readonly RULE_alter_operator_action = 104;
    static readonly RULE_operator_set_restrict_join = 105;
    static readonly RULE_drop_user_mapping = 106;
    static readonly RULE_drop_owned = 107;
    static readonly RULE_drop_operator_statement = 108;
    static readonly RULE_target_operator = 109;
    static readonly RULE_domain_constraint = 110;
    static readonly RULE_create_transform_statement = 111;
    static readonly RULE_create_access_method = 112;
    static readonly RULE_create_user_or_role = 113;
    static readonly RULE_user_or_role_option = 114;
    static readonly RULE_user_or_role_option_for_alter = 115;
    static readonly RULE_user_or_role_or_group_common_option = 116;
    static readonly RULE_user_or_role_common_option = 117;
    static readonly RULE_user_or_role_or_group_option_for_create = 118;
    static readonly RULE_create_group = 119;
    static readonly RULE_group_option = 120;
    static readonly RULE_create_tablespace = 121;
    static readonly RULE_create_statistics = 122;
    static readonly RULE_create_foreign_data_wrapper = 123;
    static readonly RULE_option_without_equal = 124;
    static readonly RULE_create_operator_statement = 125;
    static readonly RULE_operator_name = 126;
    static readonly RULE_operator_option = 127;
    static readonly RULE_create_aggregate_statement = 128;
    static readonly RULE_aggregate_param = 129;
    static readonly RULE_set_statement = 130;
    static readonly RULE_set_action = 131;
    static readonly RULE_session_local_option = 132;
    static readonly RULE_set_statement_value = 133;
    static readonly RULE_create_rewrite_statement = 134;
    static readonly RULE_rewrite_command = 135;
    static readonly RULE_create_trigger_statement = 136;
    static readonly RULE_trigger_referencing = 137;
    static readonly RULE_when_trigger = 138;
    static readonly RULE_rule_common = 139;
    static readonly RULE_rule_member_object = 140;
    static readonly RULE_columns_permissions = 141;
    static readonly RULE_table_column_privileges = 142;
    static readonly RULE_permissions = 143;
    static readonly RULE_permission = 144;
    static readonly RULE_other_rules = 145;
    static readonly RULE_grant_to_rule = 146;
    static readonly RULE_revoke_from_cascade_restrict = 147;
    static readonly RULE_roles_names = 148;
    static readonly RULE_role_name_with_group = 149;
    static readonly RULE_comment_on_statement = 150;
    static readonly RULE_security_label = 151;
    static readonly RULE_comment_member_object = 152;
    static readonly RULE_label_member_object = 153;
    static readonly RULE_create_function_statement = 154;
    static readonly RULE_create_funct_params = 155;
    static readonly RULE_transform_for_type = 156;
    static readonly RULE_function_ret_table = 157;
    static readonly RULE_function_column_name_type = 158;
    static readonly RULE_function_parameters = 159;
    static readonly RULE_function_args = 160;
    static readonly RULE_agg_order = 161;
    static readonly RULE_character_string = 162;
    static readonly RULE_function_arguments = 163;
    static readonly RULE_argmode = 164;
    static readonly RULE_create_sequence_statement = 165;
    static readonly RULE_sequence_body = 166;
    static readonly RULE_signed_number_literal = 167;
    static readonly RULE_signed_numerical_literal = 168;
    static readonly RULE_sign = 169;
    static readonly RULE_create_schema_statement = 170;
    static readonly RULE_create_policy_statement = 171;
    static readonly RULE_alter_policy_statement = 172;
    static readonly RULE_drop_policy_statement = 173;
    static readonly RULE_create_subscription_statement = 174;
    static readonly RULE_alter_subscription_statement = 175;
    static readonly RULE_alter_subscription_action = 176;
    static readonly RULE_create_cast_statement = 177;
    static readonly RULE_drop_cast_statement = 178;
    static readonly RULE_create_operator_family_statement = 179;
    static readonly RULE_alter_operator_family_statement = 180;
    static readonly RULE_operator_family_action = 181;
    static readonly RULE_add_operator_to_family = 182;
    static readonly RULE_drop_operator_from_family = 183;
    static readonly RULE_drop_operator_family_statement = 184;
    static readonly RULE_create_operator_class_statement = 185;
    static readonly RULE_create_operator_class_option = 186;
    static readonly RULE_alter_operator_class_statement = 187;
    static readonly RULE_drop_operator_class_statement = 188;
    static readonly RULE_create_conversion_statement = 189;
    static readonly RULE_alter_conversion_statement = 190;
    static readonly RULE_create_publication_statement = 191;
    static readonly RULE_alter_publication_statement = 192;
    static readonly RULE_alter_publication_action = 193;
    static readonly RULE_only_table_multiply = 194;
    static readonly RULE_alter_trigger_statement = 195;
    static readonly RULE_alter_rule_statement = 196;
    static readonly RULE_copy_statement = 197;
    static readonly RULE_copy_from_statement = 198;
    static readonly RULE_copy_to_statement = 199;
    static readonly RULE_copy_option_list = 200;
    static readonly RULE_copy_option = 201;
    static readonly RULE_create_view_statement = 202;
    static readonly RULE_if_exists = 203;
    static readonly RULE_if_not_exists = 204;
    static readonly RULE_view_columns = 205;
    static readonly RULE_with_check_option = 206;
    static readonly RULE_create_table_statement = 207;
    static readonly RULE_create_table_as_statement = 208;
    static readonly RULE_create_foreign_table_statement = 209;
    static readonly RULE_define_table = 210;
    static readonly RULE_define_partition = 211;
    static readonly RULE_for_values_bound = 212;
    static readonly RULE_partition_bound_spec = 213;
    static readonly RULE_partition_bound_part = 214;
    static readonly RULE_define_columns = 215;
    static readonly RULE_define_type = 216;
    static readonly RULE_partition_by = 217;
    static readonly RULE_partition_method = 218;
    static readonly RULE_partition_column = 219;
    static readonly RULE_define_server = 220;
    static readonly RULE_define_foreign_options = 221;
    static readonly RULE_foreign_option = 222;
    static readonly RULE_foreign_option_name = 223;
    static readonly RULE_list_of_type_column_def = 224;
    static readonly RULE_table_column_def = 225;
    static readonly RULE_table_of_type_column_def = 226;
    static readonly RULE_table_column_definition = 227;
    static readonly RULE_like_option = 228;
    static readonly RULE_constraint_common = 229;
    static readonly RULE_constr_body = 230;
    static readonly RULE_all_op = 231;
    static readonly RULE_all_simple_op = 232;
    static readonly RULE_op_chars = 233;
    static readonly RULE_index_parameters = 234;
    static readonly RULE_names_in_parens = 235;
    static readonly RULE_names_references = 236;
    static readonly RULE_storage_parameter = 237;
    static readonly RULE_storage_parameter_option = 238;
    static readonly RULE_storage_parameter_name = 239;
    static readonly RULE_with_storage_parameter = 240;
    static readonly RULE_storage_parameter_oid = 241;
    static readonly RULE_on_commit = 242;
    static readonly RULE_table_space = 243;
    static readonly RULE_action = 244;
    static readonly RULE_owner_to = 245;
    static readonly RULE_rename_to = 246;
    static readonly RULE_set_schema = 247;
    static readonly RULE_table_column_privilege = 248;
    static readonly RULE_usage_select_update = 249;
    static readonly RULE_partition_by_columns = 250;
    static readonly RULE_cascade_restrict = 251;
    static readonly RULE_collate_identifier = 252;
    static readonly RULE_indirection_var = 253;
    static readonly RULE_dollar_number = 254;
    static readonly RULE_indirection_list = 255;
    static readonly RULE_indirection = 256;
    static readonly RULE_drop_function_statement = 257;
    static readonly RULE_drop_trigger_statement = 258;
    static readonly RULE_drop_rule_statement = 259;
    static readonly RULE_drop_statements = 260;
    static readonly RULE_if_exist_names_restrict_cascade = 261;
    static readonly RULE_id_token = 262;
    static readonly RULE_identifier = 263;
    static readonly RULE_identifier_nontype = 264;
    static readonly RULE_col_label = 265;
    static readonly RULE_tokens_nonreserved = 266;
    static readonly RULE_tokens_nonreserved_except_function_type = 267;
    static readonly RULE_tokens_reserved_except_function_type = 268;
    static readonly RULE_tokens_reserved = 269;
    static readonly RULE_tokens_nonkeyword = 270;
    static readonly RULE_schema_qualified_name_nontype = 271;
    static readonly RULE_type_list = 272;
    static readonly RULE_data_type = 273;
    static readonly RULE_array_type = 274;
    static readonly RULE_predefined_type = 275;
    static readonly RULE_interval_field = 276;
    static readonly RULE_type_length = 277;
    static readonly RULE_precision_param = 278;
    static readonly RULE_vex = 279;
    static readonly RULE_vex_b = 280;
    static readonly RULE_op = 281;
    static readonly RULE_all_op_ref = 282;
    static readonly RULE_datetime_overlaps = 283;
    static readonly RULE_value_expression_primary = 284;
    static readonly RULE_unsigned_value_specification = 285;
    static readonly RULE_unsigned_numeric_literal = 286;
    static readonly RULE_truth_value = 287;
    static readonly RULE_case_expression = 288;
    static readonly RULE_cast_specification = 289;
    static readonly RULE_function_call = 290;
    static readonly RULE_vex_or_named_notation = 291;
    static readonly RULE_pointer = 292;
    static readonly RULE_function_construct = 293;
    static readonly RULE_extract_function = 294;
    static readonly RULE_system_function = 295;
    static readonly RULE_date_time_function = 296;
    static readonly RULE_string_value_function = 297;
    static readonly RULE_xml_function = 298;
    static readonly RULE_xml_table_column = 299;
    static readonly RULE_comparison_mod = 300;
    static readonly RULE_filter_clause = 301;
    static readonly RULE_window_definition = 302;
    static readonly RULE_frame_clause = 303;
    static readonly RULE_frame_bound = 304;
    static readonly RULE_array_expression = 305;
    static readonly RULE_array_elements = 306;
    static readonly RULE_type_coercion = 307;
    static readonly RULE_schema_qualified_name = 308;
    static readonly RULE_set_qualifier = 309;
    static readonly RULE_table_subquery = 310;
    static readonly RULE_select_stmt = 311;
    static readonly RULE_after_ops = 312;
    static readonly RULE_select_stmt_no_parens = 313;
    static readonly RULE_with_clause = 314;
    static readonly RULE_with_query = 315;
    static readonly RULE_select_ops = 316;
    static readonly RULE_select_ops_no_parens = 317;
    static readonly RULE_select_primary = 318;
    static readonly RULE_select_list = 319;
    static readonly RULE_select_sublist = 320;
    static readonly RULE_into_table = 321;
    static readonly RULE_from_item = 322;
    static readonly RULE_from_primary = 323;
    static readonly RULE_alias_clause = 324;
    static readonly RULE_from_function_column_def = 325;
    static readonly RULE_groupby_clause = 326;
    static readonly RULE_grouping_element_list = 327;
    static readonly RULE_grouping_element = 328;
    static readonly RULE_values_stmt = 329;
    static readonly RULE_values_values = 330;
    static readonly RULE_orderby_clause = 331;
    static readonly RULE_sort_specifier_list = 332;
    static readonly RULE_sort_specifier = 333;
    static readonly RULE_order_specification = 334;
    static readonly RULE_null_ordering = 335;
    static readonly RULE_insert_stmt_for_psql = 336;
    static readonly RULE_insert_columns = 337;
    static readonly RULE_indirection_identifier = 338;
    static readonly RULE_conflict_object = 339;
    static readonly RULE_conflict_action = 340;
    static readonly RULE_delete_stmt_for_psql = 341;
    static readonly RULE_update_stmt_for_psql = 342;
    static readonly RULE_update_set = 343;
    static readonly RULE_notify_stmt = 344;
    static readonly RULE_truncate_stmt = 345;
    static readonly RULE_identifier_list = 346;
    static readonly RULE_anonymous_block = 347;
    static readonly RULE_comp_options = 348;
    static readonly RULE_function_block = 349;
    static readonly RULE_start_label = 350;
    static readonly RULE_declarations = 351;
    static readonly RULE_declaration = 352;
    static readonly RULE_type_declaration = 353;
    static readonly RULE_arguments_list = 354;
    static readonly RULE_data_type_dec = 355;
    static readonly RULE_exception_statement = 356;
    static readonly RULE_function_statements = 357;
    static readonly RULE_function_statement = 358;
    static readonly RULE_base_statement = 359;
    static readonly RULE_var = 360;
    static readonly RULE_diagnostic_option = 361;
    static readonly RULE_perform_stmt = 362;
    static readonly RULE_assign_stmt = 363;
    static readonly RULE_execute_stmt = 364;
    static readonly RULE_control_statement = 365;
    static readonly RULE_cursor_statement = 366;
    static readonly RULE_option = 367;
    static readonly RULE_transaction_statement = 368;
    static readonly RULE_message_statement = 369;
    static readonly RULE_log_level = 370;
    static readonly RULE_raise_using = 371;
    static readonly RULE_raise_param = 372;
    static readonly RULE_return_stmt = 373;
    static readonly RULE_loop_statement = 374;
    static readonly RULE_loop_start = 375;
    static readonly RULE_using_vex = 376;
    static readonly RULE_if_statement = 377;
    static readonly RULE_case_statement = 378;
    static readonly RULE_plpgsql_query = 379;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException;
    constructor(input: TokenStream);
    sql(): SqlContext;
    qname_parser(): Qname_parserContext;
    function_args_parser(): Function_args_parserContext;
    vex_eof(): Vex_eofContext;
    plpgsql_function(): Plpgsql_functionContext;
    plpgsql_function_test_list(): Plpgsql_function_test_listContext;
    statement(): StatementContext;
    data_statement(): Data_statementContext;
    script_statement(): Script_statementContext;
    script_transaction(): Script_transactionContext;
    transaction_mode(): Transaction_modeContext;
    lock_table(): Lock_tableContext;
    lock_mode(): Lock_modeContext;
    script_additional(): Script_additionalContext;
    additional_statement(): Additional_statementContext;
    explain_statement(): Explain_statementContext;
    explain_query(): Explain_queryContext;
    execute_statement(): Execute_statementContext;
    declare_statement(): Declare_statementContext;
    show_statement(): Show_statementContext;
    explain_option(): Explain_optionContext;
    user_name(): User_nameContext;
    table_cols_list(): Table_cols_listContext;
    table_cols(): Table_colsContext;
    vacuum_mode(): Vacuum_modeContext;
    vacuum_option(): Vacuum_optionContext;
    analyze_mode(): Analyze_modeContext;
    boolean_value(): Boolean_valueContext;
    fetch_move_direction(): Fetch_move_directionContext;
    schema_statement(): Schema_statementContext;
    schema_create(): Schema_createContext;
    schema_alter(): Schema_alterContext;
    schema_drop(): Schema_dropContext;
    schema_import(): Schema_importContext;
    alter_function_statement(): Alter_function_statementContext;
    alter_aggregate_statement(): Alter_aggregate_statementContext;
    alter_extension_statement(): Alter_extension_statementContext;
    alter_extension_action(): Alter_extension_actionContext;
    extension_member_object(): Extension_member_objectContext;
    alter_schema_statement(): Alter_schema_statementContext;
    alter_language_statement(): Alter_language_statementContext;
    alter_table_statement(): Alter_table_statementContext;
    table_action(): Table_actionContext;
    column_action(): Column_actionContext;
    identity_body(): Identity_bodyContext;
    alter_identity(): Alter_identityContext;
    storage_option(): Storage_optionContext;
    validate_constraint(): Validate_constraintContext;
    drop_constraint(): Drop_constraintContext;
    table_deferrable(): Table_deferrableContext;
    table_initialy_immed(): Table_initialy_immedContext;
    function_actions_common(): Function_actions_commonContext;
    function_def(): Function_defContext;
    alter_index_statement(): Alter_index_statementContext;
    index_def_action(): Index_def_actionContext;
    alter_default_privileges(): Alter_default_privilegesContext;
    abbreviated_grant_or_revoke(): Abbreviated_grant_or_revokeContext;
    grant_option_for(): Grant_option_forContext;
    alter_sequence_statement(): Alter_sequence_statementContext;
    alter_view_statement(): Alter_view_statementContext;
    alter_event_trigger(): Alter_event_triggerContext;
    alter_event_trigger_action(): Alter_event_trigger_actionContext;
    alter_type_statement(): Alter_type_statementContext;
    alter_domain_statement(): Alter_domain_statementContext;
    alter_server_statement(): Alter_server_statementContext;
    alter_server_action(): Alter_server_actionContext;
    alter_fts_statement(): Alter_fts_statementContext;
    alter_fts_configuration(): Alter_fts_configurationContext;
    type_action(): Type_actionContext;
    set_def_column(): Set_def_columnContext;
    drop_def(): Drop_defContext;
    create_index_statement(): Create_index_statementContext;
    index_rest(): Index_restContext;
    index_sort(): Index_sortContext;
    including_index(): Including_indexContext;
    index_where(): Index_whereContext;
    create_extension_statement(): Create_extension_statementContext;
    create_language_statement(): Create_language_statementContext;
    create_event_trigger(): Create_event_triggerContext;
    create_type_statement(): Create_type_statementContext;
    create_domain_statement(): Create_domain_statementContext;
    create_server_statement(): Create_server_statementContext;
    create_fts_dictionary(): Create_fts_dictionaryContext;
    option_with_value(): Option_with_valueContext;
    create_fts_configuration(): Create_fts_configurationContext;
    create_fts_template(): Create_fts_templateContext;
    create_fts_parser(): Create_fts_parserContext;
    create_collation(): Create_collationContext;
    alter_collation(): Alter_collationContext;
    collation_option(): Collation_optionContext;
    create_user_mapping(): Create_user_mappingContext;
    alter_user_mapping(): Alter_user_mappingContext;
    alter_user_or_role(): Alter_user_or_roleContext;
    alter_user_or_role_set_reset(): Alter_user_or_role_set_resetContext;
    user_or_role_set_reset(): User_or_role_set_resetContext;
    alter_group(): Alter_groupContext;
    alter_group_action(): Alter_group_actionContext;
    alter_tablespace(): Alter_tablespaceContext;
    alter_owner(): Alter_ownerContext;
    alter_tablespace_action(): Alter_tablespace_actionContext;
    alter_statistics(): Alter_statisticsContext;
    alter_foreign_data_wrapper(): Alter_foreign_data_wrapperContext;
    alter_foreign_data_wrapper_action(): Alter_foreign_data_wrapper_actionContext;
    alter_operator_statement(): Alter_operator_statementContext;
    alter_operator_action(): Alter_operator_actionContext;
    operator_set_restrict_join(): Operator_set_restrict_joinContext;
    drop_user_mapping(): Drop_user_mappingContext;
    drop_owned(): Drop_ownedContext;
    drop_operator_statement(): Drop_operator_statementContext;
    target_operator(): Target_operatorContext;
    domain_constraint(): Domain_constraintContext;
    create_transform_statement(): Create_transform_statementContext;
    create_access_method(): Create_access_methodContext;
    create_user_or_role(): Create_user_or_roleContext;
    user_or_role_option(): User_or_role_optionContext;
    user_or_role_option_for_alter(): User_or_role_option_for_alterContext;
    user_or_role_or_group_common_option(): User_or_role_or_group_common_optionContext;
    user_or_role_common_option(): User_or_role_common_optionContext;
    user_or_role_or_group_option_for_create(): User_or_role_or_group_option_for_createContext;
    create_group(): Create_groupContext;
    group_option(): Group_optionContext;
    create_tablespace(): Create_tablespaceContext;
    create_statistics(): Create_statisticsContext;
    create_foreign_data_wrapper(): Create_foreign_data_wrapperContext;
    option_without_equal(): Option_without_equalContext;
    create_operator_statement(): Create_operator_statementContext;
    operator_name(): Operator_nameContext;
    operator_option(): Operator_optionContext;
    create_aggregate_statement(): Create_aggregate_statementContext;
    aggregate_param(): Aggregate_paramContext;
    set_statement(): Set_statementContext;
    set_action(): Set_actionContext;
    session_local_option(): Session_local_optionContext;
    set_statement_value(): Set_statement_valueContext;
    create_rewrite_statement(): Create_rewrite_statementContext;
    rewrite_command(): Rewrite_commandContext;
    create_trigger_statement(): Create_trigger_statementContext;
    trigger_referencing(): Trigger_referencingContext;
    when_trigger(): When_triggerContext;
    rule_common(): Rule_commonContext;
    rule_member_object(): Rule_member_objectContext;
    columns_permissions(): Columns_permissionsContext;
    table_column_privileges(): Table_column_privilegesContext;
    permissions(): PermissionsContext;
    permission(): PermissionContext;
    other_rules(): Other_rulesContext;
    grant_to_rule(): Grant_to_ruleContext;
    revoke_from_cascade_restrict(): Revoke_from_cascade_restrictContext;
    roles_names(): Roles_namesContext;
    role_name_with_group(): Role_name_with_groupContext;
    comment_on_statement(): Comment_on_statementContext;
    security_label(): Security_labelContext;
    comment_member_object(): Comment_member_objectContext;
    label_member_object(): Label_member_objectContext;
    create_function_statement(): Create_function_statementContext;
    create_funct_params(): Create_funct_paramsContext;
    transform_for_type(): Transform_for_typeContext;
    function_ret_table(): Function_ret_tableContext;
    function_column_name_type(): Function_column_name_typeContext;
    function_parameters(): Function_parametersContext;
    function_args(): Function_argsContext;
    agg_order(): Agg_orderContext;
    character_string(): Character_stringContext;
    function_arguments(): Function_argumentsContext;
    argmode(): ArgmodeContext;
    create_sequence_statement(): Create_sequence_statementContext;
    sequence_body(): Sequence_bodyContext;
    signed_number_literal(): Signed_number_literalContext;
    signed_numerical_literal(): Signed_numerical_literalContext;
    sign(): SignContext;
    create_schema_statement(): Create_schema_statementContext;
    create_policy_statement(): Create_policy_statementContext;
    alter_policy_statement(): Alter_policy_statementContext;
    drop_policy_statement(): Drop_policy_statementContext;
    create_subscription_statement(): Create_subscription_statementContext;
    alter_subscription_statement(): Alter_subscription_statementContext;
    alter_subscription_action(): Alter_subscription_actionContext;
    create_cast_statement(): Create_cast_statementContext;
    drop_cast_statement(): Drop_cast_statementContext;
    create_operator_family_statement(): Create_operator_family_statementContext;
    alter_operator_family_statement(): Alter_operator_family_statementContext;
    operator_family_action(): Operator_family_actionContext;
    add_operator_to_family(): Add_operator_to_familyContext;
    drop_operator_from_family(): Drop_operator_from_familyContext;
    drop_operator_family_statement(): Drop_operator_family_statementContext;
    create_operator_class_statement(): Create_operator_class_statementContext;
    create_operator_class_option(): Create_operator_class_optionContext;
    alter_operator_class_statement(): Alter_operator_class_statementContext;
    drop_operator_class_statement(): Drop_operator_class_statementContext;
    create_conversion_statement(): Create_conversion_statementContext;
    alter_conversion_statement(): Alter_conversion_statementContext;
    create_publication_statement(): Create_publication_statementContext;
    alter_publication_statement(): Alter_publication_statementContext;
    alter_publication_action(): Alter_publication_actionContext;
    only_table_multiply(): Only_table_multiplyContext;
    alter_trigger_statement(): Alter_trigger_statementContext;
    alter_rule_statement(): Alter_rule_statementContext;
    copy_statement(): Copy_statementContext;
    copy_from_statement(): Copy_from_statementContext;
    copy_to_statement(): Copy_to_statementContext;
    copy_option_list(): Copy_option_listContext;
    copy_option(): Copy_optionContext;
    create_view_statement(): Create_view_statementContext;
    if_exists(): If_existsContext;
    if_not_exists(): If_not_existsContext;
    view_columns(): View_columnsContext;
    with_check_option(): With_check_optionContext;
    create_table_statement(): Create_table_statementContext;
    create_table_as_statement(): Create_table_as_statementContext;
    create_foreign_table_statement(): Create_foreign_table_statementContext;
    define_table(): Define_tableContext;
    define_partition(): Define_partitionContext;
    for_values_bound(): For_values_boundContext;
    partition_bound_spec(): Partition_bound_specContext;
    partition_bound_part(): Partition_bound_partContext;
    define_columns(): Define_columnsContext;
    define_type(): Define_typeContext;
    partition_by(): Partition_byContext;
    partition_method(): Partition_methodContext;
    partition_column(): Partition_columnContext;
    define_server(): Define_serverContext;
    define_foreign_options(): Define_foreign_optionsContext;
    foreign_option(): Foreign_optionContext;
    foreign_option_name(): Foreign_option_nameContext;
    list_of_type_column_def(): List_of_type_column_defContext;
    table_column_def(): Table_column_defContext;
    table_of_type_column_def(): Table_of_type_column_defContext;
    table_column_definition(): Table_column_definitionContext;
    like_option(): Like_optionContext;
    constraint_common(): Constraint_commonContext;
    constr_body(): Constr_bodyContext;
    all_op(): All_opContext;
    all_simple_op(): All_simple_opContext;
    op_chars(): Op_charsContext;
    index_parameters(): Index_parametersContext;
    names_in_parens(): Names_in_parensContext;
    names_references(): Names_referencesContext;
    storage_parameter(): Storage_parameterContext;
    storage_parameter_option(): Storage_parameter_optionContext;
    storage_parameter_name(): Storage_parameter_nameContext;
    with_storage_parameter(): With_storage_parameterContext;
    storage_parameter_oid(): Storage_parameter_oidContext;
    on_commit(): On_commitContext;
    table_space(): Table_spaceContext;
    action(): ActionContext;
    owner_to(): Owner_toContext;
    rename_to(): Rename_toContext;
    set_schema(): Set_schemaContext;
    table_column_privilege(): Table_column_privilegeContext;
    usage_select_update(): Usage_select_updateContext;
    partition_by_columns(): Partition_by_columnsContext;
    cascade_restrict(): Cascade_restrictContext;
    collate_identifier(): Collate_identifierContext;
    indirection_var(): Indirection_varContext;
    dollar_number(): Dollar_numberContext;
    indirection_list(): Indirection_listContext;
    indirection(): IndirectionContext;
    drop_function_statement(): Drop_function_statementContext;
    drop_trigger_statement(): Drop_trigger_statementContext;
    drop_rule_statement(): Drop_rule_statementContext;
    drop_statements(): Drop_statementsContext;
    if_exist_names_restrict_cascade(): If_exist_names_restrict_cascadeContext;
    id_token(): Id_tokenContext;
    identifier(): IdentifierContext;
    identifier_nontype(): Identifier_nontypeContext;
    col_label(): Col_labelContext;
    tokens_nonreserved(): Tokens_nonreservedContext;
    tokens_nonreserved_except_function_type(): Tokens_nonreserved_except_function_typeContext;
    tokens_reserved_except_function_type(): Tokens_reserved_except_function_typeContext;
    tokens_reserved(): Tokens_reservedContext;
    tokens_nonkeyword(): Tokens_nonkeywordContext;
    schema_qualified_name_nontype(): Schema_qualified_name_nontypeContext;
    type_list(): Type_listContext;
    data_type(): Data_typeContext;
    array_type(): Array_typeContext;
    predefined_type(): Predefined_typeContext;
    interval_field(): Interval_fieldContext;
    type_length(): Type_lengthContext;
    precision_param(): Precision_paramContext;
    vex(): VexContext;
    vex(_p: number): VexContext;
    vex_b(): Vex_bContext;
    vex_b(_p: number): Vex_bContext;
    op(): OpContext;
    all_op_ref(): All_op_refContext;
    datetime_overlaps(): Datetime_overlapsContext;
    value_expression_primary(): Value_expression_primaryContext;
    unsigned_value_specification(): Unsigned_value_specificationContext;
    unsigned_numeric_literal(): Unsigned_numeric_literalContext;
    truth_value(): Truth_valueContext;
    case_expression(): Case_expressionContext;
    cast_specification(): Cast_specificationContext;
    function_call(): Function_callContext;
    vex_or_named_notation(): Vex_or_named_notationContext;
    pointer(): PointerContext;
    function_construct(): Function_constructContext;
    extract_function(): Extract_functionContext;
    system_function(): System_functionContext;
    date_time_function(): Date_time_functionContext;
    string_value_function(): String_value_functionContext;
    xml_function(): Xml_functionContext;
    xml_table_column(): Xml_table_columnContext;
    comparison_mod(): Comparison_modContext;
    filter_clause(): Filter_clauseContext;
    window_definition(): Window_definitionContext;
    frame_clause(): Frame_clauseContext;
    frame_bound(): Frame_boundContext;
    array_expression(): Array_expressionContext;
    array_elements(): Array_elementsContext;
    type_coercion(): Type_coercionContext;
    schema_qualified_name(): Schema_qualified_nameContext;
    set_qualifier(): Set_qualifierContext;
    table_subquery(): Table_subqueryContext;
    select_stmt(): Select_stmtContext;
    after_ops(): After_opsContext;
    select_stmt_no_parens(): Select_stmt_no_parensContext;
    with_clause(): With_clauseContext;
    with_query(): With_queryContext;
    select_ops(): Select_opsContext;
    select_ops(_p: number): Select_opsContext;
    select_ops_no_parens(): Select_ops_no_parensContext;
    select_primary(): Select_primaryContext;
    select_list(): Select_listContext;
    select_sublist(): Select_sublistContext;
    into_table(): Into_tableContext;
    from_item(): From_itemContext;
    from_item(_p: number): From_itemContext;
    from_primary(): From_primaryContext;
    alias_clause(): Alias_clauseContext;
    from_function_column_def(): From_function_column_defContext;
    groupby_clause(): Groupby_clauseContext;
    grouping_element_list(): Grouping_element_listContext;
    grouping_element(): Grouping_elementContext;
    values_stmt(): Values_stmtContext;
    values_values(): Values_valuesContext;
    orderby_clause(): Orderby_clauseContext;
    sort_specifier_list(): Sort_specifier_listContext;
    sort_specifier(): Sort_specifierContext;
    order_specification(): Order_specificationContext;
    null_ordering(): Null_orderingContext;
    insert_stmt_for_psql(): Insert_stmt_for_psqlContext;
    insert_columns(): Insert_columnsContext;
    indirection_identifier(): Indirection_identifierContext;
    conflict_object(): Conflict_objectContext;
    conflict_action(): Conflict_actionContext;
    delete_stmt_for_psql(): Delete_stmt_for_psqlContext;
    update_stmt_for_psql(): Update_stmt_for_psqlContext;
    update_set(): Update_setContext;
    notify_stmt(): Notify_stmtContext;
    truncate_stmt(): Truncate_stmtContext;
    identifier_list(): Identifier_listContext;
    anonymous_block(): Anonymous_blockContext;
    comp_options(): Comp_optionsContext;
    function_block(): Function_blockContext;
    start_label(): Start_labelContext;
    declarations(): DeclarationsContext;
    declaration(): DeclarationContext;
    type_declaration(): Type_declarationContext;
    arguments_list(): Arguments_listContext;
    data_type_dec(): Data_type_decContext;
    exception_statement(): Exception_statementContext;
    function_statements(): Function_statementsContext;
    function_statement(): Function_statementContext;
    base_statement(): Base_statementContext;
    var(): VarContext;
    diagnostic_option(): Diagnostic_optionContext;
    perform_stmt(): Perform_stmtContext;
    assign_stmt(): Assign_stmtContext;
    execute_stmt(): Execute_stmtContext;
    control_statement(): Control_statementContext;
    cursor_statement(): Cursor_statementContext;
    option(): OptionContext;
    transaction_statement(): Transaction_statementContext;
    message_statement(): Message_statementContext;
    log_level(): Log_levelContext;
    raise_using(): Raise_usingContext;
    raise_param(): Raise_paramContext;
    return_stmt(): Return_stmtContext;
    loop_statement(): Loop_statementContext;
    loop_start(): Loop_startContext;
    using_vex(): Using_vexContext;
    if_statement(): If_statementContext;
    case_statement(): Case_statementContext;
    plpgsql_query(): Plpgsql_queryContext;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private vex_sempred;
    private vex_b_sempred;
    private select_ops_sempred;
    private from_item_sempred;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    private static readonly _serializedATNSegment3;
    private static readonly _serializedATNSegment4;
    private static readonly _serializedATNSegment5;
    private static readonly _serializedATNSegment6;
    private static readonly _serializedATNSegment7;
    private static readonly _serializedATNSegment8;
    private static readonly _serializedATNSegment9;
    private static readonly _serializedATNSegment10;
    private static readonly _serializedATNSegment11;
    private static readonly _serializedATNSegment12;
    private static readonly _serializedATNSegment13;
    private static readonly _serializedATNSegment14;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
export declare class SqlContext extends ParserRuleContext {
    EOF(): TerminalNode[];
    EOF(i: number): TerminalNode;
    BOM(): TerminalNode | undefined;
    SEMI_COLON(): TerminalNode[];
    SEMI_COLON(i: number): TerminalNode;
    statement(): StatementContext[];
    statement(i: number): StatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Qname_parserContext extends ParserRuleContext {
    schema_qualified_name(): Schema_qualified_nameContext;
    EOF(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_args_parserContext extends ParserRuleContext {
    function_args(): Function_argsContext;
    EOF(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Vex_eofContext extends ParserRuleContext {
    vex(): VexContext[];
    vex(i: number): VexContext;
    EOF(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Plpgsql_functionContext extends ParserRuleContext {
    function_block(): Function_blockContext;
    EOF(): TerminalNode;
    comp_options(): Comp_optionsContext | undefined;
    SEMI_COLON(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Plpgsql_function_test_listContext extends ParserRuleContext {
    EOF(): TerminalNode;
    function_block(): Function_blockContext[];
    function_block(i: number): Function_blockContext;
    SEMI_COLON(): TerminalNode[];
    SEMI_COLON(i: number): TerminalNode;
    comp_options(): Comp_optionsContext[];
    comp_options(i: number): Comp_optionsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class StatementContext extends ParserRuleContext {
    data_statement(): Data_statementContext | undefined;
    schema_statement(): Schema_statementContext | undefined;
    script_statement(): Script_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Data_statementContext extends ParserRuleContext {
    select_stmt(): Select_stmtContext | undefined;
    insert_stmt_for_psql(): Insert_stmt_for_psqlContext | undefined;
    update_stmt_for_psql(): Update_stmt_for_psqlContext | undefined;
    delete_stmt_for_psql(): Delete_stmt_for_psqlContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Script_statementContext extends ParserRuleContext {
    script_transaction(): Script_transactionContext | undefined;
    script_additional(): Script_additionalContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Script_transactionContext extends ParserRuleContext {
    START(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    BEGIN(): TerminalNode | undefined;
    transaction_mode(): Transaction_modeContext[];
    transaction_mode(i: number): Transaction_modeContext;
    WORK(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    COMMIT(): TerminalNode | undefined;
    END(): TerminalNode | undefined;
    ABORT(): TerminalNode | undefined;
    ROLLBACK(): TerminalNode | undefined;
    AND(): TerminalNode | undefined;
    CHAIN(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    Character_String_Literal(): TerminalNode | undefined;
    PREPARED(): TerminalNode | undefined;
    PREPARE(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    SAVEPOINT(): TerminalNode | undefined;
    RELEASE(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    lock_table(): Lock_tableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Transaction_modeContext extends ParserRuleContext {
    ISOLATION(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    SERIALIZABLE(): TerminalNode | undefined;
    REPEATABLE(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    COMMITTED(): TerminalNode | undefined;
    UNCOMMITTED(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    DEFERRABLE(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Lock_tableContext extends ParserRuleContext {
    LOCK(): TerminalNode;
    only_table_multiply(): Only_table_multiplyContext[];
    only_table_multiply(i: number): Only_table_multiplyContext;
    TABLE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    IN(): TerminalNode | undefined;
    lock_mode(): Lock_modeContext | undefined;
    MODE(): TerminalNode | undefined;
    NOWAIT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Lock_modeContext extends ParserRuleContext {
    SHARE(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    ACCESS(): TerminalNode | undefined;
    EXCLUSIVE(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Script_additionalContext extends ParserRuleContext {
    additional_statement(): Additional_statementContext | undefined;
    VACUUM(): TerminalNode | undefined;
    vacuum_mode(): Vacuum_modeContext | undefined;
    table_cols_list(): Table_cols_listContext | undefined;
    identifier(): IdentifierContext | undefined;
    FETCH(): TerminalNode | undefined;
    MOVE(): TerminalNode | undefined;
    fetch_move_direction(): Fetch_move_directionContext | undefined;
    FROM(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    CLOSE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    CALL(): TerminalNode | undefined;
    function_call(): Function_callContext | undefined;
    DISCARD(): TerminalNode | undefined;
    PLANS(): TerminalNode | undefined;
    SEQUENCES(): TerminalNode | undefined;
    TEMPORARY(): TerminalNode | undefined;
    TEMP(): TerminalNode | undefined;
    declare_statement(): Declare_statementContext | undefined;
    execute_statement(): Execute_statementContext | undefined;
    explain_statement(): Explain_statementContext | undefined;
    show_statement(): Show_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Additional_statementContext extends ParserRuleContext {
    anonymous_block(): Anonymous_blockContext | undefined;
    LISTEN(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    UNLISTEN(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    ANALYZE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    analyze_mode(): Analyze_modeContext[];
    analyze_mode(i: number): Analyze_modeContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    VERBOSE(): TerminalNode | undefined;
    table_cols_list(): Table_cols_listContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    CLUSTER(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    USING(): TerminalNode | undefined;
    CHECKPOINT(): TerminalNode | undefined;
    LOAD(): TerminalNode | undefined;
    Character_String_Literal(): TerminalNode | undefined;
    DEALLOCATE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    PREPARE(): TerminalNode | undefined;
    REINDEX(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    SYSTEM(): TerminalNode | undefined;
    CONCURRENTLY(): TerminalNode | undefined;
    RESET(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    REFRESH(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    data_statement(): Data_statementContext | undefined;
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    REASSIGN(): TerminalNode | undefined;
    OWNED(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    user_name(): User_nameContext[];
    user_name(i: number): User_nameContext;
    TO(): TerminalNode | undefined;
    copy_statement(): Copy_statementContext | undefined;
    truncate_stmt(): Truncate_stmtContext | undefined;
    notify_stmt(): Notify_stmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Explain_statementContext extends ParserRuleContext {
    EXPLAIN(): TerminalNode;
    explain_query(): Explain_queryContext;
    LEFT_PAREN(): TerminalNode | undefined;
    explain_option(): Explain_optionContext[];
    explain_option(i: number): Explain_optionContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    ANALYZE(): TerminalNode | undefined;
    VERBOSE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Explain_queryContext extends ParserRuleContext {
    data_statement(): Data_statementContext | undefined;
    execute_statement(): Execute_statementContext | undefined;
    declare_statement(): Declare_statementContext | undefined;
    CREATE(): TerminalNode | undefined;
    create_table_as_statement(): Create_table_as_statementContext | undefined;
    create_view_statement(): Create_view_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Execute_statementContext extends ParserRuleContext {
    EXECUTE(): TerminalNode;
    identifier(): IdentifierContext;
    LEFT_PAREN(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Declare_statementContext extends ParserRuleContext {
    DECLARE(): TerminalNode;
    identifier(): IdentifierContext;
    CURSOR(): TerminalNode;
    FOR(): TerminalNode;
    select_stmt(): Select_stmtContext;
    BINARY(): TerminalNode | undefined;
    INSENSITIVE(): TerminalNode | undefined;
    SCROLL(): TerminalNode | undefined;
    HOLD(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Show_statementContext extends ParserRuleContext {
    SHOW(): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    ALL(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    ISOLATION(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Explain_optionContext extends ParserRuleContext {
    ANALYZE(): TerminalNode | undefined;
    VERBOSE(): TerminalNode | undefined;
    COSTS(): TerminalNode | undefined;
    SETTINGS(): TerminalNode | undefined;
    BUFFERS(): TerminalNode | undefined;
    TIMING(): TerminalNode | undefined;
    SUMMARY(): TerminalNode | undefined;
    boolean_value(): Boolean_valueContext | undefined;
    FORMAT(): TerminalNode | undefined;
    TEXT(): TerminalNode | undefined;
    XML(): TerminalNode | undefined;
    JSON(): TerminalNode | undefined;
    YAML(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class User_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    CURRENT_USER(): TerminalNode | undefined;
    SESSION_USER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Table_cols_listContext extends ParserRuleContext {
    table_cols(): Table_colsContext[];
    table_cols(i: number): Table_colsContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Table_colsContext extends ParserRuleContext {
    schema_qualified_name(): Schema_qualified_nameContext;
    LEFT_PAREN(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Vacuum_modeContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode | undefined;
    vacuum_option(): Vacuum_optionContext[];
    vacuum_option(i: number): Vacuum_optionContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    FULL(): TerminalNode | undefined;
    FREEZE(): TerminalNode | undefined;
    VERBOSE(): TerminalNode | undefined;
    ANALYZE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Vacuum_optionContext extends ParserRuleContext {
    FULL(): TerminalNode | undefined;
    FREEZE(): TerminalNode | undefined;
    VERBOSE(): TerminalNode | undefined;
    ANALYZE(): TerminalNode | undefined;
    DISABLE_PAGE_SKIPPING(): TerminalNode | undefined;
    SKIP_LOCKED(): TerminalNode | undefined;
    INDEX_CLEANUP(): TerminalNode | undefined;
    TRUNCATE(): TerminalNode | undefined;
    boolean_value(): Boolean_valueContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Analyze_modeContext extends ParserRuleContext {
    VERBOSE(): TerminalNode | undefined;
    SKIP_LOCKED(): TerminalNode | undefined;
    boolean_value(): Boolean_valueContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Boolean_valueContext extends ParserRuleContext {
    TRUE(): TerminalNode | undefined;
    FALSE(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    NUMBER_LITERAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Fetch_move_directionContext extends ParserRuleContext {
    NEXT(): TerminalNode | undefined;
    PRIOR(): TerminalNode | undefined;
    FIRST(): TerminalNode | undefined;
    LAST(): TerminalNode | undefined;
    signed_number_literal(): Signed_number_literalContext | undefined;
    ABSOLUTE(): TerminalNode | undefined;
    RELATIVE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    FORWARD(): TerminalNode | undefined;
    NUMBER_LITERAL(): TerminalNode | undefined;
    BACKWARD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Schema_statementContext extends ParserRuleContext {
    schema_create(): Schema_createContext | undefined;
    schema_alter(): Schema_alterContext | undefined;
    schema_drop(): Schema_dropContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Schema_createContext extends ParserRuleContext {
    CREATE(): TerminalNode | undefined;
    create_table_statement(): Create_table_statementContext | undefined;
    create_foreign_table_statement(): Create_foreign_table_statementContext | undefined;
    create_index_statement(): Create_index_statementContext | undefined;
    create_extension_statement(): Create_extension_statementContext | undefined;
    create_trigger_statement(): Create_trigger_statementContext | undefined;
    create_rewrite_statement(): Create_rewrite_statementContext | undefined;
    create_function_statement(): Create_function_statementContext | undefined;
    create_sequence_statement(): Create_sequence_statementContext | undefined;
    create_schema_statement(): Create_schema_statementContext | undefined;
    create_view_statement(): Create_view_statementContext | undefined;
    create_language_statement(): Create_language_statementContext | undefined;
    create_event_trigger(): Create_event_triggerContext | undefined;
    create_type_statement(): Create_type_statementContext | undefined;
    create_domain_statement(): Create_domain_statementContext | undefined;
    create_server_statement(): Create_server_statementContext | undefined;
    create_fts_configuration(): Create_fts_configurationContext | undefined;
    create_fts_template(): Create_fts_templateContext | undefined;
    create_fts_parser(): Create_fts_parserContext | undefined;
    create_fts_dictionary(): Create_fts_dictionaryContext | undefined;
    create_collation(): Create_collationContext | undefined;
    create_user_mapping(): Create_user_mappingContext | undefined;
    create_transform_statement(): Create_transform_statementContext | undefined;
    create_access_method(): Create_access_methodContext | undefined;
    create_user_or_role(): Create_user_or_roleContext | undefined;
    create_group(): Create_groupContext | undefined;
    create_tablespace(): Create_tablespaceContext | undefined;
    create_statistics(): Create_statisticsContext | undefined;
    create_foreign_data_wrapper(): Create_foreign_data_wrapperContext | undefined;
    create_operator_statement(): Create_operator_statementContext | undefined;
    create_aggregate_statement(): Create_aggregate_statementContext | undefined;
    create_table_as_statement(): Create_table_as_statementContext | undefined;
    create_policy_statement(): Create_policy_statementContext | undefined;
    create_subscription_statement(): Create_subscription_statementContext | undefined;
    create_cast_statement(): Create_cast_statementContext | undefined;
    create_operator_family_statement(): Create_operator_family_statementContext | undefined;
    create_operator_class_statement(): Create_operator_class_statementContext | undefined;
    create_conversion_statement(): Create_conversion_statementContext | undefined;
    create_publication_statement(): Create_publication_statementContext | undefined;
    comment_on_statement(): Comment_on_statementContext | undefined;
    rule_common(): Rule_commonContext | undefined;
    set_statement(): Set_statementContext | undefined;
    schema_import(): Schema_importContext | undefined;
    security_label(): Security_labelContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Schema_alterContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    alter_function_statement(): Alter_function_statementContext | undefined;
    alter_schema_statement(): Alter_schema_statementContext | undefined;
    alter_language_statement(): Alter_language_statementContext | undefined;
    alter_table_statement(): Alter_table_statementContext | undefined;
    alter_index_statement(): Alter_index_statementContext | undefined;
    alter_default_privileges(): Alter_default_privilegesContext | undefined;
    alter_sequence_statement(): Alter_sequence_statementContext | undefined;
    alter_view_statement(): Alter_view_statementContext | undefined;
    alter_event_trigger(): Alter_event_triggerContext | undefined;
    alter_type_statement(): Alter_type_statementContext | undefined;
    alter_domain_statement(): Alter_domain_statementContext | undefined;
    alter_server_statement(): Alter_server_statementContext | undefined;
    alter_fts_statement(): Alter_fts_statementContext | undefined;
    alter_collation(): Alter_collationContext | undefined;
    alter_user_mapping(): Alter_user_mappingContext | undefined;
    alter_user_or_role(): Alter_user_or_roleContext | undefined;
    alter_group(): Alter_groupContext | undefined;
    alter_tablespace(): Alter_tablespaceContext | undefined;
    alter_statistics(): Alter_statisticsContext | undefined;
    alter_foreign_data_wrapper(): Alter_foreign_data_wrapperContext | undefined;
    alter_operator_statement(): Alter_operator_statementContext | undefined;
    alter_aggregate_statement(): Alter_aggregate_statementContext | undefined;
    alter_extension_statement(): Alter_extension_statementContext | undefined;
    alter_policy_statement(): Alter_policy_statementContext | undefined;
    alter_subscription_statement(): Alter_subscription_statementContext | undefined;
    alter_trigger_statement(): Alter_trigger_statementContext | undefined;
    alter_rule_statement(): Alter_rule_statementContext | undefined;
    alter_operator_family_statement(): Alter_operator_family_statementContext | undefined;
    alter_operator_class_statement(): Alter_operator_class_statementContext | undefined;
    alter_conversion_statement(): Alter_conversion_statementContext | undefined;
    alter_publication_statement(): Alter_publication_statementContext | undefined;
    alter_owner(): Alter_ownerContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Schema_dropContext extends ParserRuleContext {
    DROP(): TerminalNode;
    drop_function_statement(): Drop_function_statementContext | undefined;
    drop_trigger_statement(): Drop_trigger_statementContext | undefined;
    drop_rule_statement(): Drop_rule_statementContext | undefined;
    drop_policy_statement(): Drop_policy_statementContext | undefined;
    drop_cast_statement(): Drop_cast_statementContext | undefined;
    drop_operator_family_statement(): Drop_operator_family_statementContext | undefined;
    drop_operator_class_statement(): Drop_operator_class_statementContext | undefined;
    drop_statements(): Drop_statementsContext | undefined;
    drop_user_mapping(): Drop_user_mappingContext | undefined;
    drop_owned(): Drop_ownedContext | undefined;
    drop_operator_statement(): Drop_operator_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Schema_importContext extends ParserRuleContext {
    _name: IdentifierContext;
    IMPORT(): TerminalNode;
    FOREIGN(): TerminalNode;
    SCHEMA(): TerminalNode;
    FROM(): TerminalNode;
    SERVER(): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    INTO(): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    identifier_list(): Identifier_listContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    define_foreign_options(): Define_foreign_optionsContext | undefined;
    LIMIT(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    EXCEPT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_function_statementContext extends ParserRuleContext {
    FUNCTION(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    rename_to(): Rename_toContext | undefined;
    set_schema(): Set_schemaContext | undefined;
    DEPENDS(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    EXTENSION(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    function_parameters(): Function_parametersContext | undefined;
    function_actions_common(): Function_actions_commonContext[];
    function_actions_common(i: number): Function_actions_commonContext;
    RESET(): TerminalNode[];
    RESET(i: number): TerminalNode;
    RESTRICT(): TerminalNode | undefined;
    ALL(): TerminalNode[];
    ALL(i: number): TerminalNode;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_aggregate_statementContext extends ParserRuleContext {
    AGGREGATE(): TerminalNode;
    function_parameters(): Function_parametersContext;
    rename_to(): Rename_toContext | undefined;
    set_schema(): Set_schemaContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_extension_statementContext extends ParserRuleContext {
    EXTENSION(): TerminalNode;
    identifier(): IdentifierContext;
    alter_extension_action(): Alter_extension_actionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_extension_actionContext extends ParserRuleContext {
    set_schema(): Set_schemaContext | undefined;
    UPDATE(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    character_string(): Character_stringContext | undefined;
    extension_member_object(): Extension_member_objectContext | undefined;
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Extension_member_objectContext extends ParserRuleContext {
    ACCESS(): TerminalNode | undefined;
    METHOD(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    AGGREGATE(): TerminalNode | undefined;
    function_parameters(): Function_parametersContext | undefined;
    CAST(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    COLLATION(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    CONVERSION(): TerminalNode | undefined;
    DOMAIN(): TerminalNode | undefined;
    EVENT(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    WRAPPER(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    OPERATOR(): TerminalNode | undefined;
    operator_name(): Operator_nameContext | undefined;
    CLASS(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    FAMILY(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    PROCEDURAL(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    TEXT(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    PARSER(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    TRANSFORM(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_schema_statementContext extends ParserRuleContext {
    SCHEMA(): TerminalNode;
    identifier(): IdentifierContext;
    rename_to(): Rename_toContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_language_statementContext extends ParserRuleContext {
    _name: IdentifierContext;
    LANGUAGE(): TerminalNode;
    identifier(): IdentifierContext;
    rename_to(): Rename_toContext | undefined;
    owner_to(): Owner_toContext | undefined;
    PROCEDURAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_table_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _child: Schema_qualified_nameContext;
    TABLE(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    table_action(): Table_actionContext[];
    table_action(i: number): Table_actionContext;
    RENAME(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    TO(): TerminalNode | undefined;
    set_schema(): Set_schemaContext | undefined;
    rename_to(): Rename_toContext | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    ATTACH(): TerminalNode | undefined;
    PARTITION(): TerminalNode | undefined;
    for_values_bound(): For_values_boundContext | undefined;
    DETACH(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    if_exists(): If_existsContext | undefined;
    ONLY(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    COLUMN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Table_actionContext extends ParserRuleContext {
    _column: IdentifierContext;
    _tabl_constraint: Constraint_commonContext;
    _not_valid: Token;
    _trigger_name: Schema_qualified_nameContext;
    _rewrite_rule_name: Schema_qualified_nameContext;
    _index_name: Schema_qualified_nameContext;
    _parent_table: Schema_qualified_nameContext;
    _type_name: Schema_qualified_nameContext;
    ADD(): TerminalNode | undefined;
    table_column_definition(): Table_column_definitionContext | undefined;
    COLUMN(): TerminalNode | undefined;
    if_not_exists(): If_not_existsContext | undefined;
    DROP(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    if_exists(): If_existsContext | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    ALTER(): TerminalNode | undefined;
    column_action(): Column_actionContext | undefined;
    constraint_common(): Constraint_commonContext | undefined;
    NOT(): TerminalNode | undefined;
    VALID(): TerminalNode | undefined;
    validate_constraint(): Validate_constraintContext | undefined;
    drop_constraint(): Drop_constraintContext | undefined;
    TRIGGER(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    ENABLE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    REPLICA(): TerminalNode | undefined;
    ALWAYS(): TerminalNode | undefined;
    RULE(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    SECURITY(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    CLUSTER(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    OIDS(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    LOGGED(): TerminalNode | undefined;
    UNLOGGED(): TerminalNode | undefined;
    storage_parameter(): Storage_parameterContext | undefined;
    RESET(): TerminalNode | undefined;
    names_in_parens(): Names_in_parensContext | undefined;
    define_foreign_options(): Define_foreign_optionsContext | undefined;
    INHERIT(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    owner_to(): Owner_toContext | undefined;
    table_space(): Table_spaceContext | undefined;
    IDENTITY(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    FULL(): TerminalNode | undefined;
    NOTHING(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    table_deferrable(): Table_deferrableContext | undefined;
    table_initialy_immed(): Table_initialy_immedContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Column_actionContext extends ParserRuleContext {
    _set: Token;
    TYPE(): TerminalNode | undefined;
    data_type(): Data_typeContext | undefined;
    SET(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    collate_identifier(): Collate_identifierContext | undefined;
    USING(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    ADD(): TerminalNode | undefined;
    identity_body(): Identity_bodyContext | undefined;
    set_def_column(): Set_def_columnContext | undefined;
    drop_def(): Drop_defContext | undefined;
    NOT(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    IDENTITY(): TerminalNode | undefined;
    if_exists(): If_existsContext | undefined;
    storage_parameter(): Storage_parameterContext | undefined;
    STATISTICS(): TerminalNode | undefined;
    signed_number_literal(): Signed_number_literalContext | undefined;
    STORAGE(): TerminalNode | undefined;
    storage_option(): Storage_optionContext | undefined;
    RESET(): TerminalNode | undefined;
    names_in_parens(): Names_in_parensContext | undefined;
    define_foreign_options(): Define_foreign_optionsContext | undefined;
    alter_identity(): Alter_identityContext[];
    alter_identity(i: number): Alter_identityContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Identity_bodyContext extends ParserRuleContext {
    GENERATED(): TerminalNode;
    AS(): TerminalNode;
    IDENTITY(): TerminalNode;
    ALWAYS(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    sequence_body(): Sequence_bodyContext[];
    sequence_body(i: number): Sequence_bodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_identityContext extends ParserRuleContext {
    SET(): TerminalNode | undefined;
    GENERATED(): TerminalNode | undefined;
    ALWAYS(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    sequence_body(): Sequence_bodyContext | undefined;
    RESTART(): TerminalNode | undefined;
    NUMBER_LITERAL(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Storage_optionContext extends ParserRuleContext {
    PLAIN(): TerminalNode | undefined;
    EXTERNAL(): TerminalNode | undefined;
    EXTENDED(): TerminalNode | undefined;
    MAIN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Validate_constraintContext extends ParserRuleContext {
    _constraint_name: Schema_qualified_nameContext;
    VALIDATE(): TerminalNode;
    CONSTRAINT(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_constraintContext extends ParserRuleContext {
    _constraint_name: IdentifierContext;
    DROP(): TerminalNode;
    CONSTRAINT(): TerminalNode;
    identifier(): IdentifierContext;
    if_exists(): If_existsContext | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Table_deferrableContext extends ParserRuleContext {
    DEFERRABLE(): TerminalNode;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Table_initialy_immedContext extends ParserRuleContext {
    INITIALLY(): TerminalNode;
    DEFERRED(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_actions_commonContext extends ParserRuleContext {
    _execution_cost: Unsigned_numeric_literalContext;
    _result_rows: Unsigned_numeric_literalContext;
    _config_scope: IdentifierContext;
    _config_param: IdentifierContext;
    _lang_name: IdentifierContext;
    ON(): TerminalNode | undefined;
    NULL(): TerminalNode[];
    NULL(i: number): TerminalNode;
    INPUT(): TerminalNode | undefined;
    CALLED(): TerminalNode | undefined;
    RETURNS(): TerminalNode | undefined;
    TRANSFORM(): TerminalNode | undefined;
    transform_for_type(): Transform_for_typeContext[];
    transform_for_type(i: number): Transform_for_typeContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    STRICT(): TerminalNode | undefined;
    IMMUTABLE(): TerminalNode | undefined;
    VOLATILE(): TerminalNode | undefined;
    STABLE(): TerminalNode | undefined;
    LEAKPROOF(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    SECURITY(): TerminalNode | undefined;
    INVOKER(): TerminalNode | undefined;
    DEFINER(): TerminalNode | undefined;
    EXTERNAL(): TerminalNode | undefined;
    PARALLEL(): TerminalNode | undefined;
    SAFE(): TerminalNode | undefined;
    UNSAFE(): TerminalNode | undefined;
    RESTRICTED(): TerminalNode | undefined;
    COST(): TerminalNode | undefined;
    unsigned_numeric_literal(): Unsigned_numeric_literalContext | undefined;
    ROWS(): TerminalNode | undefined;
    SUPPORT(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    SET(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    set_statement_value(): Set_statement_valueContext | undefined;
    FROM(): TerminalNode | undefined;
    CURRENT(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    WINDOW(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    function_def(): Function_defContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_defContext extends ParserRuleContext {
    _definition: Character_stringContext;
    _symbol: Character_stringContext;
    character_string(): Character_stringContext[];
    character_string(i: number): Character_stringContext;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_index_statementContext extends ParserRuleContext {
    INDEX(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    index_def_action(): Index_def_actionContext | undefined;
    if_exists(): If_existsContext | undefined;
    ALL(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode[];
    TABLESPACE(i: number): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    SET(): TerminalNode | undefined;
    OWNED(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    identifier_list(): Identifier_listContext | undefined;
    NOWAIT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Index_def_actionContext extends ParserRuleContext {
    _index: Schema_qualified_nameContext;
    rename_to(): Rename_toContext | undefined;
    ATTACH(): TerminalNode | undefined;
    PARTITION(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    DEPENDS(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    EXTENSION(): TerminalNode | undefined;
    ALTER(): TerminalNode | undefined;
    NUMBER_LITERAL(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    signed_number_literal(): Signed_number_literalContext | undefined;
    COLUMN(): TerminalNode | undefined;
    sign(): SignContext | undefined;
    RESET(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    identifier_list(): Identifier_listContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    option_with_value(): Option_with_valueContext[];
    option_with_value(i: number): Option_with_valueContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_default_privilegesContext extends ParserRuleContext {
    DEFAULT(): TerminalNode;
    PRIVILEGES(): TerminalNode;
    abbreviated_grant_or_revoke(): Abbreviated_grant_or_revokeContext;
    FOR(): TerminalNode | undefined;
    identifier_list(): Identifier_listContext[];
    identifier_list(i: number): Identifier_listContext;
    IN(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Abbreviated_grant_or_revokeContext extends ParserRuleContext {
    GRANT(): TerminalNode | undefined;
    REVOKE(): TerminalNode | undefined;
    table_column_privilege(): Table_column_privilegeContext[];
    table_column_privilege(i: number): Table_column_privilegeContext;
    ON(): TerminalNode | undefined;
    TABLES(): TerminalNode | undefined;
    SEQUENCES(): TerminalNode | undefined;
    FUNCTIONS(): TerminalNode | undefined;
    SCHEMAS(): TerminalNode | undefined;
    TYPES(): TerminalNode | undefined;
    grant_to_rule(): Grant_to_ruleContext | undefined;
    revoke_from_cascade_restrict(): Revoke_from_cascade_restrictContext | undefined;
    usage_select_update(): Usage_select_updateContext[];
    usage_select_update(i: number): Usage_select_updateContext;
    ALL(): TerminalNode | undefined;
    EXECUTE(): TerminalNode | undefined;
    USAGE(): TerminalNode | undefined;
    CREATE(): TerminalNode | undefined;
    grant_option_for(): Grant_option_forContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    PRIVILEGES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Grant_option_forContext extends ParserRuleContext {
    GRANT(): TerminalNode;
    OPTION(): TerminalNode;
    FOR(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_sequence_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    SEQUENCE(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    set_schema(): Set_schemaContext | undefined;
    rename_to(): Rename_toContext | undefined;
    if_exists(): If_existsContext | undefined;
    sequence_body(): Sequence_bodyContext[];
    sequence_body(i: number): Sequence_bodyContext;
    RESTART(): TerminalNode[];
    RESTART(i: number): TerminalNode;
    signed_number_literal(): Signed_number_literalContext[];
    signed_number_literal(i: number): Signed_number_literalContext;
    WITH(): TerminalNode[];
    WITH(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_view_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _column_name: Schema_qualified_nameContext;
    VIEW(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    ALTER(): TerminalNode | undefined;
    set_schema(): Set_schemaContext | undefined;
    rename_to(): Rename_toContext | undefined;
    SET(): TerminalNode | undefined;
    storage_parameter(): Storage_parameterContext | undefined;
    RESET(): TerminalNode | undefined;
    names_in_parens(): Names_in_parensContext | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    if_exists(): If_existsContext | undefined;
    set_def_column(): Set_def_columnContext | undefined;
    drop_def(): Drop_defContext | undefined;
    COLUMN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_event_triggerContext extends ParserRuleContext {
    _name: IdentifierContext;
    EVENT(): TerminalNode;
    TRIGGER(): TerminalNode;
    alter_event_trigger_action(): Alter_event_trigger_actionContext;
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_event_trigger_actionContext extends ParserRuleContext {
    DISABLE(): TerminalNode | undefined;
    ENABLE(): TerminalNode | undefined;
    REPLICA(): TerminalNode | undefined;
    ALWAYS(): TerminalNode | undefined;
    owner_to(): Owner_toContext | undefined;
    rename_to(): Rename_toContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_type_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _new_enum_value: Character_stringContext;
    _existing_enum_value: Character_stringContext;
    _attribute_name: IdentifierContext;
    _new_attribute_name: IdentifierContext;
    _existing_enum_name: Character_stringContext;
    _new_enum_name: Character_stringContext;
    TYPE(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    set_schema(): Set_schemaContext | undefined;
    rename_to(): Rename_toContext | undefined;
    ADD(): TerminalNode | undefined;
    VALUE(): TerminalNode | undefined;
    RENAME(): TerminalNode | undefined;
    ATTRIBUTE(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    type_action(): Type_actionContext[];
    type_action(i: number): Type_actionContext;
    character_string(): Character_stringContext[];
    character_string(i: number): Character_stringContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    if_not_exists(): If_not_existsContext | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    BEFORE(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_domain_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _dom_constraint: Domain_constraintContext;
    _not_valid: Token;
    DOMAIN(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    set_def_column(): Set_def_columnContext | undefined;
    drop_def(): Drop_defContext | undefined;
    NOT(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    ADD(): TerminalNode | undefined;
    drop_constraint(): Drop_constraintContext | undefined;
    RENAME(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    validate_constraint(): Validate_constraintContext | undefined;
    rename_to(): Rename_toContext | undefined;
    set_schema(): Set_schemaContext | undefined;
    SET(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    domain_constraint(): Domain_constraintContext | undefined;
    VALID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_server_statementContext extends ParserRuleContext {
    SERVER(): TerminalNode;
    identifier(): IdentifierContext;
    alter_server_action(): Alter_server_actionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_server_actionContext extends ParserRuleContext {
    define_foreign_options(): Define_foreign_optionsContext | undefined;
    VERSION(): TerminalNode | undefined;
    character_string(): Character_stringContext | undefined;
    owner_to(): Owner_toContext | undefined;
    rename_to(): Rename_toContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_fts_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    TEXT(): TerminalNode;
    SEARCH(): TerminalNode;
    DICTIONARY(): TerminalNode | undefined;
    storage_parameter(): Storage_parameterContext | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    alter_fts_configuration(): Alter_fts_configurationContext | undefined;
    TEMPLATE(): TerminalNode | undefined;
    PARSER(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    rename_to(): Rename_toContext | undefined;
    set_schema(): Set_schemaContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_fts_configurationContext extends ParserRuleContext {
    MAPPING(): TerminalNode;
    FOR(): TerminalNode | undefined;
    identifier_list(): Identifier_listContext | undefined;
    WITH(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    ADD(): TerminalNode | undefined;
    ALTER(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    REPLACE(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Type_actionContext extends ParserRuleContext {
    ADD(): TerminalNode | undefined;
    ATTRIBUTE(): TerminalNode;
    identifier(): IdentifierContext;
    data_type(): Data_typeContext | undefined;
    collate_identifier(): Collate_identifierContext | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    DROP(): TerminalNode | undefined;
    if_exists(): If_existsContext | undefined;
    ALTER(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Set_def_columnContext extends ParserRuleContext {
    SET(): TerminalNode;
    DEFAULT(): TerminalNode;
    vex(): VexContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_defContext extends ParserRuleContext {
    DROP(): TerminalNode;
    DEFAULT(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_index_statementContext extends ParserRuleContext {
    _name: IdentifierContext;
    _table_name: Schema_qualified_nameContext;
    INDEX(): TerminalNode;
    ON(): TerminalNode;
    index_rest(): Index_restContext;
    schema_qualified_name(): Schema_qualified_nameContext;
    UNIQUE(): TerminalNode | undefined;
    CONCURRENTLY(): TerminalNode | undefined;
    if_not_exists(): If_not_existsContext | undefined;
    ONLY(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Index_restContext extends ParserRuleContext {
    _method: IdentifierContext;
    index_sort(): Index_sortContext;
    USING(): TerminalNode | undefined;
    including_index(): Including_indexContext | undefined;
    with_storage_parameter(): With_storage_parameterContext | undefined;
    table_space(): Table_spaceContext | undefined;
    index_where(): Index_whereContext | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Index_sortContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    sort_specifier_list(): Sort_specifier_listContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Including_indexContext extends ParserRuleContext {
    INCLUDE(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Index_whereContext extends ParserRuleContext {
    WHERE(): TerminalNode;
    vex(): VexContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_extension_statementContext extends ParserRuleContext {
    _name: IdentifierContext;
    _schema: IdentifierContext;
    EXTENSION(): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    if_not_exists(): If_not_existsContext | undefined;
    WITH(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    VERSION(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    CASCADE(): TerminalNode | undefined;
    character_string(): Character_stringContext[];
    character_string(i: number): Character_stringContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_language_statementContext extends ParserRuleContext {
    _name: IdentifierContext;
    LANGUAGE(): TerminalNode;
    identifier(): IdentifierContext;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    TRUSTED(): TerminalNode | undefined;
    PROCEDURAL(): TerminalNode | undefined;
    HANDLER(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    INLINE(): TerminalNode | undefined;
    VALIDATOR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_event_triggerContext extends ParserRuleContext {
    _name: IdentifierContext;
    EVENT(): TerminalNode;
    TRIGGER(): TerminalNode;
    ON(): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    EXECUTE(): TerminalNode;
    vex(): VexContext;
    PROCEDURE(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    WHEN(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    IN(): TerminalNode[];
    IN(i: number): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    character_string(): Character_stringContext[];
    character_string(i: number): Character_stringContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    AND(): TerminalNode[];
    AND(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_type_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _table_column_definition: Table_column_definitionContext;
    _attrs: Table_column_definitionContext[];
    _character_string: Character_stringContext;
    _enums: Character_stringContext[];
    _subtype_name: Data_typeContext;
    _subtype_operator_class: IdentifierContext;
    _collation: Schema_qualified_nameContext;
    _canonical_function: Schema_qualified_nameContext;
    _subtype_diff_function: Schema_qualified_nameContext;
    _internallength: Signed_numerical_literalContext;
    _input_function: Schema_qualified_nameContext;
    _output_function: Schema_qualified_nameContext;
    _receive_function: Schema_qualified_nameContext;
    _send_function: Schema_qualified_nameContext;
    _type_modifier_input_function: Schema_qualified_nameContext;
    _type_modifier_output_function: Schema_qualified_nameContext;
    _analyze_function: Schema_qualified_nameContext;
    _alignment: Data_typeContext;
    _storage: Token;
    _like_type: Data_typeContext;
    _category: Character_stringContext;
    _preferred: Truth_valueContext;
    _default_value: VexContext;
    _element: Data_typeContext;
    _delimiter: Character_stringContext;
    _collatable: Truth_valueContext;
    TYPE(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    AS(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    INPUT(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    OUTPUT(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    ENUM(): TerminalNode | undefined;
    RANGE(): TerminalNode | undefined;
    INTERNALLENGTH(): TerminalNode[];
    INTERNALLENGTH(i: number): TerminalNode;
    SUBTYPE(): TerminalNode[];
    SUBTYPE(i: number): TerminalNode;
    SUBTYPE_OPCLASS(): TerminalNode[];
    SUBTYPE_OPCLASS(i: number): TerminalNode;
    COLLATION(): TerminalNode[];
    COLLATION(i: number): TerminalNode;
    CANONICAL(): TerminalNode[];
    CANONICAL(i: number): TerminalNode;
    SUBTYPE_DIFF(): TerminalNode[];
    SUBTYPE_DIFF(i: number): TerminalNode;
    VARIABLE(): TerminalNode[];
    VARIABLE(i: number): TerminalNode;
    RECEIVE(): TerminalNode[];
    RECEIVE(i: number): TerminalNode;
    SEND(): TerminalNode[];
    SEND(i: number): TerminalNode;
    TYPMOD_IN(): TerminalNode[];
    TYPMOD_IN(i: number): TerminalNode;
    TYPMOD_OUT(): TerminalNode[];
    TYPMOD_OUT(i: number): TerminalNode;
    ANALYZE(): TerminalNode[];
    ANALYZE(i: number): TerminalNode;
    PASSEDBYVALUE(): TerminalNode[];
    PASSEDBYVALUE(i: number): TerminalNode;
    ALIGNMENT(): TerminalNode[];
    ALIGNMENT(i: number): TerminalNode;
    STORAGE(): TerminalNode[];
    STORAGE(i: number): TerminalNode;
    LIKE(): TerminalNode[];
    LIKE(i: number): TerminalNode;
    CATEGORY(): TerminalNode[];
    CATEGORY(i: number): TerminalNode;
    PREFERRED(): TerminalNode[];
    PREFERRED(i: number): TerminalNode;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    ELEMENT(): TerminalNode[];
    ELEMENT(i: number): TerminalNode;
    DELIMITER(): TerminalNode[];
    DELIMITER(i: number): TerminalNode;
    COLLATABLE(): TerminalNode[];
    COLLATABLE(i: number): TerminalNode;
    table_column_definition(): Table_column_definitionContext[];
    table_column_definition(i: number): Table_column_definitionContext;
    character_string(): Character_stringContext[];
    character_string(i: number): Character_stringContext;
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    signed_numerical_literal(): Signed_numerical_literalContext[];
    signed_numerical_literal(i: number): Signed_numerical_literalContext;
    truth_value(): Truth_valueContext[];
    truth_value(i: number): Truth_valueContext;
    vex(): VexContext[];
    vex(i: number): VexContext;
    PLAIN(): TerminalNode[];
    PLAIN(i: number): TerminalNode;
    EXTERNAL(): TerminalNode[];
    EXTERNAL(i: number): TerminalNode;
    EXTENDED(): TerminalNode[];
    EXTENDED(i: number): TerminalNode;
    MAIN(): TerminalNode[];
    MAIN(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_domain_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _dat_type: Data_typeContext;
    _def_value: VexContext;
    _domain_constraint: Domain_constraintContext;
    _dom_constraint: Domain_constraintContext[];
    DOMAIN(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    data_type(): Data_typeContext;
    AS(): TerminalNode | undefined;
    collate_identifier(): Collate_identifierContext[];
    collate_identifier(i: number): Collate_identifierContext;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    domain_constraint(): Domain_constraintContext[];
    domain_constraint(i: number): Domain_constraintContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_server_statementContext extends ParserRuleContext {
    SERVER(): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    FOREIGN(): TerminalNode;
    DATA(): TerminalNode;
    WRAPPER(): TerminalNode;
    if_not_exists(): If_not_existsContext | undefined;
    TYPE(): TerminalNode | undefined;
    character_string(): Character_stringContext[];
    character_string(i: number): Character_stringContext;
    VERSION(): TerminalNode | undefined;
    define_foreign_options(): Define_foreign_optionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_fts_dictionaryContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _template: Schema_qualified_nameContext;
    TEXT(): TerminalNode;
    SEARCH(): TerminalNode;
    DICTIONARY(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    TEMPLATE(): TerminalNode;
    EQUAL(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    option_with_value(): Option_with_valueContext[];
    option_with_value(i: number): Option_with_valueContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Option_with_valueContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    EQUAL(): TerminalNode;
    vex(): VexContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_fts_configurationContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _parser_name: Schema_qualified_nameContext;
    _config_name: Schema_qualified_nameContext;
    TEXT(): TerminalNode;
    SEARCH(): TerminalNode;
    CONFIGURATION(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    PARSER(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    COPY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_fts_templateContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _init_name: Schema_qualified_nameContext;
    _lexize_name: Schema_qualified_nameContext;
    TEXT(): TerminalNode;
    SEARCH(): TerminalNode;
    TEMPLATE(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    LEXIZE(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    INIT(): TerminalNode[];
    INIT(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_fts_parserContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _start_func: Schema_qualified_nameContext;
    _gettoken_func: Schema_qualified_nameContext;
    _end_func: Schema_qualified_nameContext;
    _headline_func: Schema_qualified_nameContext;
    _lextypes_func: Schema_qualified_nameContext;
    TEXT(): TerminalNode;
    SEARCH(): TerminalNode;
    PARSER(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    START(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    GETTOKEN(): TerminalNode;
    END(): TerminalNode;
    LEXTYPES(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    HEADLINE(): TerminalNode[];
    HEADLINE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_collationContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    COLLATION(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    FROM(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    if_not_exists(): If_not_existsContext | undefined;
    collation_option(): Collation_optionContext[];
    collation_option(i: number): Collation_optionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_collationContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    COLLATION(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    REFRESH(): TerminalNode | undefined;
    VERSION(): TerminalNode | undefined;
    rename_to(): Rename_toContext | undefined;
    owner_to(): Owner_toContext | undefined;
    set_schema(): Set_schemaContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Collation_optionContext extends ParserRuleContext {
    EQUAL(): TerminalNode;
    LOCALE(): TerminalNode | undefined;
    LC_COLLATE(): TerminalNode | undefined;
    LC_CTYPE(): TerminalNode | undefined;
    PROVIDER(): TerminalNode | undefined;
    VERSION(): TerminalNode | undefined;
    character_string(): Character_stringContext | undefined;
    identifier(): IdentifierContext | undefined;
    DETERMINISTIC(): TerminalNode | undefined;
    boolean_value(): Boolean_valueContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_user_mappingContext extends ParserRuleContext {
    USER(): TerminalNode[];
    USER(i: number): TerminalNode;
    MAPPING(): TerminalNode;
    FOR(): TerminalNode;
    SERVER(): TerminalNode;
    identifier(): IdentifierContext;
    user_name(): User_nameContext | undefined;
    if_not_exists(): If_not_existsContext | undefined;
    define_foreign_options(): Define_foreign_optionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_user_mappingContext extends ParserRuleContext {
    USER(): TerminalNode[];
    USER(i: number): TerminalNode;
    MAPPING(): TerminalNode;
    FOR(): TerminalNode;
    SERVER(): TerminalNode;
    identifier(): IdentifierContext;
    user_name(): User_nameContext | undefined;
    define_foreign_options(): Define_foreign_optionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_user_or_roleContext extends ParserRuleContext {
    USER(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    alter_user_or_role_set_reset(): Alter_user_or_role_set_resetContext | undefined;
    identifier(): IdentifierContext | undefined;
    rename_to(): Rename_toContext | undefined;
    user_name(): User_nameContext | undefined;
    WITH(): TerminalNode | undefined;
    user_or_role_option_for_alter(): User_or_role_option_for_alterContext[];
    user_or_role_option_for_alter(i: number): User_or_role_option_for_alterContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_user_or_role_set_resetContext extends ParserRuleContext {
    user_or_role_set_reset(): User_or_role_set_resetContext;
    user_name(): User_nameContext | undefined;
    ALL(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class User_or_role_set_resetContext extends ParserRuleContext {
    SET(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    set_statement_value(): Set_statement_valueContext | undefined;
    TO(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    CURRENT(): TerminalNode | undefined;
    RESET(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_groupContext extends ParserRuleContext {
    GROUP(): TerminalNode;
    alter_group_action(): Alter_group_actionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_group_actionContext extends ParserRuleContext {
    _name: IdentifierContext;
    rename_to(): Rename_toContext | undefined;
    identifier(): IdentifierContext | undefined;
    user_name(): User_nameContext | undefined;
    USER(): TerminalNode | undefined;
    identifier_list(): Identifier_listContext | undefined;
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_tablespaceContext extends ParserRuleContext {
    _name: IdentifierContext;
    TABLESPACE(): TerminalNode;
    alter_tablespace_action(): Alter_tablespace_actionContext;
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_ownerContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    owner_to(): Owner_toContext;
    OPERATOR(): TerminalNode | undefined;
    target_operator(): Target_operatorContext | undefined;
    LARGE(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    NUMBER_LITERAL(): TerminalNode | undefined;
    function_args(): Function_argsContext | undefined;
    FUNCTION(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    AGGREGATE(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    TEXT(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    DOMAIN(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    if_exists(): If_existsContext | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_tablespace_actionContext extends ParserRuleContext {
    rename_to(): Rename_toContext | undefined;
    owner_to(): Owner_toContext | undefined;
    SET(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    option_with_value(): Option_with_valueContext[];
    option_with_value(i: number): Option_with_valueContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RESET(): TerminalNode | undefined;
    identifier_list(): Identifier_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_statisticsContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    STATISTICS(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    rename_to(): Rename_toContext | undefined;
    set_schema(): Set_schemaContext | undefined;
    owner_to(): Owner_toContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_foreign_data_wrapperContext extends ParserRuleContext {
    _name: IdentifierContext;
    FOREIGN(): TerminalNode;
    DATA(): TerminalNode;
    WRAPPER(): TerminalNode;
    alter_foreign_data_wrapper_action(): Alter_foreign_data_wrapper_actionContext;
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_foreign_data_wrapper_actionContext extends ParserRuleContext {
    HANDLER(): TerminalNode | undefined;
    schema_qualified_name_nontype(): Schema_qualified_name_nontypeContext[];
    schema_qualified_name_nontype(i: number): Schema_qualified_name_nontypeContext;
    NO(): TerminalNode[];
    NO(i: number): TerminalNode;
    VALIDATOR(): TerminalNode | undefined;
    define_foreign_options(): Define_foreign_optionsContext | undefined;
    owner_to(): Owner_toContext | undefined;
    rename_to(): Rename_toContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_operator_statementContext extends ParserRuleContext {
    OPERATOR(): TerminalNode;
    target_operator(): Target_operatorContext;
    alter_operator_action(): Alter_operator_actionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_operator_actionContext extends ParserRuleContext {
    set_schema(): Set_schemaContext | undefined;
    SET(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    operator_set_restrict_join(): Operator_set_restrict_joinContext[];
    operator_set_restrict_join(i: number): Operator_set_restrict_joinContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Operator_set_restrict_joinContext extends ParserRuleContext {
    EQUAL(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    RESTRICT(): TerminalNode | undefined;
    JOIN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_user_mappingContext extends ParserRuleContext {
    USER(): TerminalNode[];
    USER(i: number): TerminalNode;
    MAPPING(): TerminalNode;
    FOR(): TerminalNode;
    SERVER(): TerminalNode;
    identifier(): IdentifierContext;
    user_name(): User_nameContext | undefined;
    if_exists(): If_existsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_ownedContext extends ParserRuleContext {
    OWNED(): TerminalNode;
    BY(): TerminalNode;
    user_name(): User_nameContext[];
    user_name(i: number): User_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_operator_statementContext extends ParserRuleContext {
    OPERATOR(): TerminalNode;
    target_operator(): Target_operatorContext[];
    target_operator(i: number): Target_operatorContext;
    if_exists(): If_existsContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Target_operatorContext extends ParserRuleContext {
    _name: Operator_nameContext;
    _left_type: Data_typeContext;
    _right_type: Data_typeContext;
    LEFT_PAREN(): TerminalNode;
    COMMA(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    operator_name(): Operator_nameContext;
    NONE(): TerminalNode[];
    NONE(i: number): TerminalNode;
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Domain_constraintContext extends ParserRuleContext {
    _name: IdentifierContext;
    CHECK(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_transform_statementContext extends ParserRuleContext {
    TRANSFORM(): TerminalNode;
    FOR(): TerminalNode;
    data_type(): Data_typeContext;
    LANGUAGE(): TerminalNode;
    identifier(): IdentifierContext;
    LEFT_PAREN(): TerminalNode;
    FROM(): TerminalNode;
    SQL(): TerminalNode[];
    SQL(i: number): TerminalNode;
    WITH(): TerminalNode[];
    WITH(i: number): TerminalNode;
    FUNCTION(): TerminalNode[];
    FUNCTION(i: number): TerminalNode;
    function_parameters(): Function_parametersContext[];
    function_parameters(i: number): Function_parametersContext;
    COMMA(): TerminalNode;
    TO(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_access_methodContext extends ParserRuleContext {
    ACCESS(): TerminalNode;
    METHOD(): TerminalNode;
    identifier(): IdentifierContext;
    TYPE(): TerminalNode;
    HANDLER(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    TABLE(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_user_or_roleContext extends ParserRuleContext {
    _name: IdentifierContext;
    USER(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    identifier(): IdentifierContext;
    user_or_role_option(): User_or_role_optionContext[];
    user_or_role_option(i: number): User_or_role_optionContext;
    WITH(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class User_or_role_optionContext extends ParserRuleContext {
    user_or_role_or_group_common_option(): User_or_role_or_group_common_optionContext | undefined;
    user_or_role_common_option(): User_or_role_common_optionContext | undefined;
    user_or_role_or_group_option_for_create(): User_or_role_or_group_option_for_createContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class User_or_role_option_for_alterContext extends ParserRuleContext {
    user_or_role_or_group_common_option(): User_or_role_or_group_common_optionContext | undefined;
    user_or_role_common_option(): User_or_role_common_optionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class User_or_role_or_group_common_optionContext extends ParserRuleContext {
    _password: Token;
    _date_time: Token;
    SUPERUSER(): TerminalNode | undefined;
    NOSUPERUSER(): TerminalNode | undefined;
    CREATEDB(): TerminalNode | undefined;
    NOCREATEDB(): TerminalNode | undefined;
    CREATEROLE(): TerminalNode | undefined;
    NOCREATEROLE(): TerminalNode | undefined;
    INHERIT(): TerminalNode | undefined;
    NOINHERIT(): TerminalNode | undefined;
    LOGIN(): TerminalNode | undefined;
    NOLOGIN(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    ENCRYPTED(): TerminalNode | undefined;
    Character_String_Literal(): TerminalNode | undefined;
    VALID(): TerminalNode | undefined;
    UNTIL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class User_or_role_common_optionContext extends ParserRuleContext {
    REPLICATION(): TerminalNode | undefined;
    NOREPLICATION(): TerminalNode | undefined;
    BYPASSRLS(): TerminalNode | undefined;
    NOBYPASSRLS(): TerminalNode | undefined;
    CONNECTION(): TerminalNode | undefined;
    LIMIT(): TerminalNode | undefined;
    signed_number_literal(): Signed_number_literalContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class User_or_role_or_group_option_for_createContext extends ParserRuleContext {
    SYSID(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    identifier_list(): Identifier_listContext | undefined;
    IN(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    ADMIN(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_groupContext extends ParserRuleContext {
    _name: IdentifierContext;
    GROUP(): TerminalNode;
    identifier(): IdentifierContext;
    WITH(): TerminalNode | undefined;
    group_option(): Group_optionContext[];
    group_option(i: number): Group_optionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Group_optionContext extends ParserRuleContext {
    user_or_role_or_group_common_option(): User_or_role_or_group_common_optionContext | undefined;
    user_or_role_or_group_option_for_create(): User_or_role_or_group_option_for_createContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_tablespaceContext extends ParserRuleContext {
    _name: IdentifierContext;
    _directory: Token;
    TABLESPACE(): TerminalNode;
    LOCATION(): TerminalNode;
    identifier(): IdentifierContext;
    Character_String_Literal(): TerminalNode;
    OWNER(): TerminalNode | undefined;
    user_name(): User_nameContext | undefined;
    WITH(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    option_with_value(): Option_with_valueContext[];
    option_with_value(i: number): Option_with_valueContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_statisticsContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    STATISTICS(): TerminalNode;
    ON(): TerminalNode;
    identifier(): IdentifierContext;
    COMMA(): TerminalNode;
    identifier_list(): Identifier_listContext[];
    identifier_list(i: number): Identifier_listContext;
    FROM(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    if_not_exists(): If_not_existsContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_foreign_data_wrapperContext extends ParserRuleContext {
    _name: IdentifierContext;
    FOREIGN(): TerminalNode;
    DATA(): TerminalNode;
    WRAPPER(): TerminalNode;
    identifier(): IdentifierContext;
    HANDLER(): TerminalNode | undefined;
    schema_qualified_name_nontype(): Schema_qualified_name_nontypeContext[];
    schema_qualified_name_nontype(i: number): Schema_qualified_name_nontypeContext;
    NO(): TerminalNode[];
    NO(i: number): TerminalNode;
    VALIDATOR(): TerminalNode | undefined;
    OPTIONS(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    option_without_equal(): Option_without_equalContext[];
    option_without_equal(i: number): Option_without_equalContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Option_without_equalContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    Character_String_Literal(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_operator_statementContext extends ParserRuleContext {
    _name: Operator_nameContext;
    OPERATOR(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    operator_option(): Operator_optionContext[];
    operator_option(i: number): Operator_optionContext;
    RIGHT_PAREN(): TerminalNode;
    operator_name(): Operator_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Operator_nameContext extends ParserRuleContext {
    _schema_name: IdentifierContext;
    _operator: All_simple_opContext;
    all_simple_op(): All_simple_opContext;
    DOT(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Operator_optionContext extends ParserRuleContext {
    _func_name: Schema_qualified_nameContext;
    _restr_name: Schema_qualified_nameContext;
    _join_name: Schema_qualified_nameContext;
    _type: Data_typeContext;
    _addition_oper_name: All_op_refContext;
    EQUAL(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    RESTRICT(): TerminalNode | undefined;
    JOIN(): TerminalNode | undefined;
    LEFTARG(): TerminalNode | undefined;
    RIGHTARG(): TerminalNode | undefined;
    data_type(): Data_typeContext | undefined;
    COMMUTATOR(): TerminalNode | undefined;
    NEGATOR(): TerminalNode | undefined;
    all_op_ref(): All_op_refContext | undefined;
    HASHES(): TerminalNode | undefined;
    MERGES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_aggregate_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _base_type: Data_typeContext;
    _sfunc_name: Schema_qualified_nameContext;
    _type: Data_typeContext;
    AGGREGATE(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    SFUNC(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    STYPE(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    function_args(): Function_argsContext | undefined;
    BASETYPE(): TerminalNode | undefined;
    aggregate_param(): Aggregate_paramContext[];
    aggregate_param(i: number): Aggregate_paramContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Aggregate_paramContext extends ParserRuleContext {
    _s_space: Token;
    _final_func: Schema_qualified_nameContext;
    _combine_func: Schema_qualified_nameContext;
    _serial_func: Schema_qualified_nameContext;
    _deserial_func: Schema_qualified_nameContext;
    _init_cond: VexContext;
    _ms_func: Schema_qualified_nameContext;
    _minv_func: Schema_qualified_nameContext;
    _ms_type: Data_typeContext;
    _ms_space: Token;
    _mfinal_func: Schema_qualified_nameContext;
    _minit_cond: VexContext;
    SSPACE(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    NUMBER_LITERAL(): TerminalNode | undefined;
    FINALFUNC(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    FINALFUNC_EXTRA(): TerminalNode | undefined;
    FINALFUNC_MODIFY(): TerminalNode | undefined;
    READ_ONLY(): TerminalNode | undefined;
    SHAREABLE(): TerminalNode | undefined;
    READ_WRITE(): TerminalNode | undefined;
    COMBINEFUNC(): TerminalNode | undefined;
    SERIALFUNC(): TerminalNode | undefined;
    DESERIALFUNC(): TerminalNode | undefined;
    INITCOND(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    MSFUNC(): TerminalNode | undefined;
    MINVFUNC(): TerminalNode | undefined;
    MSTYPE(): TerminalNode | undefined;
    data_type(): Data_typeContext | undefined;
    MSSPACE(): TerminalNode | undefined;
    MFINALFUNC(): TerminalNode | undefined;
    MFINALFUNC_EXTRA(): TerminalNode | undefined;
    MFINALFUNC_MODIFY(): TerminalNode | undefined;
    MINITCOND(): TerminalNode | undefined;
    SORTOP(): TerminalNode | undefined;
    all_op_ref(): All_op_refContext | undefined;
    PARALLEL(): TerminalNode | undefined;
    SAFE(): TerminalNode | undefined;
    RESTRICTED(): TerminalNode | undefined;
    UNSAFE(): TerminalNode | undefined;
    HYPOTHETICAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Set_statementContext extends ParserRuleContext {
    SET(): TerminalNode;
    set_action(): Set_actionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Set_actionContext extends ParserRuleContext {
    CONSTRAINTS(): TerminalNode | undefined;
    DEFERRED(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    names_references(): Names_referencesContext | undefined;
    TRANSACTION(): TerminalNode | undefined;
    transaction_mode(): Transaction_modeContext[];
    transaction_mode(i: number): Transaction_modeContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SNAPSHOT(): TerminalNode | undefined;
    Character_String_Literal(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    CHARACTERISTICS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    session_local_option(): Session_local_optionContext | undefined;
    LOCAL(): TerminalNode | undefined;
    XML(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    DOCUMENT(): TerminalNode | undefined;
    CONTENT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Session_local_optionContext extends ParserRuleContext {
    _config_param: IdentifierContext;
    SESSION(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    Character_String_Literal(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    DEFAULT(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    signed_numerical_literal(): Signed_numerical_literalContext | undefined;
    LOCAL(): TerminalNode | undefined;
    set_statement_value(): Set_statement_valueContext | undefined;
    TO(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Set_statement_valueContext extends ParserRuleContext {
    vex(): VexContext[];
    vex(i: number): VexContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_rewrite_statementContext extends ParserRuleContext {
    _name: IdentifierContext;
    _event: Token;
    _table_name: Schema_qualified_nameContext;
    RULE(): TerminalNode;
    AS(): TerminalNode;
    ON(): TerminalNode;
    TO(): TerminalNode;
    DO(): TerminalNode;
    identifier(): IdentifierContext;
    schema_qualified_name(): Schema_qualified_nameContext;
    SELECT(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    NOTHING(): TerminalNode | undefined;
    rewrite_command(): Rewrite_commandContext[];
    rewrite_command(i: number): Rewrite_commandContext;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    WHERE(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    ALSO(): TerminalNode | undefined;
    INSTEAD(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    SEMI_COLON(): TerminalNode[];
    SEMI_COLON(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Rewrite_commandContext extends ParserRuleContext {
    select_stmt(): Select_stmtContext | undefined;
    insert_stmt_for_psql(): Insert_stmt_for_psqlContext | undefined;
    update_stmt_for_psql(): Update_stmt_for_psqlContext | undefined;
    delete_stmt_for_psql(): Delete_stmt_for_psqlContext | undefined;
    notify_stmt(): Notify_stmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_trigger_statementContext extends ParserRuleContext {
    _name: IdentifierContext;
    _before_true: Token;
    _insert_true: Token;
    _delete_true: Token;
    _truncate_true: Token;
    _update_true: Token;
    _table_name: Schema_qualified_nameContext;
    _referenced_table_name: Schema_qualified_nameContext;
    _for_each_true: Token;
    _func_name: Function_callContext;
    TRIGGER(): TerminalNode;
    ON(): TerminalNode;
    EXECUTE(): TerminalNode;
    identifier(): IdentifierContext;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    FUNCTION(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    function_call(): Function_callContext;
    AFTER(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    BEFORE(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    table_deferrable(): Table_deferrableContext | undefined;
    table_initialy_immed(): Table_initialy_immedContext | undefined;
    REFERENCING(): TerminalNode | undefined;
    trigger_referencing(): Trigger_referencingContext[];
    trigger_referencing(i: number): Trigger_referencingContext;
    when_trigger(): When_triggerContext | undefined;
    INSTEAD(): TerminalNode | undefined;
    OF(): TerminalNode[];
    OF(i: number): TerminalNode;
    FOR(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    STATEMENT(): TerminalNode | undefined;
    UPDATE(): TerminalNode[];
    UPDATE(i: number): TerminalNode;
    OR(): TerminalNode[];
    OR(i: number): TerminalNode;
    EACH(): TerminalNode | undefined;
    INSERT(): TerminalNode[];
    INSERT(i: number): TerminalNode;
    DELETE(): TerminalNode[];
    DELETE(i: number): TerminalNode;
    TRUNCATE(): TerminalNode[];
    TRUNCATE(i: number): TerminalNode;
    identifier_list(): Identifier_listContext[];
    identifier_list(i: number): Identifier_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Trigger_referencingContext extends ParserRuleContext {
    TABLE(): TerminalNode;
    identifier(): IdentifierContext;
    OLD(): TerminalNode | undefined;
    NEW(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class When_triggerContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    vex(): VexContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Rule_commonContext extends ParserRuleContext {
    ON(): TerminalNode | undefined;
    rule_member_object(): Rule_member_objectContext | undefined;
    roles_names(): Roles_namesContext | undefined;
    TO(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    GRANT(): TerminalNode[];
    GRANT(i: number): TerminalNode;
    REVOKE(): TerminalNode | undefined;
    permissions(): PermissionsContext | undefined;
    columns_permissions(): Columns_permissionsContext | undefined;
    WITH(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    grant_option_for(): Grant_option_forContext | undefined;
    other_rules(): Other_rulesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Rule_member_objectContext extends ParserRuleContext {
    _table_names: Names_referencesContext;
    _function_parameters: Function_parametersContext;
    _func_name: Function_parametersContext[];
    _schema_names: Names_referencesContext;
    names_references(): Names_referencesContext | undefined;
    TABLE(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    DOMAIN(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    WRAPPER(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    function_parameters(): Function_parametersContext[];
    function_parameters(i: number): Function_parametersContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    LARGE(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    NUMBER_LITERAL(): TerminalNode[];
    NUMBER_LITERAL(i: number): TerminalNode;
    LANGUAGE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    TABLES(): TerminalNode | undefined;
    SEQUENCES(): TerminalNode | undefined;
    FUNCTIONS(): TerminalNode | undefined;
    PROCEDURES(): TerminalNode | undefined;
    ROUTINES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Columns_permissionsContext extends ParserRuleContext {
    table_column_privileges(): Table_column_privilegesContext[];
    table_column_privileges(i: number): Table_column_privilegesContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Table_column_privilegesContext extends ParserRuleContext {
    table_column_privilege(): Table_column_privilegeContext;
    LEFT_PAREN(): TerminalNode;
    identifier_list(): Identifier_listContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class PermissionsContext extends ParserRuleContext {
    permission(): PermissionContext[];
    permission(i: number): PermissionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class PermissionContext extends ParserRuleContext {
    ALL(): TerminalNode | undefined;
    PRIVILEGES(): TerminalNode | undefined;
    CONNECT(): TerminalNode | undefined;
    CREATE(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    EXECUTE(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    TEMP(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    TRUNCATE(): TerminalNode | undefined;
    USAGE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Other_rulesContext extends ParserRuleContext {
    GRANT(): TerminalNode | undefined;
    names_references(): Names_referencesContext[];
    names_references(i: number): Names_referencesContext;
    TO(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    ADMIN(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    REVOKE(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Grant_to_ruleContext extends ParserRuleContext {
    TO(): TerminalNode;
    roles_names(): Roles_namesContext;
    WITH(): TerminalNode | undefined;
    GRANT(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Revoke_from_cascade_restrictContext extends ParserRuleContext {
    FROM(): TerminalNode;
    roles_names(): Roles_namesContext;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Roles_namesContext extends ParserRuleContext {
    role_name_with_group(): Role_name_with_groupContext[];
    role_name_with_group(i: number): Role_name_with_groupContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Role_name_with_groupContext extends ParserRuleContext {
    user_name(): User_nameContext;
    GROUP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Comment_on_statementContext extends ParserRuleContext {
    COMMENT(): TerminalNode;
    ON(): TerminalNode;
    comment_member_object(): Comment_member_objectContext;
    IS(): TerminalNode;
    character_string(): Character_stringContext | undefined;
    NULL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Security_labelContext extends ParserRuleContext {
    SECURITY(): TerminalNode;
    LABEL(): TerminalNode;
    ON(): TerminalNode;
    label_member_object(): Label_member_objectContext;
    IS(): TerminalNode;
    character_string(): Character_stringContext[];
    character_string(i: number): Character_stringContext;
    NULL(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Comment_member_objectContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _source: Data_typeContext;
    _target: Data_typeContext;
    _table_name: Schema_qualified_nameContext;
    _index_method: IdentifierContext;
    ACCESS(): TerminalNode | undefined;
    METHOD(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    function_args(): Function_argsContext | undefined;
    AGGREGATE(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    CAST(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    COLLATION(): TerminalNode | undefined;
    COLUMN(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    DOMAIN(): TerminalNode | undefined;
    CONVERSION(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    EXTENSION(): TerminalNode | undefined;
    EVENT(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    WRAPPER(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    LARGE(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    NUMBER_LITERAL(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    OPERATOR(): TerminalNode | undefined;
    target_operator(): Target_operatorContext | undefined;
    USING(): TerminalNode | undefined;
    FAMILY(): TerminalNode | undefined;
    CLASS(): TerminalNode | undefined;
    POLICY(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    PROCEDURAL(): TerminalNode | undefined;
    PUBLICATION(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    RULE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    SUBSCRIPTION(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    TEXT(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    PARSER(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    TRANSFORM(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Label_member_objectContext extends ParserRuleContext {
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    function_args(): Function_argsContext | undefined;
    AGGREGATE(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    COLUMN(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    DOMAIN(): TerminalNode | undefined;
    EVENT(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    LARGE(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    NUMBER_LITERAL(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    PROCEDURAL(): TerminalNode | undefined;
    PUBLICATION(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    SUBSCRIPTION(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_function_statementContext extends ParserRuleContext {
    _rettype_data: Data_typeContext;
    _ret_table: Function_ret_tableContext;
    function_parameters(): Function_parametersContext;
    create_funct_params(): Create_funct_paramsContext;
    FUNCTION(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    RETURNS(): TerminalNode | undefined;
    data_type(): Data_typeContext | undefined;
    function_ret_table(): Function_ret_tableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_funct_paramsContext extends ParserRuleContext {
    function_actions_common(): Function_actions_commonContext[];
    function_actions_common(i: number): Function_actions_commonContext;
    with_storage_parameter(): With_storage_parameterContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Transform_for_typeContext extends ParserRuleContext {
    FOR(): TerminalNode;
    TYPE(): TerminalNode;
    data_type(): Data_typeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_ret_tableContext extends ParserRuleContext {
    TABLE(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    function_column_name_type(): Function_column_name_typeContext[];
    function_column_name_type(i: number): Function_column_name_typeContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_column_name_typeContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    data_type(): Data_typeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_parametersContext extends ParserRuleContext {
    schema_qualified_name(): Schema_qualified_nameContext;
    function_args(): Function_argsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_argsContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    MULTIPLY(): TerminalNode | undefined;
    function_arguments(): Function_argumentsContext[];
    function_arguments(i: number): Function_argumentsContext;
    agg_order(): Agg_orderContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Agg_orderContext extends ParserRuleContext {
    ORDER(): TerminalNode;
    BY(): TerminalNode;
    function_arguments(): Function_argumentsContext[];
    function_arguments(i: number): Function_argumentsContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Character_stringContext extends ParserRuleContext {
    BeginDollarStringConstant(): TerminalNode | undefined;
    EndDollarStringConstant(): TerminalNode | undefined;
    Text_between_Dollar(): TerminalNode[];
    Text_between_Dollar(i: number): TerminalNode;
    Character_String_Literal(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_argumentsContext extends ParserRuleContext {
    data_type(): Data_typeContext;
    argmode(): ArgmodeContext | undefined;
    identifier_nontype(): Identifier_nontypeContext | undefined;
    vex(): VexContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class ArgmodeContext extends ParserRuleContext {
    IN(): TerminalNode | undefined;
    OUT(): TerminalNode | undefined;
    INOUT(): TerminalNode | undefined;
    VARIADIC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_sequence_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    SEQUENCE(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    if_not_exists(): If_not_existsContext | undefined;
    sequence_body(): Sequence_bodyContext[];
    sequence_body(i: number): Sequence_bodyContext;
    TEMPORARY(): TerminalNode | undefined;
    TEMP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Sequence_bodyContext extends ParserRuleContext {
    _type: Token;
    _name: Schema_qualified_nameContext;
    _incr: Signed_numerical_literalContext;
    _minval: Signed_numerical_literalContext;
    _maxval: Signed_numerical_literalContext;
    _start_val: Signed_numerical_literalContext;
    _cache_val: Signed_numerical_literalContext;
    _cycle_true: Token;
    _cycle_val: Token;
    _col_name: Schema_qualified_nameContext;
    AS(): TerminalNode | undefined;
    SMALLINT(): TerminalNode | undefined;
    INTEGER(): TerminalNode | undefined;
    BIGINT(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    INCREMENT(): TerminalNode | undefined;
    signed_numerical_literal(): Signed_numerical_literalContext | undefined;
    BY(): TerminalNode | undefined;
    MINVALUE(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    MAXVALUE(): TerminalNode | undefined;
    START(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    CYCLE(): TerminalNode | undefined;
    OWNED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Signed_number_literalContext extends ParserRuleContext {
    NUMBER_LITERAL(): TerminalNode;
    sign(): SignContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Signed_numerical_literalContext extends ParserRuleContext {
    unsigned_numeric_literal(): Unsigned_numeric_literalContext;
    sign(): SignContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class SignContext extends ParserRuleContext {
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_schema_statementContext extends ParserRuleContext {
    _name: IdentifierContext;
    SCHEMA(): TerminalNode;
    if_not_exists(): If_not_existsContext | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    user_name(): User_nameContext | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_policy_statementContext extends ParserRuleContext {
    _event: Token;
    _using: VexContext;
    _check: VexContext;
    POLICY(): TerminalNode;
    identifier(): IdentifierContext;
    ON(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    AS(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    user_name(): User_nameContext[];
    user_name(i: number): User_nameContext;
    USING(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    CHECK(): TerminalNode | undefined;
    PERMISSIVE(): TerminalNode | undefined;
    RESTRICTIVE(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    ALL(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_policy_statementContext extends ParserRuleContext {
    POLICY(): TerminalNode;
    identifier(): IdentifierContext;
    ON(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    rename_to(): Rename_toContext | undefined;
    TO(): TerminalNode | undefined;
    user_name(): User_nameContext[];
    user_name(i: number): User_nameContext;
    USING(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    WITH(): TerminalNode | undefined;
    CHECK(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_policy_statementContext extends ParserRuleContext {
    POLICY(): TerminalNode;
    identifier(): IdentifierContext;
    ON(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    if_exists(): If_existsContext | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_subscription_statementContext extends ParserRuleContext {
    SUBSCRIPTION(): TerminalNode;
    identifier(): IdentifierContext;
    CONNECTION(): TerminalNode;
    Character_String_Literal(): TerminalNode;
    PUBLICATION(): TerminalNode;
    identifier_list(): Identifier_listContext;
    with_storage_parameter(): With_storage_parameterContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_subscription_statementContext extends ParserRuleContext {
    SUBSCRIPTION(): TerminalNode;
    identifier(): IdentifierContext;
    alter_subscription_action(): Alter_subscription_actionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_subscription_actionContext extends ParserRuleContext {
    CONNECTION(): TerminalNode | undefined;
    character_string(): Character_stringContext | undefined;
    SET(): TerminalNode | undefined;
    PUBLICATION(): TerminalNode | undefined;
    identifier_list(): Identifier_listContext | undefined;
    with_storage_parameter(): With_storage_parameterContext | undefined;
    REFRESH(): TerminalNode | undefined;
    ENABLE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    storage_parameter(): Storage_parameterContext | undefined;
    owner_to(): Owner_toContext | undefined;
    rename_to(): Rename_toContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_cast_statementContext extends ParserRuleContext {
    _source: Data_typeContext;
    _target: Data_typeContext;
    _func_name: Schema_qualified_nameContext;
    CAST(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    AS(): TerminalNode[];
    AS(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    WITH(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    function_args(): Function_argsContext | undefined;
    WITHOUT(): TerminalNode | undefined;
    INOUT(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    ASSIGNMENT(): TerminalNode | undefined;
    IMPLICIT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_cast_statementContext extends ParserRuleContext {
    _source: Data_typeContext;
    _target: Data_typeContext;
    CAST(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    AS(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    if_exists(): If_existsContext | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_operator_family_statementContext extends ParserRuleContext {
    OPERATOR(): TerminalNode;
    FAMILY(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    USING(): TerminalNode;
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_operator_family_statementContext extends ParserRuleContext {
    OPERATOR(): TerminalNode;
    FAMILY(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    USING(): TerminalNode;
    identifier(): IdentifierContext;
    operator_family_action(): Operator_family_actionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Operator_family_actionContext extends ParserRuleContext {
    rename_to(): Rename_toContext | undefined;
    owner_to(): Owner_toContext | undefined;
    set_schema(): Set_schemaContext | undefined;
    ADD(): TerminalNode | undefined;
    add_operator_to_family(): Add_operator_to_familyContext[];
    add_operator_to_family(i: number): Add_operator_to_familyContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    DROP(): TerminalNode | undefined;
    drop_operator_from_family(): Drop_operator_from_familyContext[];
    drop_operator_from_family(i: number): Drop_operator_from_familyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Add_operator_to_familyContext extends ParserRuleContext {
    OPERATOR(): TerminalNode | undefined;
    unsigned_numeric_literal(): Unsigned_numeric_literalContext;
    target_operator(): Target_operatorContext | undefined;
    FOR(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    FUNCTION(): TerminalNode | undefined;
    function_call(): Function_callContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    NONE(): TerminalNode[];
    NONE(i: number): TerminalNode;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_operator_from_familyContext extends ParserRuleContext {
    unsigned_numeric_literal(): Unsigned_numeric_literalContext;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    OPERATOR(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    NONE(): TerminalNode[];
    NONE(i: number): TerminalNode;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_operator_family_statementContext extends ParserRuleContext {
    OPERATOR(): TerminalNode;
    FAMILY(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    USING(): TerminalNode;
    identifier(): IdentifierContext;
    if_exists(): If_existsContext | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_operator_class_statementContext extends ParserRuleContext {
    OPERATOR(): TerminalNode;
    CLASS(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    FOR(): TerminalNode;
    TYPE(): TerminalNode;
    data_type(): Data_typeContext;
    USING(): TerminalNode;
    identifier(): IdentifierContext;
    AS(): TerminalNode;
    create_operator_class_option(): Create_operator_class_optionContext[];
    create_operator_class_option(i: number): Create_operator_class_optionContext;
    DEFAULT(): TerminalNode | undefined;
    FAMILY(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_operator_class_optionContext extends ParserRuleContext {
    _name: Operator_nameContext;
    OPERATOR(): TerminalNode | undefined;
    unsigned_numeric_literal(): Unsigned_numeric_literalContext | undefined;
    operator_name(): Operator_nameContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    NONE(): TerminalNode[];
    NONE(i: number): TerminalNode;
    FUNCTION(): TerminalNode | undefined;
    function_call(): Function_callContext | undefined;
    STORAGE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_operator_class_statementContext extends ParserRuleContext {
    OPERATOR(): TerminalNode;
    CLASS(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    USING(): TerminalNode;
    identifier(): IdentifierContext;
    rename_to(): Rename_toContext | undefined;
    owner_to(): Owner_toContext | undefined;
    set_schema(): Set_schemaContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_operator_class_statementContext extends ParserRuleContext {
    OPERATOR(): TerminalNode;
    CLASS(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    USING(): TerminalNode;
    identifier(): IdentifierContext;
    if_exists(): If_existsContext | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_conversion_statementContext extends ParserRuleContext {
    CONVERSION(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    FOR(): TerminalNode;
    Character_String_Literal(): TerminalNode[];
    Character_String_Literal(i: number): TerminalNode;
    TO(): TerminalNode;
    FROM(): TerminalNode;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_conversion_statementContext extends ParserRuleContext {
    CONVERSION(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    rename_to(): Rename_toContext | undefined;
    owner_to(): Owner_toContext | undefined;
    set_schema(): Set_schemaContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_publication_statementContext extends ParserRuleContext {
    PUBLICATION(): TerminalNode;
    identifier(): IdentifierContext;
    FOR(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    only_table_multiply(): Only_table_multiplyContext[];
    only_table_multiply(i: number): Only_table_multiplyContext;
    ALL(): TerminalNode | undefined;
    TABLES(): TerminalNode | undefined;
    with_storage_parameter(): With_storage_parameterContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_publication_statementContext extends ParserRuleContext {
    PUBLICATION(): TerminalNode;
    identifier(): IdentifierContext;
    alter_publication_action(): Alter_publication_actionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_publication_actionContext extends ParserRuleContext {
    rename_to(): Rename_toContext | undefined;
    owner_to(): Owner_toContext | undefined;
    SET(): TerminalNode | undefined;
    storage_parameter(): Storage_parameterContext | undefined;
    TABLE(): TerminalNode | undefined;
    only_table_multiply(): Only_table_multiplyContext[];
    only_table_multiply(i: number): Only_table_multiplyContext;
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Only_table_multiplyContext extends ParserRuleContext {
    schema_qualified_name(): Schema_qualified_nameContext;
    ONLY(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_trigger_statementContext extends ParserRuleContext {
    TRIGGER(): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    rename_to(): Rename_toContext | undefined;
    DEPENDS(): TerminalNode | undefined;
    EXTENSION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alter_rule_statementContext extends ParserRuleContext {
    RULE(): TerminalNode;
    identifier(): IdentifierContext;
    ON(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    rename_to(): Rename_toContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Copy_statementContext extends ParserRuleContext {
    copy_to_statement(): Copy_to_statementContext | undefined;
    copy_from_statement(): Copy_from_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Copy_from_statementContext extends ParserRuleContext {
    COPY(): TerminalNode;
    table_cols(): Table_colsContext;
    FROM(): TerminalNode;
    Character_String_Literal(): TerminalNode | undefined;
    STDIN(): TerminalNode | undefined;
    WHERE(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    PROGRAM(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    copy_option_list(): Copy_option_listContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Copy_to_statementContext extends ParserRuleContext {
    COPY(): TerminalNode;
    TO(): TerminalNode;
    table_cols(): Table_colsContext | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    data_statement(): Data_statementContext | undefined;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    Character_String_Literal(): TerminalNode | undefined;
    STDOUT(): TerminalNode | undefined;
    PROGRAM(): TerminalNode | undefined;
    copy_option_list(): Copy_option_listContext | undefined;
    WITH(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Copy_option_listContext extends ParserRuleContext {
    copy_option(): Copy_optionContext[];
    copy_option(i: number): Copy_optionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Copy_optionContext extends ParserRuleContext {
    TEXT(): TerminalNode | undefined;
    CSV(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    FORMAT(): TerminalNode | undefined;
    OIDS(): TerminalNode | undefined;
    truth_value(): Truth_valueContext | undefined;
    FREEZE(): TerminalNode | undefined;
    DELIMITER(): TerminalNode | undefined;
    Character_String_Literal(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    HEADER(): TerminalNode | undefined;
    QUOTE(): TerminalNode | undefined;
    ESCAPE(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    identifier_list(): Identifier_listContext | undefined;
    FORCE_QUOTE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    FORCE_NOT_NULL(): TerminalNode | undefined;
    FORCE_NULL(): TerminalNode | undefined;
    ENCODING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_view_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    _column_names: View_columnsContext;
    _v_query: Select_stmtContext;
    VIEW(): TerminalNode;
    AS(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    select_stmt(): Select_stmtContext;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    RECURSIVE(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    if_not_exists(): If_not_existsContext | undefined;
    USING(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    WITH(): TerminalNode[];
    WITH(i: number): TerminalNode;
    storage_parameter(): Storage_parameterContext | undefined;
    table_space(): Table_spaceContext | undefined;
    with_check_option(): With_check_optionContext | undefined;
    DATA(): TerminalNode | undefined;
    TEMP(): TerminalNode | undefined;
    TEMPORARY(): TerminalNode | undefined;
    view_columns(): View_columnsContext | undefined;
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class If_existsContext extends ParserRuleContext {
    IF(): TerminalNode;
    EXISTS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class If_not_existsContext extends ParserRuleContext {
    IF(): TerminalNode;
    NOT(): TerminalNode;
    EXISTS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class View_columnsContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class With_check_optionContext extends ParserRuleContext {
    WITH(): TerminalNode;
    CHECK(): TerminalNode;
    OPTION(): TerminalNode;
    CASCADED(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_table_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    TABLE(): TerminalNode;
    define_table(): Define_tableContext;
    schema_qualified_name(): Schema_qualified_nameContext;
    UNLOGGED(): TerminalNode | undefined;
    if_not_exists(): If_not_existsContext | undefined;
    partition_by(): Partition_byContext | undefined;
    USING(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    storage_parameter_oid(): Storage_parameter_oidContext | undefined;
    on_commit(): On_commitContext | undefined;
    table_space(): Table_spaceContext | undefined;
    TEMPORARY(): TerminalNode | undefined;
    TEMP(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_table_as_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    TABLE(): TerminalNode;
    AS(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    select_stmt(): Select_stmtContext | undefined;
    EXECUTE(): TerminalNode | undefined;
    function_call(): Function_callContext | undefined;
    UNLOGGED(): TerminalNode | undefined;
    if_not_exists(): If_not_existsContext | undefined;
    names_in_parens(): Names_in_parensContext | undefined;
    USING(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    storage_parameter_oid(): Storage_parameter_oidContext | undefined;
    on_commit(): On_commitContext | undefined;
    table_space(): Table_spaceContext | undefined;
    WITH(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    TEMPORARY(): TerminalNode | undefined;
    TEMP(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Create_foreign_table_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    FOREIGN(): TerminalNode;
    TABLE(): TerminalNode;
    define_server(): Define_serverContext;
    schema_qualified_name(): Schema_qualified_nameContext;
    define_columns(): Define_columnsContext | undefined;
    define_partition(): Define_partitionContext | undefined;
    if_not_exists(): If_not_existsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Define_tableContext extends ParserRuleContext {
    define_columns(): Define_columnsContext | undefined;
    define_type(): Define_typeContext | undefined;
    define_partition(): Define_partitionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Define_partitionContext extends ParserRuleContext {
    _parent_table: Schema_qualified_nameContext;
    PARTITION(): TerminalNode;
    OF(): TerminalNode;
    for_values_bound(): For_values_boundContext;
    schema_qualified_name(): Schema_qualified_nameContext;
    list_of_type_column_def(): List_of_type_column_defContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class For_values_boundContext extends ParserRuleContext {
    FOR(): TerminalNode | undefined;
    VALUES(): TerminalNode | undefined;
    partition_bound_spec(): Partition_bound_specContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Partition_bound_specContext extends ParserRuleContext {
    IN(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    FROM(): TerminalNode | undefined;
    partition_bound_part(): Partition_bound_partContext[];
    partition_bound_part(i: number): Partition_bound_partContext;
    TO(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    MODULUS(): TerminalNode | undefined;
    NUMBER_LITERAL(): TerminalNode[];
    NUMBER_LITERAL(i: number): TerminalNode;
    REMAINDER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Partition_bound_partContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Define_columnsContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    table_column_def(): Table_column_defContext[];
    table_column_def(i: number): Table_column_defContext;
    INHERITS(): TerminalNode | undefined;
    names_in_parens(): Names_in_parensContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Define_typeContext extends ParserRuleContext {
    _type_name: Data_typeContext;
    OF(): TerminalNode;
    data_type(): Data_typeContext;
    list_of_type_column_def(): List_of_type_column_defContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Partition_byContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    partition_method(): Partition_methodContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Partition_methodContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    partition_column(): Partition_columnContext[];
    partition_column(i: number): Partition_columnContext;
    RIGHT_PAREN(): TerminalNode;
    RANGE(): TerminalNode | undefined;
    LIST(): TerminalNode | undefined;
    HASH(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Partition_columnContext extends ParserRuleContext {
    vex(): VexContext;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Define_serverContext extends ParserRuleContext {
    SERVER(): TerminalNode;
    identifier(): IdentifierContext;
    define_foreign_options(): Define_foreign_optionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Define_foreign_optionsContext extends ParserRuleContext {
    OPTIONS(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    foreign_option(): Foreign_optionContext[];
    foreign_option(i: number): Foreign_optionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Foreign_optionContext extends ParserRuleContext {
    foreign_option_name(): Foreign_option_nameContext;
    character_string(): Character_stringContext | undefined;
    ADD(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Foreign_option_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    USER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class List_of_type_column_defContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    table_of_type_column_def(): Table_of_type_column_defContext[];
    table_of_type_column_def(i: number): Table_of_type_column_defContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Table_column_defContext extends ParserRuleContext {
    _tabl_constraint: Constraint_commonContext;
    table_column_definition(): Table_column_definitionContext | undefined;
    constraint_common(): Constraint_commonContext | undefined;
    LIKE(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    like_option(): Like_optionContext[];
    like_option(i: number): Like_optionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Table_of_type_column_defContext extends ParserRuleContext {
    _tabl_constraint: Constraint_commonContext;
    identifier(): IdentifierContext | undefined;
    WITH(): TerminalNode | undefined;
    OPTIONS(): TerminalNode | undefined;
    constraint_common(): Constraint_commonContext[];
    constraint_common(i: number): Constraint_commonContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Table_column_definitionContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    data_type(): Data_typeContext;
    define_foreign_options(): Define_foreign_optionsContext | undefined;
    collate_identifier(): Collate_identifierContext | undefined;
    constraint_common(): Constraint_commonContext[];
    constraint_common(i: number): Constraint_commonContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Like_optionContext extends ParserRuleContext {
    INCLUDING(): TerminalNode | undefined;
    EXCLUDING(): TerminalNode | undefined;
    COMMENTS(): TerminalNode | undefined;
    CONSTRAINTS(): TerminalNode | undefined;
    DEFAULTS(): TerminalNode | undefined;
    GENERATED(): TerminalNode | undefined;
    IDENTITY(): TerminalNode | undefined;
    INDEXES(): TerminalNode | undefined;
    STORAGE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Constraint_commonContext extends ParserRuleContext {
    constr_body(): Constr_bodyContext;
    CONSTRAINT(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    table_deferrable(): Table_deferrableContext | undefined;
    table_initialy_immed(): Table_initialy_immedContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Constr_bodyContext extends ParserRuleContext {
    _index_method: IdentifierContext;
    _where: Token;
    _exp: VexContext;
    _ref: Names_in_parensContext;
    _expression: VexContext;
    _col: Names_in_parensContext;
    _default_expr: VexContext;
    EXCLUDE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    sort_specifier(): Sort_specifierContext[];
    sort_specifier(i: number): Sort_specifierContext;
    WITH(): TerminalNode[];
    WITH(i: number): TerminalNode;
    all_op(): All_opContext[];
    all_op(i: number): All_opContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    index_parameters(): Index_parametersContext | undefined;
    USING(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    identifier(): IdentifierContext | undefined;
    WHERE(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    REFERENCES(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    FOREIGN(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    names_in_parens(): Names_in_parensContext[];
    names_in_parens(i: number): Names_in_parensContext;
    MATCH(): TerminalNode[];
    MATCH(i: number): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    action(): ActionContext[];
    action(i: number): ActionContext;
    FULL(): TerminalNode[];
    FULL(i: number): TerminalNode;
    PARTIAL(): TerminalNode[];
    PARTIAL(i: number): TerminalNode;
    SIMPLE(): TerminalNode[];
    SIMPLE(i: number): TerminalNode;
    DELETE(): TerminalNode[];
    DELETE(i: number): TerminalNode;
    UPDATE(): TerminalNode[];
    UPDATE(i: number): TerminalNode;
    CHECK(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    INHERIT(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    identity_body(): Identity_bodyContext | undefined;
    GENERATED(): TerminalNode | undefined;
    ALWAYS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    STORED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class All_opContext extends ParserRuleContext {
    op(): OpContext | undefined;
    EQUAL(): TerminalNode | undefined;
    NOT_EQUAL(): TerminalNode | undefined;
    LTH(): TerminalNode | undefined;
    LEQ(): TerminalNode | undefined;
    GTH(): TerminalNode | undefined;
    GEQ(): TerminalNode | undefined;
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    DIVIDE(): TerminalNode | undefined;
    MODULAR(): TerminalNode | undefined;
    EXP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class All_simple_opContext extends ParserRuleContext {
    op_chars(): Op_charsContext | undefined;
    EQUAL(): TerminalNode | undefined;
    NOT_EQUAL(): TerminalNode | undefined;
    LTH(): TerminalNode | undefined;
    LEQ(): TerminalNode | undefined;
    GTH(): TerminalNode | undefined;
    GEQ(): TerminalNode | undefined;
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    DIVIDE(): TerminalNode | undefined;
    MODULAR(): TerminalNode | undefined;
    EXP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Op_charsContext extends ParserRuleContext {
    OP_CHARS(): TerminalNode | undefined;
    LESS_LESS(): TerminalNode | undefined;
    GREATER_GREATER(): TerminalNode | undefined;
    HASH_SIGN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Index_parametersContext extends ParserRuleContext {
    including_index(): Including_indexContext | undefined;
    with_storage_parameter(): With_storage_parameterContext | undefined;
    USING(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    table_space(): Table_spaceContext | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Names_in_parensContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    names_references(): Names_referencesContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Names_referencesContext extends ParserRuleContext {
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Storage_parameterContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    storage_parameter_option(): Storage_parameter_optionContext[];
    storage_parameter_option(i: number): Storage_parameter_optionContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Storage_parameter_optionContext extends ParserRuleContext {
    storage_parameter_name(): Storage_parameter_nameContext;
    EQUAL(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Storage_parameter_nameContext extends ParserRuleContext {
    col_label(): Col_labelContext[];
    col_label(i: number): Col_labelContext;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class With_storage_parameterContext extends ParserRuleContext {
    WITH(): TerminalNode;
    storage_parameter(): Storage_parameterContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Storage_parameter_oidContext extends ParserRuleContext {
    with_storage_parameter(): With_storage_parameterContext | undefined;
    WITH(): TerminalNode | undefined;
    OIDS(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class On_commitContext extends ParserRuleContext {
    ON(): TerminalNode;
    COMMIT(): TerminalNode;
    PRESERVE(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Table_spaceContext extends ParserRuleContext {
    TABLESPACE(): TerminalNode;
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class ActionContext extends ParserRuleContext {
    cascade_restrict(): Cascade_restrictContext | undefined;
    SET(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    ACTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Owner_toContext extends ParserRuleContext {
    _name: IdentifierContext;
    OWNER(): TerminalNode;
    TO(): TerminalNode;
    CURRENT_USER(): TerminalNode | undefined;
    SESSION_USER(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Rename_toContext extends ParserRuleContext {
    _name: IdentifierContext;
    RENAME(): TerminalNode;
    TO(): TerminalNode;
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Set_schemaContext extends ParserRuleContext {
    SET(): TerminalNode;
    SCHEMA(): TerminalNode;
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Table_column_privilegeContext extends ParserRuleContext {
    SELECT(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    TRUNCATE(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    PRIVILEGES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Usage_select_updateContext extends ParserRuleContext {
    USAGE(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Partition_by_columnsContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Cascade_restrictContext extends ParserRuleContext {
    CASCADE(): TerminalNode | undefined;
    RESTRICT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Collate_identifierContext extends ParserRuleContext {
    _collation: Schema_qualified_nameContext;
    COLLATE(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Indirection_varContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    dollar_number(): Dollar_numberContext | undefined;
    indirection_list(): Indirection_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Dollar_numberContext extends ParserRuleContext {
    DOLLAR_NUMBER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Indirection_listContext extends ParserRuleContext {
    indirection(): IndirectionContext[];
    indirection(i: number): IndirectionContext;
    DOT(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class IndirectionContext extends ParserRuleContext {
    DOT(): TerminalNode | undefined;
    col_label(): Col_labelContext | undefined;
    LEFT_BRACKET(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    RIGHT_BRACKET(): TerminalNode | undefined;
    COLON(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_function_statementContext extends ParserRuleContext {
    _name: Schema_qualified_nameContext;
    FUNCTION(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    AGGREGATE(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext;
    if_exists(): If_existsContext | undefined;
    function_args(): Function_argsContext | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_trigger_statementContext extends ParserRuleContext {
    _name: IdentifierContext;
    _table_name: Schema_qualified_nameContext;
    TRIGGER(): TerminalNode;
    ON(): TerminalNode;
    identifier(): IdentifierContext;
    schema_qualified_name(): Schema_qualified_nameContext;
    if_exists(): If_existsContext | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_rule_statementContext extends ParserRuleContext {
    _name: IdentifierContext;
    RULE(): TerminalNode;
    ON(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    identifier(): IdentifierContext;
    if_exists(): If_existsContext | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Drop_statementsContext extends ParserRuleContext {
    if_exist_names_restrict_cascade(): If_exist_names_restrict_cascadeContext;
    ACCESS(): TerminalNode | undefined;
    METHOD(): TerminalNode | undefined;
    COLLATION(): TerminalNode | undefined;
    CONVERSION(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    DOMAIN(): TerminalNode | undefined;
    EVENT(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    EXTENSION(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    WRAPPER(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    PUBLICATION(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    SUBSCRIPTION(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    TEXT(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    PARSER(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    CONCURRENTLY(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    PROCEDURAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class If_exist_names_restrict_cascadeContext extends ParserRuleContext {
    names_references(): Names_referencesContext;
    if_exists(): If_existsContext | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Id_tokenContext extends ParserRuleContext {
    Identifier(): TerminalNode | undefined;
    QuotedIdentifier(): TerminalNode | undefined;
    tokens_nonkeyword(): Tokens_nonkeywordContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class IdentifierContext extends ParserRuleContext {
    id_token(): Id_tokenContext | undefined;
    tokens_nonreserved(): Tokens_nonreservedContext | undefined;
    tokens_nonreserved_except_function_type(): Tokens_nonreserved_except_function_typeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Identifier_nontypeContext extends ParserRuleContext {
    id_token(): Id_tokenContext | undefined;
    tokens_nonreserved(): Tokens_nonreservedContext | undefined;
    tokens_reserved_except_function_type(): Tokens_reserved_except_function_typeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Col_labelContext extends ParserRuleContext {
    id_token(): Id_tokenContext | undefined;
    tokens_reserved(): Tokens_reservedContext | undefined;
    tokens_nonreserved(): Tokens_nonreservedContext | undefined;
    tokens_reserved_except_function_type(): Tokens_reserved_except_function_typeContext | undefined;
    tokens_nonreserved_except_function_type(): Tokens_nonreserved_except_function_typeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Tokens_nonreservedContext extends ParserRuleContext {
    ABORT(): TerminalNode | undefined;
    ABSOLUTE(): TerminalNode | undefined;
    ACCESS(): TerminalNode | undefined;
    ACTION(): TerminalNode | undefined;
    ADD(): TerminalNode | undefined;
    ADMIN(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    AGGREGATE(): TerminalNode | undefined;
    ALSO(): TerminalNode | undefined;
    ALTER(): TerminalNode | undefined;
    ALWAYS(): TerminalNode | undefined;
    ASSERTION(): TerminalNode | undefined;
    ASSIGNMENT(): TerminalNode | undefined;
    AT(): TerminalNode | undefined;
    ATTACH(): TerminalNode | undefined;
    ATTRIBUTE(): TerminalNode | undefined;
    BACKWARD(): TerminalNode | undefined;
    BEFORE(): TerminalNode | undefined;
    BEGIN(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    CALL(): TerminalNode | undefined;
    CALLED(): TerminalNode | undefined;
    CASCADE(): TerminalNode | undefined;
    CASCADED(): TerminalNode | undefined;
    CATALOG(): TerminalNode | undefined;
    CHAIN(): TerminalNode | undefined;
    CHARACTERISTICS(): TerminalNode | undefined;
    CHECKPOINT(): TerminalNode | undefined;
    CLASS(): TerminalNode | undefined;
    CLOSE(): TerminalNode | undefined;
    CLUSTER(): TerminalNode | undefined;
    COLUMNS(): TerminalNode | undefined;
    COMMENT(): TerminalNode | undefined;
    COMMENTS(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    COMMITTED(): TerminalNode | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    CONFLICT(): TerminalNode | undefined;
    CONNECTION(): TerminalNode | undefined;
    CONSTRAINTS(): TerminalNode | undefined;
    CONTENT(): TerminalNode | undefined;
    CONTINUE(): TerminalNode | undefined;
    CONVERSION(): TerminalNode | undefined;
    COPY(): TerminalNode | undefined;
    COST(): TerminalNode | undefined;
    CSV(): TerminalNode | undefined;
    CUBE(): TerminalNode | undefined;
    CURRENT(): TerminalNode | undefined;
    CURSOR(): TerminalNode | undefined;
    CYCLE(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    DAY(): TerminalNode | undefined;
    DEALLOCATE(): TerminalNode | undefined;
    DECLARE(): TerminalNode | undefined;
    DEFAULTS(): TerminalNode | undefined;
    DEFERRED(): TerminalNode | undefined;
    DEFINER(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    DELIMITER(): TerminalNode | undefined;
    DELIMITERS(): TerminalNode | undefined;
    DEPENDS(): TerminalNode | undefined;
    DETACH(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    DISCARD(): TerminalNode | undefined;
    DOCUMENT(): TerminalNode | undefined;
    DOMAIN(): TerminalNode | undefined;
    DOUBLE(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    EACH(): TerminalNode | undefined;
    ENABLE(): TerminalNode | undefined;
    ENCODING(): TerminalNode | undefined;
    ENCRYPTED(): TerminalNode | undefined;
    ENUM(): TerminalNode | undefined;
    ESCAPE(): TerminalNode | undefined;
    EVENT(): TerminalNode | undefined;
    EXCLUDE(): TerminalNode | undefined;
    EXCLUDING(): TerminalNode | undefined;
    EXCLUSIVE(): TerminalNode | undefined;
    EXECUTE(): TerminalNode | undefined;
    EXPLAIN(): TerminalNode | undefined;
    EXTENSION(): TerminalNode | undefined;
    EXTERNAL(): TerminalNode | undefined;
    FAMILY(): TerminalNode | undefined;
    FILTER(): TerminalNode | undefined;
    FIRST(): TerminalNode | undefined;
    FOLLOWING(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    FORWARD(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    FUNCTIONS(): TerminalNode | undefined;
    GENERATED(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    GRANTED(): TerminalNode | undefined;
    GROUPS(): TerminalNode | undefined;
    HANDLER(): TerminalNode | undefined;
    HEADER(): TerminalNode | undefined;
    HOLD(): TerminalNode | undefined;
    HOUR(): TerminalNode | undefined;
    IDENTITY(): TerminalNode | undefined;
    IF(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    IMMUTABLE(): TerminalNode | undefined;
    IMPLICIT(): TerminalNode | undefined;
    IMPORT(): TerminalNode | undefined;
    INCLUDE(): TerminalNode | undefined;
    INCLUDING(): TerminalNode | undefined;
    INCREMENT(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    INDEXES(): TerminalNode | undefined;
    INHERIT(): TerminalNode | undefined;
    INHERITS(): TerminalNode | undefined;
    INLINE(): TerminalNode | undefined;
    INPUT(): TerminalNode | undefined;
    INSENSITIVE(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    INSTEAD(): TerminalNode | undefined;
    INVOKER(): TerminalNode | undefined;
    ISOLATION(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    LABEL(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    LARGE(): TerminalNode | undefined;
    LAST(): TerminalNode | undefined;
    LEAKPROOF(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    LISTEN(): TerminalNode | undefined;
    LOAD(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    LOCATION(): TerminalNode | undefined;
    LOCK(): TerminalNode | undefined;
    LOCKED(): TerminalNode | undefined;
    LOGGED(): TerminalNode | undefined;
    MAPPING(): TerminalNode | undefined;
    MATCH(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    MAXVALUE(): TerminalNode | undefined;
    METHOD(): TerminalNode | undefined;
    MINUTE(): TerminalNode | undefined;
    MINVALUE(): TerminalNode | undefined;
    MODE(): TerminalNode | undefined;
    MONTH(): TerminalNode | undefined;
    MOVE(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    NAMES(): TerminalNode | undefined;
    NEW(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    NOTHING(): TerminalNode | undefined;
    NOTIFY(): TerminalNode | undefined;
    NOWAIT(): TerminalNode | undefined;
    NULLS(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    OIDS(): TerminalNode | undefined;
    OLD(): TerminalNode | undefined;
    OPERATOR(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    OPTIONS(): TerminalNode | undefined;
    ORDINALITY(): TerminalNode | undefined;
    OTHERS(): TerminalNode | undefined;
    OVER(): TerminalNode | undefined;
    OVERRIDING(): TerminalNode | undefined;
    OWNED(): TerminalNode | undefined;
    OWNER(): TerminalNode | undefined;
    PARALLEL(): TerminalNode | undefined;
    PARSER(): TerminalNode | undefined;
    PARTIAL(): TerminalNode | undefined;
    PARTITION(): TerminalNode | undefined;
    PASSING(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    PLANS(): TerminalNode | undefined;
    POLICY(): TerminalNode | undefined;
    PRECEDING(): TerminalNode | undefined;
    PREPARE(): TerminalNode | undefined;
    PREPARED(): TerminalNode | undefined;
    PRESERVE(): TerminalNode | undefined;
    PRIOR(): TerminalNode | undefined;
    PRIVILEGES(): TerminalNode | undefined;
    PROCEDURAL(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    PROCEDURES(): TerminalNode | undefined;
    PROGRAM(): TerminalNode | undefined;
    PUBLICATION(): TerminalNode | undefined;
    QUOTE(): TerminalNode | undefined;
    RANGE(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    REASSIGN(): TerminalNode | undefined;
    RECHECK(): TerminalNode | undefined;
    RECURSIVE(): TerminalNode | undefined;
    REF(): TerminalNode | undefined;
    REFERENCING(): TerminalNode | undefined;
    REFRESH(): TerminalNode | undefined;
    REINDEX(): TerminalNode | undefined;
    RELATIVE(): TerminalNode | undefined;
    RELEASE(): TerminalNode | undefined;
    RENAME(): TerminalNode | undefined;
    REPEATABLE(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    REPLICA(): TerminalNode | undefined;
    RESET(): TerminalNode | undefined;
    RESTART(): TerminalNode | undefined;
    RESTRICT(): TerminalNode | undefined;
    RETURNS(): TerminalNode | undefined;
    REVOKE(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    ROLLBACK(): TerminalNode | undefined;
    ROLLUP(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    ROUTINES(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    RULE(): TerminalNode | undefined;
    SAVEPOINT(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SCHEMAS(): TerminalNode | undefined;
    SCROLL(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    SECOND(): TerminalNode | undefined;
    SECURITY(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    SEQUENCES(): TerminalNode | undefined;
    SERIALIZABLE(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    SETS(): TerminalNode | undefined;
    SHARE(): TerminalNode | undefined;
    SHOW(): TerminalNode | undefined;
    SIMPLE(): TerminalNode | undefined;
    SKIP_(): TerminalNode | undefined;
    SNAPSHOT(): TerminalNode | undefined;
    SQL(): TerminalNode | undefined;
    STABLE(): TerminalNode | undefined;
    STANDALONE(): TerminalNode | undefined;
    START(): TerminalNode | undefined;
    STATEMENT(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    STDIN(): TerminalNode | undefined;
    STDOUT(): TerminalNode | undefined;
    STORAGE(): TerminalNode | undefined;
    STORED(): TerminalNode | undefined;
    STRICT(): TerminalNode | undefined;
    STRIP(): TerminalNode | undefined;
    SUBSCRIPTION(): TerminalNode | undefined;
    SUPPORT(): TerminalNode | undefined;
    SYSID(): TerminalNode | undefined;
    SYSTEM(): TerminalNode | undefined;
    TABLES(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    TEMP(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    TEMPORARY(): TerminalNode | undefined;
    TEXT(): TerminalNode | undefined;
    TIES(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    TRANSFORM(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    TRUNCATE(): TerminalNode | undefined;
    TRUSTED(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    TYPES(): TerminalNode | undefined;
    UNBOUNDED(): TerminalNode | undefined;
    UNCOMMITTED(): TerminalNode | undefined;
    UNENCRYPTED(): TerminalNode | undefined;
    UNKNOWN(): TerminalNode | undefined;
    UNLISTEN(): TerminalNode | undefined;
    UNLOGGED(): TerminalNode | undefined;
    UNTIL(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    VACUUM(): TerminalNode | undefined;
    VALID(): TerminalNode | undefined;
    VALIDATE(): TerminalNode | undefined;
    VALIDATOR(): TerminalNode | undefined;
    VALUE(): TerminalNode | undefined;
    VARYING(): TerminalNode | undefined;
    VERSION(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    VIEWS(): TerminalNode | undefined;
    VOLATILE(): TerminalNode | undefined;
    WHITESPACE(): TerminalNode | undefined;
    WITHIN(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    WORK(): TerminalNode | undefined;
    WRAPPER(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    XML(): TerminalNode | undefined;
    YEAR(): TerminalNode | undefined;
    YES(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Tokens_nonreserved_except_function_typeContext extends ParserRuleContext {
    BETWEEN(): TerminalNode | undefined;
    BIGINT(): TerminalNode | undefined;
    BIT(): TerminalNode | undefined;
    BOOLEAN(): TerminalNode | undefined;
    CHAR(): TerminalNode | undefined;
    CHARACTER(): TerminalNode | undefined;
    COALESCE(): TerminalNode | undefined;
    DEC(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    EXTRACT(): TerminalNode | undefined;
    FLOAT(): TerminalNode | undefined;
    GREATEST(): TerminalNode | undefined;
    GROUPING(): TerminalNode | undefined;
    INOUT(): TerminalNode | undefined;
    INT(): TerminalNode | undefined;
    INTEGER(): TerminalNode | undefined;
    INTERVAL(): TerminalNode | undefined;
    LEAST(): TerminalNode | undefined;
    NATIONAL(): TerminalNode | undefined;
    NCHAR(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    NULLIF(): TerminalNode | undefined;
    NUMERIC(): TerminalNode | undefined;
    OUT(): TerminalNode | undefined;
    OVERLAY(): TerminalNode | undefined;
    POSITION(): TerminalNode | undefined;
    PRECISION(): TerminalNode | undefined;
    REAL(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    SETOF(): TerminalNode | undefined;
    SMALLINT(): TerminalNode | undefined;
    SUBSTRING(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    TIMESTAMP(): TerminalNode | undefined;
    TREAT(): TerminalNode | undefined;
    TRIM(): TerminalNode | undefined;
    VALUES(): TerminalNode | undefined;
    VARCHAR(): TerminalNode | undefined;
    XMLATTRIBUTES(): TerminalNode | undefined;
    XMLCONCAT(): TerminalNode | undefined;
    XMLELEMENT(): TerminalNode | undefined;
    XMLEXISTS(): TerminalNode | undefined;
    XMLFOREST(): TerminalNode | undefined;
    XMLNAMESPACES(): TerminalNode | undefined;
    XMLPARSE(): TerminalNode | undefined;
    XMLPI(): TerminalNode | undefined;
    XMLROOT(): TerminalNode | undefined;
    XMLSERIALIZE(): TerminalNode | undefined;
    XMLTABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Tokens_reserved_except_function_typeContext extends ParserRuleContext {
    AUTHORIZATION(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    COLLATION(): TerminalNode | undefined;
    CONCURRENTLY(): TerminalNode | undefined;
    CROSS(): TerminalNode | undefined;
    CURRENT_SCHEMA(): TerminalNode | undefined;
    FREEZE(): TerminalNode | undefined;
    FULL(): TerminalNode | undefined;
    ILIKE(): TerminalNode | undefined;
    INNER(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    ISNULL(): TerminalNode | undefined;
    JOIN(): TerminalNode | undefined;
    LEFT(): TerminalNode | undefined;
    LIKE(): TerminalNode | undefined;
    NATURAL(): TerminalNode | undefined;
    NOTNULL(): TerminalNode | undefined;
    OUTER(): TerminalNode | undefined;
    OVERLAPS(): TerminalNode | undefined;
    RIGHT(): TerminalNode | undefined;
    SIMILAR(): TerminalNode | undefined;
    TABLESAMPLE(): TerminalNode | undefined;
    VERBOSE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Tokens_reservedContext extends ParserRuleContext {
    ALL(): TerminalNode | undefined;
    ANALYZE(): TerminalNode | undefined;
    AND(): TerminalNode | undefined;
    ANY(): TerminalNode | undefined;
    ARRAY(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    ASC(): TerminalNode | undefined;
    ASYMMETRIC(): TerminalNode | undefined;
    BOTH(): TerminalNode | undefined;
    CASE(): TerminalNode | undefined;
    CAST(): TerminalNode | undefined;
    CHECK(): TerminalNode | undefined;
    COLLATE(): TerminalNode | undefined;
    COLUMN(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    CREATE(): TerminalNode | undefined;
    CURRENT_CATALOG(): TerminalNode | undefined;
    CURRENT_DATE(): TerminalNode | undefined;
    CURRENT_ROLE(): TerminalNode | undefined;
    CURRENT_TIME(): TerminalNode | undefined;
    CURRENT_TIMESTAMP(): TerminalNode | undefined;
    CURRENT_USER(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    DEFERRABLE(): TerminalNode | undefined;
    DESC(): TerminalNode | undefined;
    DISTINCT(): TerminalNode | undefined;
    DO(): TerminalNode | undefined;
    ELSE(): TerminalNode | undefined;
    END(): TerminalNode | undefined;
    EXCEPT(): TerminalNode | undefined;
    FALSE(): TerminalNode | undefined;
    FETCH(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    GRANT(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    HAVING(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    INITIALLY(): TerminalNode | undefined;
    INTERSECT(): TerminalNode | undefined;
    INTO(): TerminalNode | undefined;
    LATERAL(): TerminalNode | undefined;
    LEADING(): TerminalNode | undefined;
    LIMIT(): TerminalNode | undefined;
    LOCALTIME(): TerminalNode | undefined;
    LOCALTIMESTAMP(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    OFFSET(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    PLACING(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    RETURNING(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    SESSION_USER(): TerminalNode | undefined;
    SOME(): TerminalNode | undefined;
    SYMMETRIC(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    THEN(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    TRAILING(): TerminalNode | undefined;
    TRUE(): TerminalNode | undefined;
    UNION(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    VARIADIC(): TerminalNode | undefined;
    WHEN(): TerminalNode | undefined;
    WHERE(): TerminalNode | undefined;
    WINDOW(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Tokens_nonkeywordContext extends ParserRuleContext {
    ALIGNMENT(): TerminalNode | undefined;
    BASETYPE(): TerminalNode | undefined;
    BUFFERS(): TerminalNode | undefined;
    BYPASSRLS(): TerminalNode | undefined;
    CANONICAL(): TerminalNode | undefined;
    CATEGORY(): TerminalNode | undefined;
    COLLATABLE(): TerminalNode | undefined;
    COMBINEFUNC(): TerminalNode | undefined;
    COMMUTATOR(): TerminalNode | undefined;
    CONNECT(): TerminalNode | undefined;
    COSTS(): TerminalNode | undefined;
    CREATEDB(): TerminalNode | undefined;
    CREATEROLE(): TerminalNode | undefined;
    DESERIALFUNC(): TerminalNode | undefined;
    DETERMINISTIC(): TerminalNode | undefined;
    DISABLE_PAGE_SKIPPING(): TerminalNode | undefined;
    ELEMENT(): TerminalNode | undefined;
    EXTENDED(): TerminalNode | undefined;
    FINALFUNC(): TerminalNode | undefined;
    FINALFUNC_EXTRA(): TerminalNode | undefined;
    FINALFUNC_MODIFY(): TerminalNode | undefined;
    FORCE_NOT_NULL(): TerminalNode | undefined;
    FORCE_NULL(): TerminalNode | undefined;
    FORCE_QUOTE(): TerminalNode | undefined;
    FORMAT(): TerminalNode | undefined;
    GETTOKEN(): TerminalNode | undefined;
    HASH(): TerminalNode | undefined;
    HASHES(): TerminalNode | undefined;
    HEADLINE(): TerminalNode | undefined;
    HYPOTHETICAL(): TerminalNode | undefined;
    INDEX_CLEANUP(): TerminalNode | undefined;
    INIT(): TerminalNode | undefined;
    INITCOND(): TerminalNode | undefined;
    INTERNALLENGTH(): TerminalNode | undefined;
    JSON(): TerminalNode | undefined;
    LC_COLLATE(): TerminalNode | undefined;
    LC_CTYPE(): TerminalNode | undefined;
    LEFTARG(): TerminalNode | undefined;
    LEXIZE(): TerminalNode | undefined;
    LEXTYPES(): TerminalNode | undefined;
    LIST(): TerminalNode | undefined;
    LOCALE(): TerminalNode | undefined;
    LOGIN(): TerminalNode | undefined;
    MAIN(): TerminalNode | undefined;
    MERGES(): TerminalNode | undefined;
    MFINALFUNC(): TerminalNode | undefined;
    MFINALFUNC_EXTRA(): TerminalNode | undefined;
    MFINALFUNC_MODIFY(): TerminalNode | undefined;
    MINITCOND(): TerminalNode | undefined;
    MINVFUNC(): TerminalNode | undefined;
    MODULUS(): TerminalNode | undefined;
    MSFUNC(): TerminalNode | undefined;
    MSSPACE(): TerminalNode | undefined;
    MSTYPE(): TerminalNode | undefined;
    NEGATOR(): TerminalNode | undefined;
    NOBYPASSRLS(): TerminalNode | undefined;
    NOCREATEDB(): TerminalNode | undefined;
    NOCREATEROLE(): TerminalNode | undefined;
    NOINHERIT(): TerminalNode | undefined;
    NOLOGIN(): TerminalNode | undefined;
    NOREPLICATION(): TerminalNode | undefined;
    NOSUPERUSER(): TerminalNode | undefined;
    OUTPUT(): TerminalNode | undefined;
    PASSEDBYVALUE(): TerminalNode | undefined;
    PATH(): TerminalNode | undefined;
    PERMISSIVE(): TerminalNode | undefined;
    PLAIN(): TerminalNode | undefined;
    PREFERRED(): TerminalNode | undefined;
    PROVIDER(): TerminalNode | undefined;
    READ_ONLY(): TerminalNode | undefined;
    READ_WRITE(): TerminalNode | undefined;
    RECEIVE(): TerminalNode | undefined;
    REPLICATION(): TerminalNode | undefined;
    REMAINDER(): TerminalNode | undefined;
    RESTRICTED(): TerminalNode | undefined;
    RESTRICTIVE(): TerminalNode | undefined;
    RIGHTARG(): TerminalNode | undefined;
    SAFE(): TerminalNode | undefined;
    SEND(): TerminalNode | undefined;
    SERIALFUNC(): TerminalNode | undefined;
    SETTINGS(): TerminalNode | undefined;
    SFUNC(): TerminalNode | undefined;
    SHAREABLE(): TerminalNode | undefined;
    SKIP_LOCKED(): TerminalNode | undefined;
    SORTOP(): TerminalNode | undefined;
    SSPACE(): TerminalNode | undefined;
    STYPE(): TerminalNode | undefined;
    SUBTYPE(): TerminalNode | undefined;
    SUBTYPE_DIFF(): TerminalNode | undefined;
    SUBTYPE_OPCLASS(): TerminalNode | undefined;
    SUMMARY(): TerminalNode | undefined;
    SUPERUSER(): TerminalNode | undefined;
    TIMING(): TerminalNode | undefined;
    TYPMOD_IN(): TerminalNode | undefined;
    TYPMOD_OUT(): TerminalNode | undefined;
    UNSAFE(): TerminalNode | undefined;
    USAGE(): TerminalNode | undefined;
    VARIABLE(): TerminalNode | undefined;
    YAML(): TerminalNode | undefined;
    ALIAS(): TerminalNode | undefined;
    ASSERT(): TerminalNode | undefined;
    CONSTANT(): TerminalNode | undefined;
    DATATYPE(): TerminalNode | undefined;
    DEBUG(): TerminalNode | undefined;
    DETAIL(): TerminalNode | undefined;
    DIAGNOSTICS(): TerminalNode | undefined;
    ELSEIF(): TerminalNode | undefined;
    ELSIF(): TerminalNode | undefined;
    ERRCODE(): TerminalNode | undefined;
    EXIT(): TerminalNode | undefined;
    EXCEPTION(): TerminalNode | undefined;
    FOREACH(): TerminalNode | undefined;
    GET(): TerminalNode | undefined;
    HINT(): TerminalNode | undefined;
    INFO(): TerminalNode | undefined;
    LOG(): TerminalNode | undefined;
    LOOP(): TerminalNode | undefined;
    MESSAGE(): TerminalNode | undefined;
    NOTICE(): TerminalNode | undefined;
    OPEN(): TerminalNode | undefined;
    PERFORM(): TerminalNode | undefined;
    QUERY(): TerminalNode | undefined;
    RAISE(): TerminalNode | undefined;
    RECORD(): TerminalNode | undefined;
    RETURN(): TerminalNode | undefined;
    REVERSE(): TerminalNode | undefined;
    ROWTYPE(): TerminalNode | undefined;
    SLICE(): TerminalNode | undefined;
    SQLSTATE(): TerminalNode | undefined;
    STACKED(): TerminalNode | undefined;
    WARNING(): TerminalNode | undefined;
    WHILE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Schema_qualified_name_nontypeContext extends ParserRuleContext {
    _schema: IdentifierContext;
    identifier_nontype(): Identifier_nontypeContext;
    DOT(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Type_listContext extends ParserRuleContext {
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Data_typeContext extends ParserRuleContext {
    predefined_type(): Predefined_typeContext;
    SETOF(): TerminalNode | undefined;
    ARRAY(): TerminalNode | undefined;
    array_type(): Array_typeContext[];
    array_type(i: number): Array_typeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Array_typeContext extends ParserRuleContext {
    LEFT_BRACKET(): TerminalNode;
    RIGHT_BRACKET(): TerminalNode;
    NUMBER_LITERAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Predefined_typeContext extends ParserRuleContext {
    BIGINT(): TerminalNode | undefined;
    BIT(): TerminalNode | undefined;
    VARYING(): TerminalNode | undefined;
    type_length(): Type_lengthContext | undefined;
    BOOLEAN(): TerminalNode | undefined;
    DEC(): TerminalNode | undefined;
    precision_param(): Precision_paramContext | undefined;
    DECIMAL(): TerminalNode | undefined;
    DOUBLE(): TerminalNode | undefined;
    PRECISION(): TerminalNode | undefined;
    FLOAT(): TerminalNode | undefined;
    INT(): TerminalNode | undefined;
    INTEGER(): TerminalNode | undefined;
    INTERVAL(): TerminalNode | undefined;
    interval_field(): Interval_fieldContext | undefined;
    CHARACTER(): TerminalNode | undefined;
    CHAR(): TerminalNode | undefined;
    NATIONAL(): TerminalNode | undefined;
    NCHAR(): TerminalNode | undefined;
    NUMERIC(): TerminalNode | undefined;
    REAL(): TerminalNode | undefined;
    SMALLINT(): TerminalNode | undefined;
    TIME(): TerminalNode[];
    TIME(i: number): TerminalNode;
    ZONE(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    TIMESTAMP(): TerminalNode | undefined;
    VARCHAR(): TerminalNode | undefined;
    schema_qualified_name_nontype(): Schema_qualified_name_nontypeContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Interval_fieldContext extends ParserRuleContext {
    YEAR(): TerminalNode | undefined;
    MONTH(): TerminalNode | undefined;
    DAY(): TerminalNode | undefined;
    HOUR(): TerminalNode | undefined;
    MINUTE(): TerminalNode | undefined;
    SECOND(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Type_lengthContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    NUMBER_LITERAL(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Precision_paramContext extends ParserRuleContext {
    _precision: Token;
    _scale: Token;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    NUMBER_LITERAL(): TerminalNode[];
    NUMBER_LITERAL(i: number): TerminalNode;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class VexContext extends ParserRuleContext {
    vex(): VexContext[];
    vex(i: number): VexContext;
    CAST_EXPRESSION(): TerminalNode | undefined;
    data_type(): Data_typeContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    indirection_list(): Indirection_listContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    collate_identifier(): Collate_identifierContext | undefined;
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    AT(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    EXP(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    DIVIDE(): TerminalNode | undefined;
    MODULAR(): TerminalNode | undefined;
    op(): OpContext | undefined;
    IN(): TerminalNode | undefined;
    select_stmt_no_parens(): Select_stmt_no_parensContext | undefined;
    NOT(): TerminalNode | undefined;
    BETWEEN(): TerminalNode | undefined;
    vex_b(): Vex_bContext | undefined;
    AND(): TerminalNode | undefined;
    ASYMMETRIC(): TerminalNode | undefined;
    SYMMETRIC(): TerminalNode | undefined;
    LIKE(): TerminalNode | undefined;
    ILIKE(): TerminalNode | undefined;
    SIMILAR(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    ESCAPE(): TerminalNode | undefined;
    LTH(): TerminalNode | undefined;
    GTH(): TerminalNode | undefined;
    LEQ(): TerminalNode | undefined;
    GEQ(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    NOT_EQUAL(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    truth_value(): Truth_valueContext | undefined;
    NULL(): TerminalNode | undefined;
    DISTINCT(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    DOCUMENT(): TerminalNode | undefined;
    UNKNOWN(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    type_list(): Type_listContext | undefined;
    ISNULL(): TerminalNode | undefined;
    NOTNULL(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    value_expression_primary(): Value_expression_primaryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Vex_bContext extends ParserRuleContext {
    vex_b(): Vex_bContext[];
    vex_b(i: number): Vex_bContext;
    CAST_EXPRESSION(): TerminalNode | undefined;
    data_type(): Data_typeContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    indirection_list(): Indirection_listContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    EXP(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    DIVIDE(): TerminalNode | undefined;
    MODULAR(): TerminalNode | undefined;
    op(): OpContext | undefined;
    LTH(): TerminalNode | undefined;
    GTH(): TerminalNode | undefined;
    LEQ(): TerminalNode | undefined;
    GEQ(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    NOT_EQUAL(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    DISTINCT(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    DOCUMENT(): TerminalNode | undefined;
    UNKNOWN(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    type_list(): Type_listContext | undefined;
    value_expression_primary(): Value_expression_primaryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class OpContext extends ParserRuleContext {
    op_chars(): Op_charsContext | undefined;
    OPERATOR(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    DOT(): TerminalNode | undefined;
    all_simple_op(): All_simple_opContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class All_op_refContext extends ParserRuleContext {
    all_simple_op(): All_simple_opContext;
    OPERATOR(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    DOT(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Datetime_overlapsContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    OVERLAPS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Value_expression_primaryContext extends ParserRuleContext {
    unsigned_value_specification(): Unsigned_value_specificationContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    select_stmt_no_parens(): Select_stmt_no_parensContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    indirection_list(): Indirection_listContext | undefined;
    case_expression(): Case_expressionContext | undefined;
    NULL(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    comparison_mod(): Comparison_modContext | undefined;
    EXISTS(): TerminalNode | undefined;
    table_subquery(): Table_subqueryContext | undefined;
    function_call(): Function_callContext | undefined;
    indirection_var(): Indirection_varContext | undefined;
    array_expression(): Array_expressionContext | undefined;
    type_coercion(): Type_coercionContext | undefined;
    datetime_overlaps(): Datetime_overlapsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Unsigned_value_specificationContext extends ParserRuleContext {
    unsigned_numeric_literal(): Unsigned_numeric_literalContext | undefined;
    character_string(): Character_stringContext | undefined;
    truth_value(): Truth_valueContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Unsigned_numeric_literalContext extends ParserRuleContext {
    NUMBER_LITERAL(): TerminalNode | undefined;
    REAL_NUMBER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Truth_valueContext extends ParserRuleContext {
    TRUE(): TerminalNode | undefined;
    FALSE(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Case_expressionContext extends ParserRuleContext {
    _vex: VexContext;
    _r: VexContext[];
    CASE(): TerminalNode;
    END(): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    WHEN(): TerminalNode[];
    WHEN(i: number): TerminalNode;
    THEN(): TerminalNode[];
    THEN(i: number): TerminalNode;
    ELSE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Cast_specificationContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    vex(): VexContext;
    AS(): TerminalNode;
    data_type(): Data_typeContext;
    RIGHT_PAREN(): TerminalNode;
    CAST(): TerminalNode | undefined;
    TREAT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_callContext extends ParserRuleContext {
    schema_qualified_name_nontype(): Schema_qualified_name_nontypeContext | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    vex_or_named_notation(): Vex_or_named_notationContext[];
    vex_or_named_notation(i: number): Vex_or_named_notationContext;
    WITHIN(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    orderby_clause(): Orderby_clauseContext[];
    orderby_clause(i: number): Orderby_clauseContext;
    filter_clause(): Filter_clauseContext | undefined;
    OVER(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    window_definition(): Window_definitionContext | undefined;
    set_qualifier(): Set_qualifierContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    function_construct(): Function_constructContext | undefined;
    extract_function(): Extract_functionContext | undefined;
    system_function(): System_functionContext | undefined;
    date_time_function(): Date_time_functionContext | undefined;
    string_value_function(): String_value_functionContext | undefined;
    xml_function(): Xml_functionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Vex_or_named_notationContext extends ParserRuleContext {
    _argname: IdentifierContext;
    vex(): VexContext;
    VARIADIC(): TerminalNode | undefined;
    pointer(): PointerContext | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class PointerContext extends ParserRuleContext {
    EQUAL_GTH(): TerminalNode | undefined;
    COLON_EQUAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_constructContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    RIGHT_PAREN(): TerminalNode;
    COALESCE(): TerminalNode | undefined;
    GREATEST(): TerminalNode | undefined;
    GROUPING(): TerminalNode | undefined;
    LEAST(): TerminalNode | undefined;
    NULLIF(): TerminalNode | undefined;
    XMLCONCAT(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    ROW(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Extract_functionContext extends ParserRuleContext {
    EXTRACT(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    FROM(): TerminalNode;
    vex(): VexContext;
    RIGHT_PAREN(): TerminalNode;
    identifier(): IdentifierContext | undefined;
    character_string(): Character_stringContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class System_functionContext extends ParserRuleContext {
    CURRENT_CATALOG(): TerminalNode | undefined;
    CURRENT_SCHEMA(): TerminalNode | undefined;
    CURRENT_USER(): TerminalNode | undefined;
    SESSION_USER(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    cast_specification(): Cast_specificationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Date_time_functionContext extends ParserRuleContext {
    CURRENT_DATE(): TerminalNode | undefined;
    CURRENT_TIME(): TerminalNode | undefined;
    type_length(): Type_lengthContext | undefined;
    CURRENT_TIMESTAMP(): TerminalNode | undefined;
    LOCALTIME(): TerminalNode | undefined;
    LOCALTIMESTAMP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class String_value_functionContext extends ParserRuleContext {
    _chars: VexContext;
    _str: VexContext;
    TRIM(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    FROM(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    LEADING(): TerminalNode | undefined;
    TRAILING(): TerminalNode | undefined;
    BOTH(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SUBSTRING(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    POSITION(): TerminalNode | undefined;
    vex_b(): Vex_bContext | undefined;
    IN(): TerminalNode | undefined;
    OVERLAY(): TerminalNode | undefined;
    PLACING(): TerminalNode | undefined;
    COLLATION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Xml_functionContext extends ParserRuleContext {
    _name: IdentifierContext;
    _attname: IdentifierContext;
    XMLELEMENT(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    NAME(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    XMLATTRIBUTES(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    AS(): TerminalNode[];
    AS(i: number): TerminalNode;
    XMLFOREST(): TerminalNode | undefined;
    XMLPI(): TerminalNode | undefined;
    XMLROOT(): TerminalNode | undefined;
    VERSION(): TerminalNode | undefined;
    NO(): TerminalNode[];
    NO(i: number): TerminalNode;
    VALUE(): TerminalNode[];
    VALUE(i: number): TerminalNode;
    STANDALONE(): TerminalNode | undefined;
    YES(): TerminalNode | undefined;
    XMLEXISTS(): TerminalNode | undefined;
    PASSING(): TerminalNode | undefined;
    BY(): TerminalNode[];
    BY(i: number): TerminalNode;
    REF(): TerminalNode[];
    REF(i: number): TerminalNode;
    XMLPARSE(): TerminalNode | undefined;
    DOCUMENT(): TerminalNode | undefined;
    CONTENT(): TerminalNode | undefined;
    XMLSERIALIZE(): TerminalNode | undefined;
    data_type(): Data_typeContext | undefined;
    XMLTABLE(): TerminalNode | undefined;
    COLUMNS(): TerminalNode | undefined;
    xml_table_column(): Xml_table_columnContext[];
    xml_table_column(i: number): Xml_table_columnContext;
    XMLNAMESPACES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Xml_table_columnContext extends ParserRuleContext {
    _name: IdentifierContext;
    identifier(): IdentifierContext;
    data_type(): Data_typeContext | undefined;
    FOR(): TerminalNode | undefined;
    ORDINALITY(): TerminalNode | undefined;
    PATH(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    DEFAULT(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Comparison_modContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    ALL(): TerminalNode | undefined;
    ANY(): TerminalNode | undefined;
    SOME(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    select_stmt_no_parens(): Select_stmt_no_parensContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Filter_clauseContext extends ParserRuleContext {
    FILTER(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    WHERE(): TerminalNode;
    vex(): VexContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Window_definitionContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    identifier(): IdentifierContext | undefined;
    partition_by_columns(): Partition_by_columnsContext | undefined;
    orderby_clause(): Orderby_clauseContext | undefined;
    frame_clause(): Frame_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Frame_clauseContext extends ParserRuleContext {
    RANGE(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    GROUPS(): TerminalNode | undefined;
    frame_bound(): Frame_boundContext[];
    frame_bound(i: number): Frame_boundContext;
    BETWEEN(): TerminalNode | undefined;
    AND(): TerminalNode | undefined;
    EXCLUDE(): TerminalNode | undefined;
    CURRENT(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    TIES(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    OTHERS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Frame_boundContext extends ParserRuleContext {
    vex(): VexContext | undefined;
    PRECEDING(): TerminalNode | undefined;
    FOLLOWING(): TerminalNode | undefined;
    CURRENT(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Array_expressionContext extends ParserRuleContext {
    ARRAY(): TerminalNode;
    array_elements(): Array_elementsContext | undefined;
    table_subquery(): Table_subqueryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Array_elementsContext extends ParserRuleContext {
    LEFT_BRACKET(): TerminalNode;
    RIGHT_BRACKET(): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    array_elements(): Array_elementsContext[];
    array_elements(i: number): Array_elementsContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Type_coercionContext extends ParserRuleContext {
    data_type(): Data_typeContext | undefined;
    character_string(): Character_stringContext;
    INTERVAL(): TerminalNode | undefined;
    interval_field(): Interval_fieldContext | undefined;
    type_length(): Type_lengthContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Schema_qualified_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Set_qualifierContext extends ParserRuleContext {
    DISTINCT(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Table_subqueryContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    select_stmt(): Select_stmtContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Select_stmtContext extends ParserRuleContext {
    select_ops(): Select_opsContext;
    with_clause(): With_clauseContext | undefined;
    after_ops(): After_opsContext[];
    after_ops(i: number): After_opsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class After_opsContext extends ParserRuleContext {
    orderby_clause(): Orderby_clauseContext | undefined;
    LIMIT(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    ALL(): TerminalNode | undefined;
    OFFSET(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    FETCH(): TerminalNode | undefined;
    FIRST(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    SHARE(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext[];
    schema_qualified_name(i: number): Schema_qualified_nameContext;
    NOWAIT(): TerminalNode | undefined;
    SKIP_(): TerminalNode | undefined;
    LOCKED(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Select_stmt_no_parensContext extends ParserRuleContext {
    select_ops_no_parens(): Select_ops_no_parensContext;
    with_clause(): With_clauseContext | undefined;
    after_ops(): After_opsContext[];
    after_ops(i: number): After_opsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class With_clauseContext extends ParserRuleContext {
    WITH(): TerminalNode;
    with_query(): With_queryContext[];
    with_query(i: number): With_queryContext;
    RECURSIVE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class With_queryContext extends ParserRuleContext {
    _query_name: IdentifierContext;
    _identifier: IdentifierContext;
    _column_name: IdentifierContext[];
    AS(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    data_statement(): Data_statementContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    MATERIALIZED(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Select_opsContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode | undefined;
    select_stmt(): Select_stmtContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    select_ops(): Select_opsContext[];
    select_ops(i: number): Select_opsContext;
    INTERSECT(): TerminalNode | undefined;
    UNION(): TerminalNode | undefined;
    EXCEPT(): TerminalNode | undefined;
    set_qualifier(): Set_qualifierContext | undefined;
    select_primary(): Select_primaryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Select_ops_no_parensContext extends ParserRuleContext {
    select_ops(): Select_opsContext | undefined;
    INTERSECT(): TerminalNode | undefined;
    UNION(): TerminalNode | undefined;
    EXCEPT(): TerminalNode | undefined;
    select_primary(): Select_primaryContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    select_stmt(): Select_stmtContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    set_qualifier(): Set_qualifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Select_primaryContext extends ParserRuleContext {
    SELECT(): TerminalNode | undefined;
    set_qualifier(): Set_qualifierContext | undefined;
    select_list(): Select_listContext | undefined;
    into_table(): Into_tableContext | undefined;
    FROM(): TerminalNode | undefined;
    from_item(): From_itemContext[];
    from_item(i: number): From_itemContext;
    WHERE(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    groupby_clause(): Groupby_clauseContext | undefined;
    HAVING(): TerminalNode | undefined;
    WINDOW(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    AS(): TerminalNode[];
    AS(i: number): TerminalNode;
    window_definition(): Window_definitionContext[];
    window_definition(i: number): Window_definitionContext;
    ON(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    TABLE(): TerminalNode | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    ONLY(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    values_stmt(): Values_stmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Select_listContext extends ParserRuleContext {
    select_sublist(): Select_sublistContext[];
    select_sublist(i: number): Select_sublistContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Select_sublistContext extends ParserRuleContext {
    vex(): VexContext;
    AS(): TerminalNode | undefined;
    col_label(): Col_labelContext | undefined;
    id_token(): Id_tokenContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Into_tableContext extends ParserRuleContext {
    INTO(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    TABLE(): TerminalNode | undefined;
    TEMPORARY(): TerminalNode | undefined;
    TEMP(): TerminalNode | undefined;
    UNLOGGED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class From_itemContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode | undefined;
    from_item(): From_itemContext[];
    from_item(i: number): From_itemContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    alias_clause(): Alias_clauseContext | undefined;
    CROSS(): TerminalNode | undefined;
    JOIN(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    INNER(): TerminalNode | undefined;
    LEFT(): TerminalNode | undefined;
    RIGHT(): TerminalNode | undefined;
    FULL(): TerminalNode | undefined;
    OUTER(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    names_in_parens(): Names_in_parensContext | undefined;
    NATURAL(): TerminalNode | undefined;
    from_primary(): From_primaryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class From_primaryContext extends ParserRuleContext {
    _method: IdentifierContext;
    _alias: IdentifierContext;
    _identifier: IdentifierContext;
    _column_alias: IdentifierContext[];
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    ONLY(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    alias_clause(): Alias_clauseContext | undefined;
    TABLESAMPLE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    REPEATABLE(): TerminalNode | undefined;
    table_subquery(): Table_subqueryContext | undefined;
    LATERAL(): TerminalNode | undefined;
    function_call(): Function_callContext[];
    function_call(i: number): Function_callContext;
    WITH(): TerminalNode | undefined;
    ORDINALITY(): TerminalNode | undefined;
    AS(): TerminalNode[];
    AS(i: number): TerminalNode;
    from_function_column_def(): From_function_column_defContext[];
    from_function_column_def(i: number): From_function_column_defContext;
    ROWS(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Alias_clauseContext extends ParserRuleContext {
    _alias: IdentifierContext;
    _identifier: IdentifierContext;
    _column_alias: IdentifierContext[];
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    AS(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class From_function_column_defContext extends ParserRuleContext {
    _identifier: IdentifierContext;
    _column_alias: IdentifierContext[];
    LEFT_PAREN(): TerminalNode;
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    RIGHT_PAREN(): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Groupby_clauseContext extends ParserRuleContext {
    GROUP(): TerminalNode;
    BY(): TerminalNode;
    grouping_element_list(): Grouping_element_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Grouping_element_listContext extends ParserRuleContext {
    grouping_element(): Grouping_elementContext[];
    grouping_element(i: number): Grouping_elementContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Grouping_elementContext extends ParserRuleContext {
    vex(): VexContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    grouping_element_list(): Grouping_element_listContext | undefined;
    ROLLUP(): TerminalNode | undefined;
    CUBE(): TerminalNode | undefined;
    GROUPING(): TerminalNode | undefined;
    SETS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Values_stmtContext extends ParserRuleContext {
    VALUES(): TerminalNode;
    values_values(): Values_valuesContext[];
    values_values(i: number): Values_valuesContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Values_valuesContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Orderby_clauseContext extends ParserRuleContext {
    ORDER(): TerminalNode;
    BY(): TerminalNode;
    sort_specifier_list(): Sort_specifier_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Sort_specifier_listContext extends ParserRuleContext {
    sort_specifier(): Sort_specifierContext[];
    sort_specifier(i: number): Sort_specifierContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Sort_specifierContext extends ParserRuleContext {
    _key: VexContext;
    _opclass: Schema_qualified_nameContext;
    _order: Order_specificationContext;
    _null_order: Null_orderingContext;
    vex(): VexContext;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    order_specification(): Order_specificationContext | undefined;
    null_ordering(): Null_orderingContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Order_specificationContext extends ParserRuleContext {
    ASC(): TerminalNode | undefined;
    DESC(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    all_op_ref(): All_op_refContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Null_orderingContext extends ParserRuleContext {
    NULLS(): TerminalNode;
    FIRST(): TerminalNode | undefined;
    LAST(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Insert_stmt_for_psqlContext extends ParserRuleContext {
    _insert_table_name: Schema_qualified_nameContext;
    _alias: IdentifierContext;
    INSERT(): TerminalNode;
    INTO(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    select_stmt(): Select_stmtContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    VALUES(): TerminalNode | undefined;
    with_clause(): With_clauseContext | undefined;
    AS(): TerminalNode | undefined;
    OVERRIDING(): TerminalNode | undefined;
    VALUE(): TerminalNode | undefined;
    insert_columns(): Insert_columnsContext | undefined;
    ON(): TerminalNode | undefined;
    CONFLICT(): TerminalNode | undefined;
    conflict_action(): Conflict_actionContext | undefined;
    RETURNING(): TerminalNode | undefined;
    select_list(): Select_listContext | undefined;
    identifier(): IdentifierContext | undefined;
    SYSTEM(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    conflict_object(): Conflict_objectContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Insert_columnsContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    indirection_identifier(): Indirection_identifierContext[];
    indirection_identifier(i: number): Indirection_identifierContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Indirection_identifierContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    indirection_list(): Indirection_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Conflict_objectContext extends ParserRuleContext {
    index_sort(): Index_sortContext | undefined;
    index_where(): Index_whereContext | undefined;
    ON(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Conflict_actionContext extends ParserRuleContext {
    DO(): TerminalNode;
    NOTHING(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    update_set(): Update_setContext[];
    update_set(i: number): Update_setContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    WHERE(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Delete_stmt_for_psqlContext extends ParserRuleContext {
    _delete_table_name: Schema_qualified_nameContext;
    _alias: IdentifierContext;
    _cursor: IdentifierContext;
    DELETE(): TerminalNode;
    FROM(): TerminalNode;
    schema_qualified_name(): Schema_qualified_nameContext;
    with_clause(): With_clauseContext | undefined;
    ONLY(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    from_item(): From_itemContext[];
    from_item(i: number): From_itemContext;
    WHERE(): TerminalNode | undefined;
    RETURNING(): TerminalNode | undefined;
    select_list(): Select_listContext | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    vex(): VexContext | undefined;
    CURRENT(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Update_stmt_for_psqlContext extends ParserRuleContext {
    _update_table_name: Schema_qualified_nameContext;
    _alias: IdentifierContext;
    _cursor: IdentifierContext;
    UPDATE(): TerminalNode;
    SET(): TerminalNode;
    update_set(): Update_setContext[];
    update_set(i: number): Update_setContext;
    schema_qualified_name(): Schema_qualified_nameContext;
    with_clause(): With_clauseContext | undefined;
    ONLY(): TerminalNode | undefined;
    MULTIPLY(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    FROM(): TerminalNode | undefined;
    from_item(): From_itemContext[];
    from_item(i: number): From_itemContext;
    WHERE(): TerminalNode | undefined;
    RETURNING(): TerminalNode | undefined;
    select_list(): Select_listContext | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    vex(): VexContext | undefined;
    CURRENT(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Update_setContext extends ParserRuleContext {
    _indirection_identifier: Indirection_identifierContext;
    _column: Indirection_identifierContext[];
    _vex: VexContext;
    _value: VexContext[];
    EQUAL(): TerminalNode;
    indirection_identifier(): Indirection_identifierContext[];
    indirection_identifier(i: number): Indirection_identifierContext;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    table_subquery(): Table_subqueryContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    ROW(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Notify_stmtContext extends ParserRuleContext {
    _channel: IdentifierContext;
    _payload: Character_stringContext;
    NOTIFY(): TerminalNode;
    identifier(): IdentifierContext;
    COMMA(): TerminalNode | undefined;
    character_string(): Character_stringContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Truncate_stmtContext extends ParserRuleContext {
    TRUNCATE(): TerminalNode;
    only_table_multiply(): Only_table_multiplyContext[];
    only_table_multiply(i: number): Only_table_multiplyContext;
    TABLE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    IDENTITY(): TerminalNode | undefined;
    cascade_restrict(): Cascade_restrictContext | undefined;
    RESTART(): TerminalNode | undefined;
    CONTINUE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Identifier_listContext extends ParserRuleContext {
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Anonymous_blockContext extends ParserRuleContext {
    DO(): TerminalNode;
    character_string(): Character_stringContext[];
    character_string(i: number): Character_stringContext;
    LANGUAGE(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Comp_optionsContext extends ParserRuleContext {
    HASH_SIGN(): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    truth_value(): Truth_valueContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_blockContext extends ParserRuleContext {
    _end_label: IdentifierContext;
    BEGIN(): TerminalNode;
    function_statements(): Function_statementsContext;
    END(): TerminalNode;
    start_label(): Start_labelContext | undefined;
    declarations(): DeclarationsContext | undefined;
    exception_statement(): Exception_statementContext | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Start_labelContext extends ParserRuleContext {
    LESS_LESS(): TerminalNode;
    identifier(): IdentifierContext;
    GREATER_GREATER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class DeclarationsContext extends ParserRuleContext {
    DECLARE(): TerminalNode;
    declaration(): DeclarationContext[];
    declaration(i: number): DeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class DeclarationContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    type_declaration(): Type_declarationContext;
    SEMI_COLON(): TerminalNode;
    DECLARE(): TerminalNode[];
    DECLARE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Type_declarationContext extends ParserRuleContext {
    data_type_dec(): Data_type_decContext | undefined;
    CONSTANT(): TerminalNode | undefined;
    collate_identifier(): Collate_identifierContext | undefined;
    NOT(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    COLON_EQUAL(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    ALIAS(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    DOLLAR_NUMBER(): TerminalNode | undefined;
    CURSOR(): TerminalNode | undefined;
    select_stmt(): Select_stmtContext | undefined;
    IS(): TerminalNode | undefined;
    SCROLL(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    arguments_list(): Arguments_listContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Arguments_listContext extends ParserRuleContext {
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    data_type(): Data_typeContext[];
    data_type(i: number): Data_typeContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Data_type_decContext extends ParserRuleContext {
    data_type(): Data_typeContext | undefined;
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    MODULAR(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    schema_qualified_name_nontype(): Schema_qualified_name_nontypeContext | undefined;
    ROWTYPE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Exception_statementContext extends ParserRuleContext {
    EXCEPTION(): TerminalNode;
    WHEN(): TerminalNode[];
    WHEN(i: number): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    THEN(): TerminalNode[];
    THEN(i: number): TerminalNode;
    function_statements(): Function_statementsContext[];
    function_statements(i: number): Function_statementsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_statementsContext extends ParserRuleContext {
    function_statement(): Function_statementContext[];
    function_statement(i: number): Function_statementContext;
    SEMI_COLON(): TerminalNode[];
    SEMI_COLON(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Function_statementContext extends ParserRuleContext {
    function_block(): Function_blockContext | undefined;
    base_statement(): Base_statementContext | undefined;
    control_statement(): Control_statementContext | undefined;
    transaction_statement(): Transaction_statementContext | undefined;
    cursor_statement(): Cursor_statementContext | undefined;
    message_statement(): Message_statementContext | undefined;
    schema_statement(): Schema_statementContext | undefined;
    plpgsql_query(): Plpgsql_queryContext | undefined;
    additional_statement(): Additional_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Base_statementContext extends ParserRuleContext {
    assign_stmt(): Assign_stmtContext | undefined;
    PERFORM(): TerminalNode | undefined;
    perform_stmt(): Perform_stmtContext | undefined;
    GET(): TerminalNode | undefined;
    DIAGNOSTICS(): TerminalNode | undefined;
    diagnostic_option(): Diagnostic_optionContext[];
    diagnostic_option(i: number): Diagnostic_optionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    CURRENT(): TerminalNode | undefined;
    STACKED(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class VarContext extends ParserRuleContext {
    schema_qualified_name(): Schema_qualified_nameContext | undefined;
    DOLLAR_NUMBER(): TerminalNode | undefined;
    LEFT_BRACKET(): TerminalNode[];
    LEFT_BRACKET(i: number): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    RIGHT_BRACKET(): TerminalNode[];
    RIGHT_BRACKET(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Diagnostic_optionContext extends ParserRuleContext {
    var(): VarContext;
    identifier(): IdentifierContext;
    COLON_EQUAL(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Perform_stmtContext extends ParserRuleContext {
    select_list(): Select_listContext;
    set_qualifier(): Set_qualifierContext[];
    set_qualifier(i: number): Set_qualifierContext;
    FROM(): TerminalNode | undefined;
    from_item(): From_itemContext[];
    from_item(i: number): From_itemContext;
    WHERE(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    groupby_clause(): Groupby_clauseContext | undefined;
    HAVING(): TerminalNode | undefined;
    WINDOW(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    AS(): TerminalNode[];
    AS(i: number): TerminalNode;
    window_definition(): Window_definitionContext[];
    window_definition(i: number): Window_definitionContext;
    select_ops(): Select_opsContext | undefined;
    after_ops(): After_opsContext[];
    after_ops(i: number): After_opsContext;
    INTERSECT(): TerminalNode | undefined;
    UNION(): TerminalNode | undefined;
    EXCEPT(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Assign_stmtContext extends ParserRuleContext {
    var(): VarContext;
    COLON_EQUAL(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    select_stmt_no_parens(): Select_stmt_no_parensContext | undefined;
    perform_stmt(): Perform_stmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Execute_stmtContext extends ParserRuleContext {
    EXECUTE(): TerminalNode;
    vex(): VexContext;
    using_vex(): Using_vexContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Control_statementContext extends ParserRuleContext {
    return_stmt(): Return_stmtContext | undefined;
    CALL(): TerminalNode | undefined;
    function_call(): Function_callContext | undefined;
    if_statement(): If_statementContext | undefined;
    case_statement(): Case_statementContext | undefined;
    loop_statement(): Loop_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Cursor_statementContext extends ParserRuleContext {
    OPEN(): TerminalNode | undefined;
    var(): VarContext;
    FOR(): TerminalNode | undefined;
    plpgsql_query(): Plpgsql_queryContext | undefined;
    SCROLL(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    option(): OptionContext[];
    option(i: number): OptionContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    FETCH(): TerminalNode | undefined;
    fetch_move_direction(): Fetch_move_directionContext | undefined;
    FROM(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    MOVE(): TerminalNode | undefined;
    CLOSE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class OptionContext extends ParserRuleContext {
    vex(): VexContext;
    identifier(): IdentifierContext | undefined;
    COLON_EQUAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Transaction_statementContext extends ParserRuleContext {
    COMMIT(): TerminalNode | undefined;
    ROLLBACK(): TerminalNode | undefined;
    AND(): TerminalNode | undefined;
    CHAIN(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    lock_table(): Lock_tableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Message_statementContext extends ParserRuleContext {
    RAISE(): TerminalNode | undefined;
    log_level(): Log_levelContext | undefined;
    character_string(): Character_stringContext | undefined;
    raise_using(): Raise_usingContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    identifier(): IdentifierContext | undefined;
    SQLSTATE(): TerminalNode | undefined;
    ASSERT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Log_levelContext extends ParserRuleContext {
    DEBUG(): TerminalNode | undefined;
    LOG(): TerminalNode | undefined;
    INFO(): TerminalNode | undefined;
    NOTICE(): TerminalNode | undefined;
    WARNING(): TerminalNode | undefined;
    EXCEPTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Raise_usingContext extends ParserRuleContext {
    USING(): TerminalNode;
    raise_param(): Raise_paramContext[];
    raise_param(i: number): Raise_paramContext;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Raise_paramContext extends ParserRuleContext {
    MESSAGE(): TerminalNode | undefined;
    DETAIL(): TerminalNode | undefined;
    HINT(): TerminalNode | undefined;
    ERRCODE(): TerminalNode | undefined;
    COLUMN(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    DATATYPE(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Return_stmtContext extends ParserRuleContext {
    RETURN(): TerminalNode;
    perform_stmt(): Perform_stmtContext | undefined;
    NEXT(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    QUERY(): TerminalNode | undefined;
    plpgsql_query(): Plpgsql_queryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Loop_statementContext extends ParserRuleContext {
    LOOP(): TerminalNode[];
    LOOP(i: number): TerminalNode;
    function_statements(): Function_statementsContext | undefined;
    END(): TerminalNode | undefined;
    start_label(): Start_labelContext | undefined;
    loop_start(): Loop_startContext | undefined;
    identifier(): IdentifierContext | undefined;
    EXIT(): TerminalNode | undefined;
    CONTINUE(): TerminalNode | undefined;
    WHEN(): TerminalNode | undefined;
    vex(): VexContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Loop_startContext extends ParserRuleContext {
    _alias: IdentifierContext;
    _cursor: IdentifierContext;
    WHILE(): TerminalNode | undefined;
    vex(): VexContext[];
    vex(i: number): VexContext;
    FOR(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    DOUBLE_DOT(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    REVERSE(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    identifier_list(): Identifier_listContext | undefined;
    plpgsql_query(): Plpgsql_queryContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    option(): OptionContext[];
    option(i: number): OptionContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    FOREACH(): TerminalNode | undefined;
    ARRAY(): TerminalNode | undefined;
    SLICE(): TerminalNode | undefined;
    NUMBER_LITERAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Using_vexContext extends ParserRuleContext {
    USING(): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class If_statementContext extends ParserRuleContext {
    IF(): TerminalNode[];
    IF(i: number): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    THEN(): TerminalNode[];
    THEN(i: number): TerminalNode;
    function_statements(): Function_statementsContext[];
    function_statements(i: number): Function_statementsContext;
    END(): TerminalNode;
    ELSE(): TerminalNode | undefined;
    ELSIF(): TerminalNode[];
    ELSIF(i: number): TerminalNode;
    ELSEIF(): TerminalNode[];
    ELSEIF(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Case_statementContext extends ParserRuleContext {
    CASE(): TerminalNode[];
    CASE(i: number): TerminalNode;
    END(): TerminalNode;
    vex(): VexContext[];
    vex(i: number): VexContext;
    WHEN(): TerminalNode[];
    WHEN(i: number): TerminalNode;
    THEN(): TerminalNode[];
    THEN(i: number): TerminalNode;
    function_statements(): Function_statementsContext[];
    function_statements(i: number): Function_statementsContext;
    ELSE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
export declare class Plpgsql_queryContext extends ParserRuleContext {
    data_statement(): Data_statementContext | undefined;
    execute_stmt(): Execute_stmtContext | undefined;
    show_statement(): Show_statementContext | undefined;
    explain_statement(): Explain_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PLpgSQLParserListener): void;
    exitRule(listener: PLpgSQLParserListener): void;
}
