import { ATN } from "antlr4ts/atn/ATN";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { RuleContext } from "antlr4ts/RuleContext";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { PlSqlParserListener } from "./PlSqlParserListener";
import { PlSqlParserBase } from "./PlSqlParserBase";
export declare class PlSqlParser extends PlSqlParserBase {
    static readonly ABORT = 1;
    static readonly ABS = 2;
    static readonly ACCESS = 3;
    static readonly ACCESSED = 4;
    static readonly ACCOUNT = 5;
    static readonly ACL = 6;
    static readonly ACOS = 7;
    static readonly ACTION = 8;
    static readonly ACTIONS = 9;
    static readonly ACTIVATE = 10;
    static readonly ACTIVE = 11;
    static readonly ACTIVE_COMPONENT = 12;
    static readonly ACTIVE_DATA = 13;
    static readonly ACTIVE_FUNCTION = 14;
    static readonly ACTIVE_TAG = 15;
    static readonly ACTIVITY = 16;
    static readonly ADAPTIVE_PLAN = 17;
    static readonly ADD = 18;
    static readonly ADD_COLUMN = 19;
    static readonly ADD_GROUP = 20;
    static readonly ADD_MONTHS = 21;
    static readonly ADJ_DATE = 22;
    static readonly ADMIN = 23;
    static readonly ADMINISTER = 24;
    static readonly ADMINISTRATOR = 25;
    static readonly ADVANCED = 26;
    static readonly ADVISE = 27;
    static readonly ADVISOR = 28;
    static readonly AFD_DISKSTRING = 29;
    static readonly AFTER = 30;
    static readonly AGENT = 31;
    static readonly AGGREGATE = 32;
    static readonly A_LETTER = 33;
    static readonly ALIAS = 34;
    static readonly ALL = 35;
    static readonly ALLOCATE = 36;
    static readonly ALLOW = 37;
    static readonly ALL_ROWS = 38;
    static readonly ALTER = 39;
    static readonly ALWAYS = 40;
    static readonly ANALYZE = 41;
    static readonly ANCILLARY = 42;
    static readonly AND = 43;
    static readonly AND_EQUAL = 44;
    static readonly ANOMALY = 45;
    static readonly ANSI_REARCH = 46;
    static readonly ANTIJOIN = 47;
    static readonly ANY = 48;
    static readonly ANYSCHEMA = 49;
    static readonly APPEND = 50;
    static readonly APPENDCHILDXML = 51;
    static readonly APPEND_VALUES = 52;
    static readonly APPLICATION = 53;
    static readonly APPLY = 54;
    static readonly APPROX_COUNT_DISTINCT = 55;
    static readonly ARCHIVAL = 56;
    static readonly ARCHIVE = 57;
    static readonly ARCHIVED = 58;
    static readonly ARCHIVELOG = 59;
    static readonly ARRAY = 60;
    static readonly AS = 61;
    static readonly ASC = 62;
    static readonly ASCII = 63;
    static readonly ASCIISTR = 64;
    static readonly ASIN = 65;
    static readonly ASIS = 66;
    static readonly ASSEMBLY = 67;
    static readonly ASSIGN = 68;
    static readonly ASSOCIATE = 69;
    static readonly ASYNC = 70;
    static readonly ASYNCHRONOUS = 71;
    static readonly ATAN2 = 72;
    static readonly ATAN = 73;
    static readonly AT = 74;
    static readonly ATTRIBUTE = 75;
    static readonly ATTRIBUTES = 76;
    static readonly AUDIT = 77;
    static readonly AUTHENTICATED = 78;
    static readonly AUTHENTICATION = 79;
    static readonly AUTHID = 80;
    static readonly AUTHORIZATION = 81;
    static readonly AUTOALLOCATE = 82;
    static readonly AUTO = 83;
    static readonly AUTOBACKUP = 84;
    static readonly AUTOEXTEND = 85;
    static readonly AUTO_LOGIN = 86;
    static readonly AUTOMATIC = 87;
    static readonly AUTONOMOUS_TRANSACTION = 88;
    static readonly AUTO_REOPTIMIZE = 89;
    static readonly AVAILABILITY = 90;
    static readonly AVRO = 91;
    static readonly BACKGROUND = 92;
    static readonly BACKUP = 93;
    static readonly BACKUPSET = 94;
    static readonly BASIC = 95;
    static readonly BASICFILE = 96;
    static readonly BATCH = 97;
    static readonly BATCHSIZE = 98;
    static readonly BATCH_TABLE_ACCESS_BY_ROWID = 99;
    static readonly BECOME = 100;
    static readonly BEFORE = 101;
    static readonly BEGIN = 102;
    static readonly BEGINNING = 103;
    static readonly BEGIN_OUTLINE_DATA = 104;
    static readonly BEHALF = 105;
    static readonly BEQUEATH = 106;
    static readonly BETWEEN = 107;
    static readonly BFILE = 108;
    static readonly BFILENAME = 109;
    static readonly BIGFILE = 110;
    static readonly BINARY = 111;
    static readonly BINARY_DOUBLE = 112;
    static readonly BINARY_DOUBLE_INFINITY = 113;
    static readonly BINARY_DOUBLE_NAN = 114;
    static readonly BINARY_FLOAT = 115;
    static readonly BINARY_FLOAT_INFINITY = 116;
    static readonly BINARY_FLOAT_NAN = 117;
    static readonly BINARY_INTEGER = 118;
    static readonly BIND_AWARE = 119;
    static readonly BINDING = 120;
    static readonly BIN_TO_NUM = 121;
    static readonly BITAND = 122;
    static readonly BITMAP_AND = 123;
    static readonly BITMAP = 124;
    static readonly BITMAPS = 125;
    static readonly BITMAP_TREE = 126;
    static readonly BITS = 127;
    static readonly BLOB = 128;
    static readonly BLOCK = 129;
    static readonly BLOCK_RANGE = 130;
    static readonly BLOCKS = 131;
    static readonly BLOCKSIZE = 132;
    static readonly BODY = 133;
    static readonly BOOLEAN = 134;
    static readonly BOTH = 135;
    static readonly BOUND = 136;
    static readonly BRANCH = 137;
    static readonly BREADTH = 138;
    static readonly BROADCAST = 139;
    static readonly BSON = 140;
    static readonly BUFFER = 141;
    static readonly BUFFER_CACHE = 142;
    static readonly BUFFER_POOL = 143;
    static readonly BUILD = 144;
    static readonly BULK = 145;
    static readonly BY = 146;
    static readonly BYPASS_RECURSIVE_CHECK = 147;
    static readonly BYPASS_UJVC = 148;
    static readonly BYTE = 149;
    static readonly CACHE = 150;
    static readonly CACHE_CB = 151;
    static readonly CACHE_INSTANCES = 152;
    static readonly CACHE_TEMP_TABLE = 153;
    static readonly CACHING = 154;
    static readonly CALCULATED = 155;
    static readonly CALLBACK = 156;
    static readonly CALL = 157;
    static readonly CANCEL = 158;
    static readonly CANONICAL = 159;
    static readonly CAPACITY = 160;
    static readonly CARDINALITY = 161;
    static readonly CASCADE = 162;
    static readonly CASE = 163;
    static readonly CAST = 164;
    static readonly CATEGORY = 165;
    static readonly CDBDEFAULT = 166;
    static readonly CEIL = 167;
    static readonly CELL_FLASH_CACHE = 168;
    static readonly CERTIFICATE = 169;
    static readonly CFILE = 170;
    static readonly CHAINED = 171;
    static readonly CHANGE = 172;
    static readonly CHANGETRACKING = 173;
    static readonly CHANGE_DUPKEY_ERROR_INDEX = 174;
    static readonly CHARACTER = 175;
    static readonly CHAR = 176;
    static readonly CHAR_CS = 177;
    static readonly CHARTOROWID = 178;
    static readonly CHECK_ACL_REWRITE = 179;
    static readonly CHECK = 180;
    static readonly CHECKPOINT = 181;
    static readonly CHILD = 182;
    static readonly CHOOSE = 183;
    static readonly CHR = 184;
    static readonly CHUNK = 185;
    static readonly CLASS = 186;
    static readonly CLASSIFIER = 187;
    static readonly CLEANUP = 188;
    static readonly CLEAR = 189;
    static readonly C_LETTER = 190;
    static readonly CLIENT = 191;
    static readonly CLOB = 192;
    static readonly CLONE = 193;
    static readonly CLOSE_CACHED_OPEN_CURSORS = 194;
    static readonly CLOSE = 195;
    static readonly CLUSTER_BY_ROWID = 196;
    static readonly CLUSTER = 197;
    static readonly CLUSTER_DETAILS = 198;
    static readonly CLUSTER_DISTANCE = 199;
    static readonly CLUSTER_ID = 200;
    static readonly CLUSTERING = 201;
    static readonly CLUSTERING_FACTOR = 202;
    static readonly CLUSTER_PROBABILITY = 203;
    static readonly CLUSTER_SET = 204;
    static readonly COALESCE = 205;
    static readonly COALESCE_SQ = 206;
    static readonly COARSE = 207;
    static readonly CO_AUTH_IND = 208;
    static readonly COLD = 209;
    static readonly COLLECT = 210;
    static readonly COLUMNAR = 211;
    static readonly COLUMN_AUTH_INDICATOR = 212;
    static readonly COLUMN = 213;
    static readonly COLUMNS = 214;
    static readonly COLUMN_STATS = 215;
    static readonly COLUMN_VALUE = 216;
    static readonly COMMENT = 217;
    static readonly COMMIT = 218;
    static readonly COMMITTED = 219;
    static readonly COMMON_DATA = 220;
    static readonly COMPACT = 221;
    static readonly COMPATIBILITY = 222;
    static readonly COMPILE = 223;
    static readonly COMPLETE = 224;
    static readonly COMPLIANCE = 225;
    static readonly COMPONENT = 226;
    static readonly COMPONENTS = 227;
    static readonly COMPOSE = 228;
    static readonly COMPOSITE = 229;
    static readonly COMPOSITE_LIMIT = 230;
    static readonly COMPOUND = 231;
    static readonly COMPRESS = 232;
    static readonly COMPUTE = 233;
    static readonly CONCAT = 234;
    static readonly CON_DBID_TO_ID = 235;
    static readonly CONDITIONAL = 236;
    static readonly CONDITION = 237;
    static readonly CONFIRM = 238;
    static readonly CONFORMING = 239;
    static readonly CON_GUID_TO_ID = 240;
    static readonly CON_ID = 241;
    static readonly CON_NAME_TO_ID = 242;
    static readonly CONNECT_BY_CB_WHR_ONLY = 243;
    static readonly CONNECT_BY_COMBINE_SW = 244;
    static readonly CONNECT_BY_COST_BASED = 245;
    static readonly CONNECT_BY_ELIM_DUPS = 246;
    static readonly CONNECT_BY_FILTERING = 247;
    static readonly CONNECT_BY_ISCYCLE = 248;
    static readonly CONNECT_BY_ISLEAF = 249;
    static readonly CONNECT_BY_ROOT = 250;
    static readonly CONNECT = 251;
    static readonly CONNECT_TIME = 252;
    static readonly CONSIDER = 253;
    static readonly CONSISTENT = 254;
    static readonly CONSTANT = 255;
    static readonly CONST = 256;
    static readonly CONSTRAINT = 257;
    static readonly CONSTRAINTS = 258;
    static readonly CONSTRUCTOR = 259;
    static readonly CONTAINER = 260;
    static readonly CONTAINER_DATA = 261;
    static readonly CONTAINERS = 262;
    static readonly CONTENT = 263;
    static readonly CONTENTS = 264;
    static readonly CONTEXT = 265;
    static readonly CONTINUE = 266;
    static readonly CONTROLFILE = 267;
    static readonly CON_UID_TO_ID = 268;
    static readonly CONVERT = 269;
    static readonly COOKIE = 270;
    static readonly COPY = 271;
    static readonly CORR_K = 272;
    static readonly CORR_S = 273;
    static readonly CORRUPTION = 274;
    static readonly CORRUPT_XID_ALL = 275;
    static readonly CORRUPT_XID = 276;
    static readonly COS = 277;
    static readonly COSH = 278;
    static readonly COST = 279;
    static readonly COST_XML_QUERY_REWRITE = 280;
    static readonly COUNT = 281;
    static readonly COVAR_POP = 282;
    static readonly COVAR_SAMP = 283;
    static readonly CPU_COSTING = 284;
    static readonly CPU_PER_CALL = 285;
    static readonly CPU_PER_SESSION = 286;
    static readonly CRASH = 287;
    static readonly CREATE = 288;
    static readonly CREATE_FILE_DEST = 289;
    static readonly CREATE_STORED_OUTLINES = 290;
    static readonly CREATION = 291;
    static readonly CREDENTIAL = 292;
    static readonly CRITICAL = 293;
    static readonly CROSS = 294;
    static readonly CROSSEDITION = 295;
    static readonly CSCONVERT = 296;
    static readonly CUBE_AJ = 297;
    static readonly CUBE = 298;
    static readonly CUBE_GB = 299;
    static readonly CUBE_SJ = 300;
    static readonly CUME_DISTM = 301;
    static readonly CURRENT = 302;
    static readonly CURRENT_DATE = 303;
    static readonly CURRENT_SCHEMA = 304;
    static readonly CURRENT_TIME = 305;
    static readonly CURRENT_TIMESTAMP = 306;
    static readonly CURRENT_USER = 307;
    static readonly CURRENTV = 308;
    static readonly CURSOR = 309;
    static readonly CURSOR_SHARING_EXACT = 310;
    static readonly CURSOR_SPECIFIC_SEGMENT = 311;
    static readonly CUSTOMDATUM = 312;
    static readonly CV = 313;
    static readonly CYCLE = 314;
    static readonly DANGLING = 315;
    static readonly DATABASE = 316;
    static readonly DATA = 317;
    static readonly DATAFILE = 318;
    static readonly DATAFILES = 319;
    static readonly DATAGUARDCONFIG = 320;
    static readonly DATAMOVEMENT = 321;
    static readonly DATAOBJNO = 322;
    static readonly DATAOBJ_TO_MAT_PARTITION = 323;
    static readonly DATAOBJ_TO_PARTITION = 324;
    static readonly DATAPUMP = 325;
    static readonly DATA_SECURITY_REWRITE_LIMIT = 326;
    static readonly DATE = 327;
    static readonly DATE_MODE = 328;
    static readonly DAY = 329;
    static readonly DAYS = 330;
    static readonly DBA = 331;
    static readonly DBA_RECYCLEBIN = 332;
    static readonly DBMS_STATS = 333;
    static readonly DB_ROLE_CHANGE = 334;
    static readonly DBTIMEZONE = 335;
    static readonly DB_UNIQUE_NAME = 336;
    static readonly DB_VERSION = 337;
    static readonly DDL = 338;
    static readonly DEALLOCATE = 339;
    static readonly DEBUG = 340;
    static readonly DEBUGGER = 341;
    static readonly DEC = 342;
    static readonly DECIMAL = 343;
    static readonly DECLARE = 344;
    static readonly DECOMPOSE = 345;
    static readonly DECORRELATE = 346;
    static readonly DECR = 347;
    static readonly DECREMENT = 348;
    static readonly DECRYPT = 349;
    static readonly DEDUPLICATE = 350;
    static readonly DEFAULT = 351;
    static readonly DEFAULTS = 352;
    static readonly DEFERRABLE = 353;
    static readonly DEFERRED = 354;
    static readonly DEFINED = 355;
    static readonly DEFINE = 356;
    static readonly DEFINER = 357;
    static readonly DEGREE = 358;
    static readonly DELAY = 359;
    static readonly DELEGATE = 360;
    static readonly DELETE_ALL = 361;
    static readonly DELETE = 362;
    static readonly DELETEXML = 363;
    static readonly DEMAND = 364;
    static readonly DENSE_RANKM = 365;
    static readonly DEPENDENT = 366;
    static readonly DEPTH = 367;
    static readonly DEQUEUE = 368;
    static readonly DEREF = 369;
    static readonly DEREF_NO_REWRITE = 370;
    static readonly DESC = 371;
    static readonly DESTROY = 372;
    static readonly DETACHED = 373;
    static readonly DETERMINES = 374;
    static readonly DETERMINISTIC = 375;
    static readonly DICTIONARY = 376;
    static readonly DIMENSION = 377;
    static readonly DIMENSIONS = 378;
    static readonly DIRECT_LOAD = 379;
    static readonly DIRECTORY = 380;
    static readonly DIRECT_PATH = 381;
    static readonly DISABLE_ALL = 382;
    static readonly DISABLE = 383;
    static readonly DISABLE_PARALLEL_DML = 384;
    static readonly DISABLE_PRESET = 385;
    static readonly DISABLE_RPKE = 386;
    static readonly DISALLOW = 387;
    static readonly DISASSOCIATE = 388;
    static readonly DISCARD = 389;
    static readonly DISCONNECT = 390;
    static readonly DISK = 391;
    static readonly DISKGROUP = 392;
    static readonly DISKGROUP_PLUS = 393;
    static readonly DISKS = 394;
    static readonly DISMOUNT = 395;
    static readonly DISTINCT = 396;
    static readonly DISTINGUISHED = 397;
    static readonly DISTRIBUTED = 398;
    static readonly DISTRIBUTE = 399;
    static readonly DML = 400;
    static readonly DML_UPDATE = 401;
    static readonly DOCFIDELITY = 402;
    static readonly DOCUMENT = 403;
    static readonly DOMAIN_INDEX_FILTER = 404;
    static readonly DOMAIN_INDEX_NO_SORT = 405;
    static readonly DOMAIN_INDEX_SORT = 406;
    static readonly DOUBLE = 407;
    static readonly DOWNGRADE = 408;
    static readonly DRIVING_SITE = 409;
    static readonly DROP_COLUMN = 410;
    static readonly DROP = 411;
    static readonly DROP_GROUP = 412;
    static readonly DSINTERVAL_UNCONSTRAINED = 413;
    static readonly DST_UPGRADE_INSERT_CONV = 414;
    static readonly DUMP = 415;
    static readonly DUMPSET = 416;
    static readonly DUPLICATE = 417;
    static readonly DV = 418;
    static readonly DYNAMIC = 419;
    static readonly DYNAMIC_SAMPLING = 420;
    static readonly DYNAMIC_SAMPLING_EST_CDN = 421;
    static readonly EACH = 422;
    static readonly EDITIONABLE = 423;
    static readonly EDITION = 424;
    static readonly EDITIONING = 425;
    static readonly EDITIONS = 426;
    static readonly ELEMENT = 427;
    static readonly ELIM_GROUPBY = 428;
    static readonly ELIMINATE_JOIN = 429;
    static readonly ELIMINATE_OBY = 430;
    static readonly ELIMINATE_OUTER_JOIN = 431;
    static readonly ELSE = 432;
    static readonly ELSIF = 433;
    static readonly EM = 434;
    static readonly EMPTY_BLOB = 435;
    static readonly EMPTY_CLOB = 436;
    static readonly EMPTY = 437;
    static readonly ENABLE_ALL = 438;
    static readonly ENABLE = 439;
    static readonly ENABLE_PARALLEL_DML = 440;
    static readonly ENABLE_PRESET = 441;
    static readonly ENCODING = 442;
    static readonly ENCRYPT = 443;
    static readonly ENCRYPTION = 444;
    static readonly END = 445;
    static readonly END_OUTLINE_DATA = 446;
    static readonly ENFORCED = 447;
    static readonly ENFORCE = 448;
    static readonly ENQUEUE = 449;
    static readonly ENTERPRISE = 450;
    static readonly ENTITYESCAPING = 451;
    static readonly ENTRY = 452;
    static readonly EQUIPART = 453;
    static readonly ERR = 454;
    static readonly ERROR_ARGUMENT = 455;
    static readonly ERROR = 456;
    static readonly ERROR_ON_OVERLAP_TIME = 457;
    static readonly ERRORS = 458;
    static readonly ESCAPE = 459;
    static readonly ESTIMATE = 460;
    static readonly EVAL = 461;
    static readonly EVALNAME = 462;
    static readonly EVALUATE = 463;
    static readonly EVALUATION = 464;
    static readonly EVENTS = 465;
    static readonly EVERY = 466;
    static readonly EXCEPT = 467;
    static readonly EXCEPTION = 468;
    static readonly EXCEPTION_INIT = 469;
    static readonly EXCEPTIONS = 470;
    static readonly EXCHANGE = 471;
    static readonly EXCLUDE = 472;
    static readonly EXCLUDING = 473;
    static readonly EXCLUSIVE = 474;
    static readonly EXECUTE = 475;
    static readonly EXEMPT = 476;
    static readonly EXISTING = 477;
    static readonly EXISTS = 478;
    static readonly EXISTSNODE = 479;
    static readonly EXIT = 480;
    static readonly EXPAND_GSET_TO_UNION = 481;
    static readonly EXPAND_TABLE = 482;
    static readonly EXP = 483;
    static readonly EXPIRE = 484;
    static readonly EXPLAIN = 485;
    static readonly EXPLOSION = 486;
    static readonly EXPORT = 487;
    static readonly EXPR_CORR_CHECK = 488;
    static readonly EXPRESS = 489;
    static readonly EXTENDS = 490;
    static readonly EXTENT = 491;
    static readonly EXTENTS = 492;
    static readonly EXTERNAL = 493;
    static readonly EXTERNALLY = 494;
    static readonly EXTRACTCLOBXML = 495;
    static readonly EXTRACT = 496;
    static readonly EXTRACTVALUE = 497;
    static readonly EXTRA = 498;
    static readonly FACILITY = 499;
    static readonly FACT = 500;
    static readonly FACTOR = 501;
    static readonly FACTORIZE_JOIN = 502;
    static readonly FAILED = 503;
    static readonly FAILED_LOGIN_ATTEMPTS = 504;
    static readonly FAILGROUP = 505;
    static readonly FAILOVER = 506;
    static readonly FAILURE = 507;
    static readonly FALSE = 508;
    static readonly FAMILY = 509;
    static readonly FAR = 510;
    static readonly FAST = 511;
    static readonly FASTSTART = 512;
    static readonly FBTSCAN = 513;
    static readonly FEATURE_DETAILS = 514;
    static readonly FEATURE_ID = 515;
    static readonly FEATURE_SET = 516;
    static readonly FEATURE_VALUE = 517;
    static readonly FETCH = 518;
    static readonly FILE = 519;
    static readonly FILE_NAME_CONVERT = 520;
    static readonly FILESYSTEM_LIKE_LOGGING = 521;
    static readonly FILTER = 522;
    static readonly FINAL = 523;
    static readonly FINE = 524;
    static readonly FINISH = 525;
    static readonly FIRST = 526;
    static readonly FIRSTM = 527;
    static readonly FIRST_ROWS = 528;
    static readonly FIRST_VALUE = 529;
    static readonly FIXED_VIEW_DATA = 530;
    static readonly FLAGGER = 531;
    static readonly FLASHBACK = 532;
    static readonly FLASH_CACHE = 533;
    static readonly FLOAT = 534;
    static readonly FLOB = 535;
    static readonly FLOOR = 536;
    static readonly FLUSH = 537;
    static readonly FOLDER = 538;
    static readonly FOLLOWING = 539;
    static readonly FOLLOWS = 540;
    static readonly FORALL = 541;
    static readonly FORCE = 542;
    static readonly FORCE_XML_QUERY_REWRITE = 543;
    static readonly FOREIGN = 544;
    static readonly FOREVER = 545;
    static readonly FOR = 546;
    static readonly FORMAT = 547;
    static readonly FORWARD = 548;
    static readonly FRAGMENT_NUMBER = 549;
    static readonly FREELIST = 550;
    static readonly FREELISTS = 551;
    static readonly FREEPOOLS = 552;
    static readonly FRESH = 553;
    static readonly FROM = 554;
    static readonly FROM_TZ = 555;
    static readonly FULL = 556;
    static readonly FULL_OUTER_JOIN_TO_OUTER = 557;
    static readonly FUNCTION = 558;
    static readonly FUNCTIONS = 559;
    static readonly GATHER_OPTIMIZER_STATISTICS = 560;
    static readonly GATHER_PLAN_STATISTICS = 561;
    static readonly GBY_CONC_ROLLUP = 562;
    static readonly GBY_PUSHDOWN = 563;
    static readonly GENERATED = 564;
    static readonly GET = 565;
    static readonly GLOBAL = 566;
    static readonly GLOBALLY = 567;
    static readonly GLOBAL_NAME = 568;
    static readonly GLOBAL_TOPIC_ENABLED = 569;
    static readonly GOTO = 570;
    static readonly GRANT = 571;
    static readonly GROUP_BY = 572;
    static readonly GROUP = 573;
    static readonly GROUP_ID = 574;
    static readonly GROUPING = 575;
    static readonly GROUPING_ID = 576;
    static readonly GROUPS = 577;
    static readonly GUARANTEED = 578;
    static readonly GUARANTEE = 579;
    static readonly GUARD = 580;
    static readonly HASH_AJ = 581;
    static readonly HASH = 582;
    static readonly HASHKEYS = 583;
    static readonly HASH_SJ = 584;
    static readonly HAVING = 585;
    static readonly HEADER = 586;
    static readonly HEAP = 587;
    static readonly HELP = 588;
    static readonly HEXTORAW = 589;
    static readonly HEXTOREF = 590;
    static readonly HIDDEN_KEYWORD = 591;
    static readonly HIDE = 592;
    static readonly HIERARCHY = 593;
    static readonly HIGH = 594;
    static readonly HINTSET_BEGIN = 595;
    static readonly HINTSET_END = 596;
    static readonly HOT = 597;
    static readonly HOUR = 598;
    static readonly HWM_BROKERED = 599;
    static readonly HYBRID = 600;
    static readonly IDENTIFIED = 601;
    static readonly IDENTIFIER = 602;
    static readonly IDENTITY = 603;
    static readonly IDGENERATORS = 604;
    static readonly ID = 605;
    static readonly IDLE_TIME = 606;
    static readonly IF = 607;
    static readonly IGNORE = 608;
    static readonly IGNORE_OPTIM_EMBEDDED_HINTS = 609;
    static readonly IGNORE_ROW_ON_DUPKEY_INDEX = 610;
    static readonly IGNORE_WHERE_CLAUSE = 611;
    static readonly ILM = 612;
    static readonly IMMEDIATE = 613;
    static readonly IMPACT = 614;
    static readonly IMPORT = 615;
    static readonly INACTIVE = 616;
    static readonly INCLUDE = 617;
    static readonly INCLUDE_VERSION = 618;
    static readonly INCLUDING = 619;
    static readonly INCREMENTAL = 620;
    static readonly INCREMENT = 621;
    static readonly INCR = 622;
    static readonly INDENT = 623;
    static readonly INDEX_ASC = 624;
    static readonly INDEX_COMBINE = 625;
    static readonly INDEX_DESC = 626;
    static readonly INDEXED = 627;
    static readonly INDEXES = 628;
    static readonly INDEX_FFS = 629;
    static readonly INDEX_FILTER = 630;
    static readonly INDEX = 631;
    static readonly INDEXING = 632;
    static readonly INDEX_JOIN = 633;
    static readonly INDEX_ROWS = 634;
    static readonly INDEX_RRS = 635;
    static readonly INDEX_RS_ASC = 636;
    static readonly INDEX_RS_DESC = 637;
    static readonly INDEX_RS = 638;
    static readonly INDEX_SCAN = 639;
    static readonly INDEX_SKIP_SCAN = 640;
    static readonly INDEX_SS_ASC = 641;
    static readonly INDEX_SS_DESC = 642;
    static readonly INDEX_SS = 643;
    static readonly INDEX_STATS = 644;
    static readonly INDEXTYPE = 645;
    static readonly INDEXTYPES = 646;
    static readonly INDICATOR = 647;
    static readonly INDICES = 648;
    static readonly INFINITE = 649;
    static readonly INFORMATIONAL = 650;
    static readonly INHERIT = 651;
    static readonly IN = 652;
    static readonly INITCAP = 653;
    static readonly INITIAL = 654;
    static readonly INITIALIZED = 655;
    static readonly INITIALLY = 656;
    static readonly INITRANS = 657;
    static readonly INLINE = 658;
    static readonly INLINE_XMLTYPE_NT = 659;
    static readonly INMEMORY = 660;
    static readonly IN_MEMORY_METADATA = 661;
    static readonly INMEMORY_PRUNING = 662;
    static readonly INNER = 663;
    static readonly INOUT = 664;
    static readonly INPLACE = 665;
    static readonly INSERTCHILDXMLAFTER = 666;
    static readonly INSERTCHILDXMLBEFORE = 667;
    static readonly INSERTCHILDXML = 668;
    static readonly INSERT = 669;
    static readonly INSERTXMLAFTER = 670;
    static readonly INSERTXMLBEFORE = 671;
    static readonly INSTANCE = 672;
    static readonly INSTANCES = 673;
    static readonly INSTANTIABLE = 674;
    static readonly INSTANTLY = 675;
    static readonly INSTEAD = 676;
    static readonly INSTR2 = 677;
    static readonly INSTR4 = 678;
    static readonly INSTRB = 679;
    static readonly INSTRC = 680;
    static readonly INSTR = 681;
    static readonly INTEGER = 682;
    static readonly INTERLEAVED = 683;
    static readonly INTERMEDIATE = 684;
    static readonly INTERNAL_CONVERT = 685;
    static readonly INTERNAL_USE = 686;
    static readonly INTERPRETED = 687;
    static readonly INTERSECT = 688;
    static readonly INTERVAL = 689;
    static readonly INT = 690;
    static readonly INTO = 691;
    static readonly INVALIDATE = 692;
    static readonly INVISIBLE = 693;
    static readonly IN_XQUERY = 694;
    static readonly IS = 695;
    static readonly ISOLATION = 696;
    static readonly ISOLATION_LEVEL = 697;
    static readonly ITERATE = 698;
    static readonly ITERATION_NUMBER = 699;
    static readonly JAVA = 700;
    static readonly JOB = 701;
    static readonly JOIN = 702;
    static readonly JSON_ARRAYAGG = 703;
    static readonly JSON_ARRAY = 704;
    static readonly JSON_EQUAL = 705;
    static readonly JSON_EXISTS2 = 706;
    static readonly JSON_EXISTS = 707;
    static readonly JSONGET = 708;
    static readonly JSON = 709;
    static readonly JSON_OBJECTAGG = 710;
    static readonly JSON_OBJECT = 711;
    static readonly JSONPARSE = 712;
    static readonly JSON_QUERY = 713;
    static readonly JSON_SERIALIZE = 714;
    static readonly JSON_TABLE = 715;
    static readonly JSON_TEXTCONTAINS2 = 716;
    static readonly JSON_TEXTCONTAINS = 717;
    static readonly JSON_VALUE = 718;
    static readonly KEEP_DUPLICATES = 719;
    static readonly KEEP = 720;
    static readonly KERBEROS = 721;
    static readonly KEY = 722;
    static readonly KEY_LENGTH = 723;
    static readonly KEYSIZE = 724;
    static readonly KEYS = 725;
    static readonly KEYSTORE = 726;
    static readonly KILL = 727;
    static readonly LABEL = 728;
    static readonly LANGUAGE = 729;
    static readonly LAST_DAY = 730;
    static readonly LAST = 731;
    static readonly LAST_VALUE = 732;
    static readonly LATERAL = 733;
    static readonly LAX = 734;
    static readonly LAYER = 735;
    static readonly LDAP_REGISTRATION_ENABLED = 736;
    static readonly LDAP_REGISTRATION = 737;
    static readonly LDAP_REG_SYNC_INTERVAL = 738;
    static readonly LEADING = 739;
    static readonly LEFT = 740;
    static readonly LENGTH2 = 741;
    static readonly LENGTH4 = 742;
    static readonly LENGTHB = 743;
    static readonly LENGTHC = 744;
    static readonly LENGTH = 745;
    static readonly LESS = 746;
    static readonly LEVEL = 747;
    static readonly LEVELS = 748;
    static readonly LIBRARY = 749;
    static readonly LIFECYCLE = 750;
    static readonly LIFE = 751;
    static readonly LIFETIME = 752;
    static readonly LIKE2 = 753;
    static readonly LIKE4 = 754;
    static readonly LIKEC = 755;
    static readonly LIKE_EXPAND = 756;
    static readonly LIKE = 757;
    static readonly LIMIT = 758;
    static readonly LINEAR = 759;
    static readonly LINK = 760;
    static readonly LIST = 761;
    static readonly LN = 762;
    static readonly LNNVL = 763;
    static readonly LOAD = 764;
    static readonly LOB = 765;
    static readonly LOBNVL = 766;
    static readonly LOBS = 767;
    static readonly LOCAL_INDEXES = 768;
    static readonly LOCAL = 769;
    static readonly LOCALTIME = 770;
    static readonly LOCALTIMESTAMP = 771;
    static readonly LOCATION = 772;
    static readonly LOCATOR = 773;
    static readonly LOCKED = 774;
    static readonly LOCKING = 775;
    static readonly LOCK = 776;
    static readonly LOGFILE = 777;
    static readonly LOGFILES = 778;
    static readonly LOGGING = 779;
    static readonly LOGICAL = 780;
    static readonly LOGICAL_READS_PER_CALL = 781;
    static readonly LOGICAL_READS_PER_SESSION = 782;
    static readonly LOG = 783;
    static readonly LOGMINING = 784;
    static readonly LOGOFF = 785;
    static readonly LOGON = 786;
    static readonly LOG_READ_ONLY_VIOLATIONS = 787;
    static readonly LONG = 788;
    static readonly LOOP = 789;
    static readonly LOWER = 790;
    static readonly LOW = 791;
    static readonly LPAD = 792;
    static readonly LTRIM = 793;
    static readonly MAIN = 794;
    static readonly MAKE_REF = 795;
    static readonly MANAGED = 796;
    static readonly MANAGE = 797;
    static readonly MANAGEMENT = 798;
    static readonly MANAGER = 799;
    static readonly MANUAL = 800;
    static readonly MAP = 801;
    static readonly MAPPING = 802;
    static readonly MASTER = 803;
    static readonly MATCHED = 804;
    static readonly MATCHES = 805;
    static readonly MATCH = 806;
    static readonly MATCH_NUMBER = 807;
    static readonly MATCH_RECOGNIZE = 808;
    static readonly MATERIALIZED = 809;
    static readonly MATERIALIZE = 810;
    static readonly MAXARCHLOGS = 811;
    static readonly MAXDATAFILES = 812;
    static readonly MAXEXTENTS = 813;
    static readonly MAXIMIZE = 814;
    static readonly MAXINSTANCES = 815;
    static readonly MAXLOGFILES = 816;
    static readonly MAXLOGHISTORY = 817;
    static readonly MAXLOGMEMBERS = 818;
    static readonly MAX_SHARED_TEMP_SIZE = 819;
    static readonly MAXSIZE = 820;
    static readonly MAXTRANS = 821;
    static readonly MAXVALUE = 822;
    static readonly MEASURE = 823;
    static readonly MEASURES = 824;
    static readonly MEDIUM = 825;
    static readonly MEMBER = 826;
    static readonly MEMCOMPRESS = 827;
    static readonly MEMORY = 828;
    static readonly MERGEACTIONS = 829;
    static readonly MERGE_AJ = 830;
    static readonly MERGE_CONST_ON = 831;
    static readonly MERGE = 832;
    static readonly MERGE_SJ = 833;
    static readonly METADATA = 834;
    static readonly METHOD = 835;
    static readonly MIGRATE = 836;
    static readonly MIGRATION = 837;
    static readonly MINEXTENTS = 838;
    static readonly MINIMIZE = 839;
    static readonly MINIMUM = 840;
    static readonly MINING = 841;
    static readonly MINUS = 842;
    static readonly MINUS_NULL = 843;
    static readonly MINUTE = 844;
    static readonly MINVALUE = 845;
    static readonly MIRRORCOLD = 846;
    static readonly MIRRORHOT = 847;
    static readonly MIRROR = 848;
    static readonly MLSLABEL = 849;
    static readonly MODEL_COMPILE_SUBQUERY = 850;
    static readonly MODEL_DONTVERIFY_UNIQUENESS = 851;
    static readonly MODEL_DYNAMIC_SUBQUERY = 852;
    static readonly MODEL_MIN_ANALYSIS = 853;
    static readonly MODEL = 854;
    static readonly MODEL_NB = 855;
    static readonly MODEL_NO_ANALYSIS = 856;
    static readonly MODEL_PBY = 857;
    static readonly MODEL_PUSH_REF = 858;
    static readonly MODEL_SV = 859;
    static readonly MODE = 860;
    static readonly MODIFICATION = 861;
    static readonly MODIFY_COLUMN_TYPE = 862;
    static readonly MODIFY = 863;
    static readonly MOD = 864;
    static readonly MODULE = 865;
    static readonly MONITORING = 866;
    static readonly MONITOR = 867;
    static readonly MONTH = 868;
    static readonly MONTHS_BETWEEN = 869;
    static readonly MONTHS = 870;
    static readonly MOUNT = 871;
    static readonly MOUNTPATH = 872;
    static readonly MOVEMENT = 873;
    static readonly MOVE = 874;
    static readonly MULTIDIMENSIONAL = 875;
    static readonly MULTISET = 876;
    static readonly MV_MERGE = 877;
    static readonly NAMED = 878;
    static readonly NAME = 879;
    static readonly NAMESPACE = 880;
    static readonly NAN = 881;
    static readonly NANVL = 882;
    static readonly NATIONAL = 883;
    static readonly NATIVE_FULL_OUTER_JOIN = 884;
    static readonly NATIVE = 885;
    static readonly NATURAL = 886;
    static readonly NATURALN = 887;
    static readonly NAV = 888;
    static readonly NCHAR_CS = 889;
    static readonly NCHAR = 890;
    static readonly NCHR = 891;
    static readonly NCLOB = 892;
    static readonly NEEDED = 893;
    static readonly NEG = 894;
    static readonly NESTED = 895;
    static readonly NESTED_TABLE_FAST_INSERT = 896;
    static readonly NESTED_TABLE_GET_REFS = 897;
    static readonly NESTED_TABLE_ID = 898;
    static readonly NESTED_TABLE_SET_REFS = 899;
    static readonly NESTED_TABLE_SET_SETID = 900;
    static readonly NETWORK = 901;
    static readonly NEVER = 902;
    static readonly NEW = 903;
    static readonly NEW_TIME = 904;
    static readonly NEXT_DAY = 905;
    static readonly NEXT = 906;
    static readonly NL_AJ = 907;
    static readonly NLJ_BATCHING = 908;
    static readonly NLJ_INDEX_FILTER = 909;
    static readonly NLJ_INDEX_SCAN = 910;
    static readonly NLJ_PREFETCH = 911;
    static readonly NLS_CALENDAR = 912;
    static readonly NLS_CHARACTERSET = 913;
    static readonly NLS_CHARSET_DECL_LEN = 914;
    static readonly NLS_CHARSET_ID = 915;
    static readonly NLS_CHARSET_NAME = 916;
    static readonly NLS_COMP = 917;
    static readonly NLS_CURRENCY = 918;
    static readonly NLS_DATE_FORMAT = 919;
    static readonly NLS_DATE_LANGUAGE = 920;
    static readonly NLS_INITCAP = 921;
    static readonly NLS_ISO_CURRENCY = 922;
    static readonly NL_SJ = 923;
    static readonly NLS_LANG = 924;
    static readonly NLS_LANGUAGE = 925;
    static readonly NLS_LENGTH_SEMANTICS = 926;
    static readonly NLS_LOWER = 927;
    static readonly NLS_NCHAR_CONV_EXCP = 928;
    static readonly NLS_NUMERIC_CHARACTERS = 929;
    static readonly NLS_SORT = 930;
    static readonly NLSSORT = 931;
    static readonly NLS_SPECIAL_CHARS = 932;
    static readonly NLS_TERRITORY = 933;
    static readonly NLS_UPPER = 934;
    static readonly NO_ACCESS = 935;
    static readonly NO_ADAPTIVE_PLAN = 936;
    static readonly NO_ANSI_REARCH = 937;
    static readonly NOAPPEND = 938;
    static readonly NOARCHIVELOG = 939;
    static readonly NOAUDIT = 940;
    static readonly NO_AUTO_REOPTIMIZE = 941;
    static readonly NO_BASETABLE_MULTIMV_REWRITE = 942;
    static readonly NO_BATCH_TABLE_ACCESS_BY_ROWID = 943;
    static readonly NO_BIND_AWARE = 944;
    static readonly NO_BUFFER = 945;
    static readonly NOCACHE = 946;
    static readonly NO_CARTESIAN = 947;
    static readonly NO_CHECK_ACL_REWRITE = 948;
    static readonly NO_CLUSTER_BY_ROWID = 949;
    static readonly NO_CLUSTERING = 950;
    static readonly NO_COALESCE_SQ = 951;
    static readonly NO_COMMON_DATA = 952;
    static readonly NOCOMPRESS = 953;
    static readonly NO_CONNECT_BY_CB_WHR_ONLY = 954;
    static readonly NO_CONNECT_BY_COMBINE_SW = 955;
    static readonly NO_CONNECT_BY_COST_BASED = 956;
    static readonly NO_CONNECT_BY_ELIM_DUPS = 957;
    static readonly NO_CONNECT_BY_FILTERING = 958;
    static readonly NOCOPY = 959;
    static readonly NO_COST_XML_QUERY_REWRITE = 960;
    static readonly NO_CPU_COSTING = 961;
    static readonly NOCPU_COSTING = 962;
    static readonly NOCYCLE = 963;
    static readonly NO_DATA_SECURITY_REWRITE = 964;
    static readonly NO_DECORRELATE = 965;
    static readonly NODELAY = 966;
    static readonly NO_DOMAIN_INDEX_FILTER = 967;
    static readonly NO_DST_UPGRADE_INSERT_CONV = 968;
    static readonly NO_ELIM_GROUPBY = 969;
    static readonly NO_ELIMINATE_JOIN = 970;
    static readonly NO_ELIMINATE_OBY = 971;
    static readonly NO_ELIMINATE_OUTER_JOIN = 972;
    static readonly NOENTITYESCAPING = 973;
    static readonly NO_EXPAND_GSET_TO_UNION = 974;
    static readonly NO_EXPAND = 975;
    static readonly NO_EXPAND_TABLE = 976;
    static readonly NO_FACT = 977;
    static readonly NO_FACTORIZE_JOIN = 978;
    static readonly NO_FILTERING = 979;
    static readonly NOFORCE = 980;
    static readonly NO_FULL_OUTER_JOIN_TO_OUTER = 981;
    static readonly NO_GATHER_OPTIMIZER_STATISTICS = 982;
    static readonly NO_GBY_PUSHDOWN = 983;
    static readonly NOGUARANTEE = 984;
    static readonly NO_INDEX_FFS = 985;
    static readonly NO_INDEX = 986;
    static readonly NO_INDEX_SS = 987;
    static readonly NO_INMEMORY = 988;
    static readonly NO_INMEMORY_PRUNING = 989;
    static readonly NOKEEP = 990;
    static readonly NO_LOAD = 991;
    static readonly NOLOCAL = 992;
    static readonly NOLOGGING = 993;
    static readonly NOMAPPING = 994;
    static readonly NOMAXVALUE = 995;
    static readonly NO_MERGE = 996;
    static readonly NOMINIMIZE = 997;
    static readonly NOMINVALUE = 998;
    static readonly NO_MODEL_PUSH_REF = 999;
    static readonly NO_MONITORING = 1000;
    static readonly NOMONITORING = 1001;
    static readonly NO_MONITOR = 1002;
    static readonly NO_MULTIMV_REWRITE = 1003;
    static readonly NO_NATIVE_FULL_OUTER_JOIN = 1004;
    static readonly NONBLOCKING = 1005;
    static readonly NONEDITIONABLE = 1006;
    static readonly NONE = 1007;
    static readonly NO_NLJ_BATCHING = 1008;
    static readonly NO_NLJ_PREFETCH = 1009;
    static readonly NO = 1010;
    static readonly NONSCHEMA = 1011;
    static readonly NO_OBJECT_LINK = 1012;
    static readonly NOORDER = 1013;
    static readonly NO_ORDER_ROLLUPS = 1014;
    static readonly NO_OUTER_JOIN_TO_ANTI = 1015;
    static readonly NO_OUTER_JOIN_TO_INNER = 1016;
    static readonly NOOVERRIDE = 1017;
    static readonly NO_PARALLEL_INDEX = 1018;
    static readonly NOPARALLEL_INDEX = 1019;
    static readonly NO_PARALLEL = 1020;
    static readonly NOPARALLEL = 1021;
    static readonly NO_PARTIAL_COMMIT = 1022;
    static readonly NO_PARTIAL_JOIN = 1023;
    static readonly NO_PARTIAL_ROLLUP_PUSHDOWN = 1024;
    static readonly NOPARTITION = 1025;
    static readonly NO_PLACE_DISTINCT = 1026;
    static readonly NO_PLACE_GROUP_BY = 1027;
    static readonly NO_PQ_CONCURRENT_UNION = 1028;
    static readonly NO_PQ_MAP = 1029;
    static readonly NO_PQ_REPLICATE = 1030;
    static readonly NO_PQ_SKEW = 1031;
    static readonly NO_PRUNE_GSETS = 1032;
    static readonly NO_PULL_PRED = 1033;
    static readonly NO_PUSH_PRED = 1034;
    static readonly NO_PUSH_SUBQ = 1035;
    static readonly NO_PX_FAULT_TOLERANCE = 1036;
    static readonly NO_PX_JOIN_FILTER = 1037;
    static readonly NO_QKN_BUFF = 1038;
    static readonly NO_QUERY_TRANSFORMATION = 1039;
    static readonly NO_REF_CASCADE = 1040;
    static readonly NORELOCATE = 1041;
    static readonly NORELY = 1042;
    static readonly NOREPAIR = 1043;
    static readonly NOREPLAY = 1044;
    static readonly NORESETLOGS = 1045;
    static readonly NO_RESULT_CACHE = 1046;
    static readonly NOREVERSE = 1047;
    static readonly NO_REWRITE = 1048;
    static readonly NOREWRITE = 1049;
    static readonly NORMAL = 1050;
    static readonly NO_ROOT_SW_FOR_LOCAL = 1051;
    static readonly NOROWDEPENDENCIES = 1052;
    static readonly NOSCHEMACHECK = 1053;
    static readonly NOSEGMENT = 1054;
    static readonly NO_SEMIJOIN = 1055;
    static readonly NO_SEMI_TO_INNER = 1056;
    static readonly NO_SET_TO_JOIN = 1057;
    static readonly NOSORT = 1058;
    static readonly NO_SQL_TRANSLATION = 1059;
    static readonly NO_SQL_TUNE = 1060;
    static readonly NO_STAR_TRANSFORMATION = 1061;
    static readonly NO_STATEMENT_QUEUING = 1062;
    static readonly NO_STATS_GSETS = 1063;
    static readonly NOSTRICT = 1064;
    static readonly NO_SUBQUERY_PRUNING = 1065;
    static readonly NO_SUBSTRB_PAD = 1066;
    static readonly NO_SWAP_JOIN_INPUTS = 1067;
    static readonly NOSWITCH = 1068;
    static readonly NO_TABLE_LOOKUP_BY_NL = 1069;
    static readonly NO_TEMP_TABLE = 1070;
    static readonly NOTHING = 1071;
    static readonly NOTIFICATION = 1072;
    static readonly NOT = 1073;
    static readonly NO_TRANSFORM_DISTINCT_AGG = 1074;
    static readonly NO_UNNEST = 1075;
    static readonly NO_USE_CUBE = 1076;
    static readonly NO_USE_HASH_AGGREGATION = 1077;
    static readonly NO_USE_HASH_GBY_FOR_PUSHDOWN = 1078;
    static readonly NO_USE_HASH = 1079;
    static readonly NO_USE_INVISIBLE_INDEXES = 1080;
    static readonly NO_USE_MERGE = 1081;
    static readonly NO_USE_NL = 1082;
    static readonly NO_USE_VECTOR_AGGREGATION = 1083;
    static readonly NOVALIDATE = 1084;
    static readonly NO_VECTOR_TRANSFORM_DIMS = 1085;
    static readonly NO_VECTOR_TRANSFORM_FACT = 1086;
    static readonly NO_VECTOR_TRANSFORM = 1087;
    static readonly NOWAIT = 1088;
    static readonly NO_XDB_FASTPATH_INSERT = 1089;
    static readonly NO_XML_DML_REWRITE = 1090;
    static readonly NO_XMLINDEX_REWRITE_IN_SELECT = 1091;
    static readonly NO_XMLINDEX_REWRITE = 1092;
    static readonly NO_XML_QUERY_REWRITE = 1093;
    static readonly NO_ZONEMAP = 1094;
    static readonly NTH_VALUE = 1095;
    static readonly NULLIF = 1096;
    static readonly NULL_ = 1097;
    static readonly NULLS = 1098;
    static readonly NUMBER = 1099;
    static readonly NUMERIC = 1100;
    static readonly NUM_INDEX_KEYS = 1101;
    static readonly NUMTODSINTERVAL = 1102;
    static readonly NUMTOYMINTERVAL = 1103;
    static readonly NVARCHAR2 = 1104;
    static readonly NVL2 = 1105;
    static readonly OBJECT2XML = 1106;
    static readonly OBJECT = 1107;
    static readonly OBJ_ID = 1108;
    static readonly OBJNO = 1109;
    static readonly OBJNO_REUSE = 1110;
    static readonly OCCURENCES = 1111;
    static readonly OFFLINE = 1112;
    static readonly OFF = 1113;
    static readonly OFFSET = 1114;
    static readonly OF = 1115;
    static readonly OIDINDEX = 1116;
    static readonly OID = 1117;
    static readonly OLAP = 1118;
    static readonly OLD = 1119;
    static readonly OLD_PUSH_PRED = 1120;
    static readonly OLS = 1121;
    static readonly OLTP = 1122;
    static readonly OMIT = 1123;
    static readonly ONE = 1124;
    static readonly ONLINE = 1125;
    static readonly ONLINELOG = 1126;
    static readonly ONLY = 1127;
    static readonly ON = 1128;
    static readonly OPAQUE = 1129;
    static readonly OPAQUE_TRANSFORM = 1130;
    static readonly OPAQUE_XCANONICAL = 1131;
    static readonly OPCODE = 1132;
    static readonly OPEN = 1133;
    static readonly OPERATIONS = 1134;
    static readonly OPERATOR = 1135;
    static readonly OPT_ESTIMATE = 1136;
    static readonly OPTIMAL = 1137;
    static readonly OPTIMIZE = 1138;
    static readonly OPTIMIZER_FEATURES_ENABLE = 1139;
    static readonly OPTIMIZER_GOAL = 1140;
    static readonly OPTION = 1141;
    static readonly OPT_PARAM = 1142;
    static readonly ORA_BRANCH = 1143;
    static readonly ORA_CHECK_ACL = 1144;
    static readonly ORA_CHECK_PRIVILEGE = 1145;
    static readonly ORA_CLUSTERING = 1146;
    static readonly ORADATA = 1147;
    static readonly ORADEBUG = 1148;
    static readonly ORA_DST_AFFECTED = 1149;
    static readonly ORA_DST_CONVERT = 1150;
    static readonly ORA_DST_ERROR = 1151;
    static readonly ORA_GET_ACLIDS = 1152;
    static readonly ORA_GET_PRIVILEGES = 1153;
    static readonly ORA_HASH = 1154;
    static readonly ORA_INVOKING_USERID = 1155;
    static readonly ORA_INVOKING_USER = 1156;
    static readonly ORA_INVOKING_XS_USER_GUID = 1157;
    static readonly ORA_INVOKING_XS_USER = 1158;
    static readonly ORA_RAWCOMPARE = 1159;
    static readonly ORA_RAWCONCAT = 1160;
    static readonly ORA_ROWSCN = 1161;
    static readonly ORA_ROWSCN_RAW = 1162;
    static readonly ORA_ROWVERSION = 1163;
    static readonly ORA_TABVERSION = 1164;
    static readonly ORA_WRITE_TIME = 1165;
    static readonly ORDERED = 1166;
    static readonly ORDERED_PREDICATES = 1167;
    static readonly ORDER = 1168;
    static readonly ORDINALITY = 1169;
    static readonly OR_EXPAND = 1170;
    static readonly ORGANIZATION = 1171;
    static readonly OR = 1172;
    static readonly OR_PREDICATES = 1173;
    static readonly OSERROR = 1174;
    static readonly OTHER = 1175;
    static readonly OUTER_JOIN_TO_ANTI = 1176;
    static readonly OUTER_JOIN_TO_INNER = 1177;
    static readonly OUTER = 1178;
    static readonly OUTLINE_LEAF = 1179;
    static readonly OUTLINE = 1180;
    static readonly OUT_OF_LINE = 1181;
    static readonly OUT = 1182;
    static readonly OVERFLOW_NOMOVE = 1183;
    static readonly OVERFLOW = 1184;
    static readonly OVERLAPS = 1185;
    static readonly OVER = 1186;
    static readonly OVERRIDING = 1187;
    static readonly OWNER = 1188;
    static readonly OWNERSHIP = 1189;
    static readonly OWN = 1190;
    static readonly PACKAGE = 1191;
    static readonly PACKAGES = 1192;
    static readonly PARALLEL_ENABLE = 1193;
    static readonly PARALLEL_INDEX = 1194;
    static readonly PARALLEL = 1195;
    static readonly PARAMETERFILE = 1196;
    static readonly PARAMETERS = 1197;
    static readonly PARAM = 1198;
    static readonly PARENT = 1199;
    static readonly PARITY = 1200;
    static readonly PARTIAL_JOIN = 1201;
    static readonly PARTIALLY = 1202;
    static readonly PARTIAL = 1203;
    static readonly PARTIAL_ROLLUP_PUSHDOWN = 1204;
    static readonly PARTITION_HASH = 1205;
    static readonly PARTITION_LIST = 1206;
    static readonly PARTITION = 1207;
    static readonly PARTITION_RANGE = 1208;
    static readonly PARTITIONS = 1209;
    static readonly PARTNUMINST = 1210;
    static readonly PASSING = 1211;
    static readonly PASSWORD_GRACE_TIME = 1212;
    static readonly PASSWORD_LIFE_TIME = 1213;
    static readonly PASSWORD_LOCK_TIME = 1214;
    static readonly PASSWORD = 1215;
    static readonly PASSWORD_REUSE_MAX = 1216;
    static readonly PASSWORD_REUSE_TIME = 1217;
    static readonly PASSWORD_VERIFY_FUNCTION = 1218;
    static readonly PAST = 1219;
    static readonly PATCH = 1220;
    static readonly PATH = 1221;
    static readonly PATH_PREFIX = 1222;
    static readonly PATHS = 1223;
    static readonly PATTERN = 1224;
    static readonly PBL_HS_BEGIN = 1225;
    static readonly PBL_HS_END = 1226;
    static readonly PCTFREE = 1227;
    static readonly PCTINCREASE = 1228;
    static readonly PCTTHRESHOLD = 1229;
    static readonly PCTUSED = 1230;
    static readonly PCTVERSION = 1231;
    static readonly PENDING = 1232;
    static readonly PERCENT_FOUND = 1233;
    static readonly PERCENT_ISOPEN = 1234;
    static readonly PERCENT_NOTFOUND = 1235;
    static readonly PERCENT_KEYWORD = 1236;
    static readonly PERCENT_RANKM = 1237;
    static readonly PERCENT_ROWCOUNT = 1238;
    static readonly PERCENT_ROWTYPE = 1239;
    static readonly PERCENT_TYPE = 1240;
    static readonly PERFORMANCE = 1241;
    static readonly PERIOD_KEYWORD = 1242;
    static readonly PERMANENT = 1243;
    static readonly PERMISSION = 1244;
    static readonly PERMUTE = 1245;
    static readonly PER = 1246;
    static readonly PFILE = 1247;
    static readonly PHYSICAL = 1248;
    static readonly PIKEY = 1249;
    static readonly PIPELINED = 1250;
    static readonly PIPE = 1251;
    static readonly PIV_GB = 1252;
    static readonly PIVOT = 1253;
    static readonly PIV_SSF = 1254;
    static readonly PLACE_DISTINCT = 1255;
    static readonly PLACE_GROUP_BY = 1256;
    static readonly PLAN = 1257;
    static readonly PLSCOPE_SETTINGS = 1258;
    static readonly PLS_INTEGER = 1259;
    static readonly PLSQL_CCFLAGS = 1260;
    static readonly PLSQL_CODE_TYPE = 1261;
    static readonly PLSQL_DEBUG = 1262;
    static readonly PLSQL_OPTIMIZE_LEVEL = 1263;
    static readonly PLSQL_WARNINGS = 1264;
    static readonly PLUGGABLE = 1265;
    static readonly POINT = 1266;
    static readonly POLICY = 1267;
    static readonly POOL_16K = 1268;
    static readonly POOL_2K = 1269;
    static readonly POOL_32K = 1270;
    static readonly POOL_4K = 1271;
    static readonly POOL_8K = 1272;
    static readonly POSITIVEN = 1273;
    static readonly POSITIVE = 1274;
    static readonly POST_TRANSACTION = 1275;
    static readonly POWERMULTISET_BY_CARDINALITY = 1276;
    static readonly POWERMULTISET = 1277;
    static readonly POWER = 1278;
    static readonly PQ_CONCURRENT_UNION = 1279;
    static readonly PQ_DISTRIBUTE = 1280;
    static readonly PQ_DISTRIBUTE_WINDOW = 1281;
    static readonly PQ_FILTER = 1282;
    static readonly PQ_MAP = 1283;
    static readonly PQ_NOMAP = 1284;
    static readonly PQ_REPLICATE = 1285;
    static readonly PQ_SKEW = 1286;
    static readonly PRAGMA = 1287;
    static readonly PREBUILT = 1288;
    static readonly PRECEDES = 1289;
    static readonly PRECEDING = 1290;
    static readonly PRECISION = 1291;
    static readonly PRECOMPUTE_SUBQUERY = 1292;
    static readonly PREDICATE_REORDERS = 1293;
    static readonly PRELOAD = 1294;
    static readonly PREPARE = 1295;
    static readonly PRESENTNNV = 1296;
    static readonly PRESENT = 1297;
    static readonly PRESENTV = 1298;
    static readonly PRESERVE_OID = 1299;
    static readonly PRESERVE = 1300;
    static readonly PRETTY = 1301;
    static readonly PREVIOUS = 1302;
    static readonly PREV = 1303;
    static readonly PRIMARY = 1304;
    static readonly PRINTBLOBTOCLOB = 1305;
    static readonly PRIORITY = 1306;
    static readonly PRIOR = 1307;
    static readonly PRIVATE = 1308;
    static readonly PRIVATE_SGA = 1309;
    static readonly PRIVILEGED = 1310;
    static readonly PRIVILEGE = 1311;
    static readonly PRIVILEGES = 1312;
    static readonly PROCEDURAL = 1313;
    static readonly PROCEDURE = 1314;
    static readonly PROCESS = 1315;
    static readonly PROFILE = 1316;
    static readonly PROGRAM = 1317;
    static readonly PROJECT = 1318;
    static readonly PROPAGATE = 1319;
    static readonly PROTECTED = 1320;
    static readonly PROTECTION = 1321;
    static readonly PROXY = 1322;
    static readonly PRUNING = 1323;
    static readonly PUBLIC = 1324;
    static readonly PULL_PRED = 1325;
    static readonly PURGE = 1326;
    static readonly PUSH_PRED = 1327;
    static readonly PUSH_SUBQ = 1328;
    static readonly PX_FAULT_TOLERANCE = 1329;
    static readonly PX_GRANULE = 1330;
    static readonly PX_JOIN_FILTER = 1331;
    static readonly QB_NAME = 1332;
    static readonly QUERY_BLOCK = 1333;
    static readonly QUERY = 1334;
    static readonly QUEUE_CURR = 1335;
    static readonly QUEUE = 1336;
    static readonly QUEUE_ROWP = 1337;
    static readonly QUIESCE = 1338;
    static readonly QUORUM = 1339;
    static readonly QUOTA = 1340;
    static readonly RAISE = 1341;
    static readonly RANDOM_LOCAL = 1342;
    static readonly RANDOM = 1343;
    static readonly RANGE = 1344;
    static readonly RANKM = 1345;
    static readonly RAPIDLY = 1346;
    static readonly RAW = 1347;
    static readonly RAWTOHEX = 1348;
    static readonly RAWTONHEX = 1349;
    static readonly RBA = 1350;
    static readonly RBO_OUTLINE = 1351;
    static readonly RDBA = 1352;
    static readonly READ = 1353;
    static readonly READS = 1354;
    static readonly REALM = 1355;
    static readonly REAL = 1356;
    static readonly REBALANCE = 1357;
    static readonly REBUILD = 1358;
    static readonly RECORD = 1359;
    static readonly RECORDS_PER_BLOCK = 1360;
    static readonly RECOVERABLE = 1361;
    static readonly RECOVER = 1362;
    static readonly RECOVERY = 1363;
    static readonly RECYCLEBIN = 1364;
    static readonly RECYCLE = 1365;
    static readonly REDACTION = 1366;
    static readonly REDEFINE = 1367;
    static readonly REDO = 1368;
    static readonly REDUCED = 1369;
    static readonly REDUNDANCY = 1370;
    static readonly REF_CASCADE_CURSOR = 1371;
    static readonly REFERENCED = 1372;
    static readonly REFERENCE = 1373;
    static readonly REFERENCES = 1374;
    static readonly REFERENCING = 1375;
    static readonly REF = 1376;
    static readonly REFRESH = 1377;
    static readonly REFTOHEX = 1378;
    static readonly REGEXP_COUNT = 1379;
    static readonly REGEXP_INSTR = 1380;
    static readonly REGEXP_LIKE = 1381;
    static readonly REGEXP_REPLACE = 1382;
    static readonly REGEXP_SUBSTR = 1383;
    static readonly REGISTER = 1384;
    static readonly REGR_AVGX = 1385;
    static readonly REGR_AVGY = 1386;
    static readonly REGR_COUNT = 1387;
    static readonly REGR_INTERCEPT = 1388;
    static readonly REGR_R2 = 1389;
    static readonly REGR_SLOPE = 1390;
    static readonly REGR_SXX = 1391;
    static readonly REGR_SXY = 1392;
    static readonly REGR_SYY = 1393;
    static readonly REGULAR = 1394;
    static readonly REJECT = 1395;
    static readonly REKEY = 1396;
    static readonly RELATIONAL = 1397;
    static readonly RELIES_ON = 1398;
    static readonly RELOCATE = 1399;
    static readonly RELY = 1400;
    static readonly REMAINDER = 1401;
    static readonly REMOTE_MAPPED = 1402;
    static readonly REMOVE = 1403;
    static readonly RENAME = 1404;
    static readonly REPAIR = 1405;
    static readonly REPEAT = 1406;
    static readonly REPLACE = 1407;
    static readonly REPLICATION = 1408;
    static readonly REQUIRED = 1409;
    static readonly RESETLOGS = 1410;
    static readonly RESET = 1411;
    static readonly RESIZE = 1412;
    static readonly RESOLVE = 1413;
    static readonly RESOLVER = 1414;
    static readonly RESOURCE = 1415;
    static readonly RESPECT = 1416;
    static readonly RESTART = 1417;
    static readonly RESTORE_AS_INTERVALS = 1418;
    static readonly RESTORE = 1419;
    static readonly RESTRICT_ALL_REF_CONS = 1420;
    static readonly RESTRICTED = 1421;
    static readonly RESTRICT_REFERENCES = 1422;
    static readonly RESTRICT = 1423;
    static readonly RESULT_CACHE = 1424;
    static readonly RESULT = 1425;
    static readonly RESUMABLE = 1426;
    static readonly RESUME = 1427;
    static readonly RETENTION = 1428;
    static readonly RETRY_ON_ROW_CHANGE = 1429;
    static readonly RETURNING = 1430;
    static readonly RETURN = 1431;
    static readonly REUSE = 1432;
    static readonly REVERSE = 1433;
    static readonly REVOKE = 1434;
    static readonly REWRITE_OR_ERROR = 1435;
    static readonly REWRITE = 1436;
    static readonly RIGHT = 1437;
    static readonly ROLE = 1438;
    static readonly ROLESET = 1439;
    static readonly ROLES = 1440;
    static readonly ROLLBACK = 1441;
    static readonly ROLLING = 1442;
    static readonly ROLLUP = 1443;
    static readonly ROWDEPENDENCIES = 1444;
    static readonly ROWID_MAPPING_TABLE = 1445;
    static readonly ROWID = 1446;
    static readonly ROWIDTOCHAR = 1447;
    static readonly ROWIDTONCHAR = 1448;
    static readonly ROW_LENGTH = 1449;
    static readonly ROWNUM = 1450;
    static readonly ROW = 1451;
    static readonly ROWS = 1452;
    static readonly RPAD = 1453;
    static readonly RTRIM = 1454;
    static readonly RULE = 1455;
    static readonly RULES = 1456;
    static readonly RUNNING = 1457;
    static readonly SALT = 1458;
    static readonly SAMPLE = 1459;
    static readonly SAVE_AS_INTERVALS = 1460;
    static readonly SAVEPOINT = 1461;
    static readonly SAVE = 1462;
    static readonly SB4 = 1463;
    static readonly SCALE_ROWS = 1464;
    static readonly SCALE = 1465;
    static readonly SCAN_INSTANCES = 1466;
    static readonly SCAN = 1467;
    static readonly SCHEDULER = 1468;
    static readonly SCHEMACHECK = 1469;
    static readonly SCHEMA = 1470;
    static readonly SCN_ASCENDING = 1471;
    static readonly SCN = 1472;
    static readonly SCOPE = 1473;
    static readonly SCRUB = 1474;
    static readonly SD_ALL = 1475;
    static readonly SD_INHIBIT = 1476;
    static readonly SDO_GEOM_MBR = 1477;
    static readonly SD_SHOW = 1478;
    static readonly SEARCH = 1479;
    static readonly SECOND = 1480;
    static readonly SECRET = 1481;
    static readonly SECUREFILE_DBA = 1482;
    static readonly SECUREFILE = 1483;
    static readonly SECURITY = 1484;
    static readonly SEED = 1485;
    static readonly SEG_BLOCK = 1486;
    static readonly SEG_FILE = 1487;
    static readonly SEGMENT = 1488;
    static readonly SELECTIVITY = 1489;
    static readonly SELECT = 1490;
    static readonly SELF = 1491;
    static readonly SEMIJOIN_DRIVER = 1492;
    static readonly SEMIJOIN = 1493;
    static readonly SEMI_TO_INNER = 1494;
    static readonly SEQUENCED = 1495;
    static readonly SEQUENCE = 1496;
    static readonly SEQUENTIAL = 1497;
    static readonly SEQ = 1498;
    static readonly SERIALIZABLE = 1499;
    static readonly SERIALLY_REUSABLE = 1500;
    static readonly SERIAL = 1501;
    static readonly SERVERERROR = 1502;
    static readonly SERVICE_NAME_CONVERT = 1503;
    static readonly SERVICES = 1504;
    static readonly SESSION_CACHED_CURSORS = 1505;
    static readonly SESSION = 1506;
    static readonly SESSIONS_PER_USER = 1507;
    static readonly SESSIONTIMEZONE = 1508;
    static readonly SESSIONTZNAME = 1509;
    static readonly SET = 1510;
    static readonly SETS = 1511;
    static readonly SETTINGS = 1512;
    static readonly SET_TO_JOIN = 1513;
    static readonly SEVERE = 1514;
    static readonly SHARED_POOL = 1515;
    static readonly SHARED = 1516;
    static readonly SHARE = 1517;
    static readonly SHARING = 1518;
    static readonly SHELFLIFE = 1519;
    static readonly SHOW = 1520;
    static readonly SHRINK = 1521;
    static readonly SHUTDOWN = 1522;
    static readonly SIBLINGS = 1523;
    static readonly SID = 1524;
    static readonly SIGNAL_COMPONENT = 1525;
    static readonly SIGNAL_FUNCTION = 1526;
    static readonly SIGN = 1527;
    static readonly SIGNTYPE = 1528;
    static readonly SIMPLE_INTEGER = 1529;
    static readonly SIMPLE = 1530;
    static readonly SINGLE = 1531;
    static readonly SINGLETASK = 1532;
    static readonly SINH = 1533;
    static readonly SIN = 1534;
    static readonly SIZE = 1535;
    static readonly SKIP_EXT_OPTIMIZER = 1536;
    static readonly SKIP_ = 1537;
    static readonly SKIP_UNQ_UNUSABLE_IDX = 1538;
    static readonly SKIP_UNUSABLE_INDEXES = 1539;
    static readonly SMALLFILE = 1540;
    static readonly SMALLINT = 1541;
    static readonly SNAPSHOT = 1542;
    static readonly SOME = 1543;
    static readonly SORT = 1544;
    static readonly SOUNDEX = 1545;
    static readonly SOURCE_FILE_DIRECTORY = 1546;
    static readonly SOURCE_FILE_NAME_CONVERT = 1547;
    static readonly SOURCE = 1548;
    static readonly SPACE_KEYWORD = 1549;
    static readonly SPECIFICATION = 1550;
    static readonly SPFILE = 1551;
    static readonly SPLIT = 1552;
    static readonly SPREADSHEET = 1553;
    static readonly SQLDATA = 1554;
    static readonly SQLERROR = 1555;
    static readonly SQLLDR = 1556;
    static readonly SQL = 1557;
    static readonly SQL_TRACE = 1558;
    static readonly SQL_TRANSLATION_PROFILE = 1559;
    static readonly SQRT = 1560;
    static readonly STALE = 1561;
    static readonly STANDALONE = 1562;
    static readonly STANDARD_HASH = 1563;
    static readonly STANDBY_MAX_DATA_DELAY = 1564;
    static readonly STANDBYS = 1565;
    static readonly STANDBY = 1566;
    static readonly STAR = 1567;
    static readonly STAR_TRANSFORMATION = 1568;
    static readonly START = 1569;
    static readonly STARTUP = 1570;
    static readonly STATEMENT_ID = 1571;
    static readonly STATEMENT_QUEUING = 1572;
    static readonly STATEMENTS = 1573;
    static readonly STATEMENT = 1574;
    static readonly STATE = 1575;
    static readonly STATIC = 1576;
    static readonly STATISTICS = 1577;
    static readonly STATS_BINOMIAL_TEST = 1578;
    static readonly STATS_CROSSTAB = 1579;
    static readonly STATS_F_TEST = 1580;
    static readonly STATS_KS_TEST = 1581;
    static readonly STATS_MODE = 1582;
    static readonly STATS_MW_TEST = 1583;
    static readonly STATS_ONE_WAY_ANOVA = 1584;
    static readonly STATS_T_TEST_INDEP = 1585;
    static readonly STATS_T_TEST_INDEPU = 1586;
    static readonly STATS_T_TEST_ONE = 1587;
    static readonly STATS_T_TEST_PAIRED = 1588;
    static readonly STATS_WSR_TEST = 1589;
    static readonly STDDEV_POP = 1590;
    static readonly STDDEV_SAMP = 1591;
    static readonly STOP = 1592;
    static readonly STORAGE = 1593;
    static readonly STORE = 1594;
    static readonly STREAMS = 1595;
    static readonly STREAM = 1596;
    static readonly STRICT = 1597;
    static readonly STRING = 1598;
    static readonly STRIPE_COLUMNS = 1599;
    static readonly STRIPE_WIDTH = 1600;
    static readonly STRIP = 1601;
    static readonly STRUCTURE = 1602;
    static readonly SUBMULTISET = 1603;
    static readonly SUBPARTITION_REL = 1604;
    static readonly SUBPARTITIONS = 1605;
    static readonly SUBPARTITION = 1606;
    static readonly SUBQUERIES = 1607;
    static readonly SUBQUERY_PRUNING = 1608;
    static readonly SUBSCRIBE = 1609;
    static readonly SUBSET = 1610;
    static readonly SUBSTITUTABLE = 1611;
    static readonly SUBSTR2 = 1612;
    static readonly SUBSTR4 = 1613;
    static readonly SUBSTRB = 1614;
    static readonly SUBSTRC = 1615;
    static readonly SUBTYPE = 1616;
    static readonly SUCCESSFUL = 1617;
    static readonly SUCCESS = 1618;
    static readonly SUMMARY = 1619;
    static readonly SUPPLEMENTAL = 1620;
    static readonly SUSPEND = 1621;
    static readonly SWAP_JOIN_INPUTS = 1622;
    static readonly SWITCHOVER = 1623;
    static readonly SWITCH = 1624;
    static readonly SYNCHRONOUS = 1625;
    static readonly SYNC = 1626;
    static readonly SYNONYM = 1627;
    static readonly SYSASM = 1628;
    static readonly SYS_AUDIT = 1629;
    static readonly SYSAUX = 1630;
    static readonly SYSBACKUP = 1631;
    static readonly SYS_CHECKACL = 1632;
    static readonly SYS_CHECK_PRIVILEGE = 1633;
    static readonly SYS_CONNECT_BY_PATH = 1634;
    static readonly SYS_CONTEXT = 1635;
    static readonly SYSDATE = 1636;
    static readonly SYSDBA = 1637;
    static readonly SYS_DBURIGEN = 1638;
    static readonly SYSDG = 1639;
    static readonly SYS_DL_CURSOR = 1640;
    static readonly SYS_DM_RXFORM_CHR = 1641;
    static readonly SYS_DM_RXFORM_NUM = 1642;
    static readonly SYS_DOM_COMPARE = 1643;
    static readonly SYS_DST_PRIM2SEC = 1644;
    static readonly SYS_DST_SEC2PRIM = 1645;
    static readonly SYS_ET_BFILE_TO_RAW = 1646;
    static readonly SYS_ET_BLOB_TO_IMAGE = 1647;
    static readonly SYS_ET_IMAGE_TO_BLOB = 1648;
    static readonly SYS_ET_RAW_TO_BFILE = 1649;
    static readonly SYS_EXTPDTXT = 1650;
    static readonly SYS_EXTRACT_UTC = 1651;
    static readonly SYS_FBT_INSDEL = 1652;
    static readonly SYS_FILTER_ACLS = 1653;
    static readonly SYS_FNMATCHES = 1654;
    static readonly SYS_FNREPLACE = 1655;
    static readonly SYS_GET_ACLIDS = 1656;
    static readonly SYS_GET_COL_ACLIDS = 1657;
    static readonly SYS_GET_PRIVILEGES = 1658;
    static readonly SYS_GETTOKENID = 1659;
    static readonly SYS_GETXTIVAL = 1660;
    static readonly SYS_GUID = 1661;
    static readonly SYSGUID = 1662;
    static readonly SYSKM = 1663;
    static readonly SYS_MAKE_XMLNODEID = 1664;
    static readonly SYS_MAKEXML = 1665;
    static readonly SYS_MKXMLATTR = 1666;
    static readonly SYS_MKXTI = 1667;
    static readonly SYSOBJ = 1668;
    static readonly SYS_OP_ADT2BIN = 1669;
    static readonly SYS_OP_ADTCONS = 1670;
    static readonly SYS_OP_ALSCRVAL = 1671;
    static readonly SYS_OP_ATG = 1672;
    static readonly SYS_OP_BIN2ADT = 1673;
    static readonly SYS_OP_BITVEC = 1674;
    static readonly SYS_OP_BL2R = 1675;
    static readonly SYS_OP_BLOOM_FILTER_LIST = 1676;
    static readonly SYS_OP_BLOOM_FILTER = 1677;
    static readonly SYS_OP_C2C = 1678;
    static readonly SYS_OP_CAST = 1679;
    static readonly SYS_OP_CEG = 1680;
    static readonly SYS_OP_CL2C = 1681;
    static readonly SYS_OP_COMBINED_HASH = 1682;
    static readonly SYS_OP_COMP = 1683;
    static readonly SYS_OP_CONVERT = 1684;
    static readonly SYS_OP_COUNTCHG = 1685;
    static readonly SYS_OP_CSCONV = 1686;
    static readonly SYS_OP_CSCONVTEST = 1687;
    static readonly SYS_OP_CSR = 1688;
    static readonly SYS_OP_CSX_PATCH = 1689;
    static readonly SYS_OP_CYCLED_SEQ = 1690;
    static readonly SYS_OP_DECOMP = 1691;
    static readonly SYS_OP_DESCEND = 1692;
    static readonly SYS_OP_DISTINCT = 1693;
    static readonly SYS_OP_DRA = 1694;
    static readonly SYS_OP_DUMP = 1695;
    static readonly SYS_OP_DV_CHECK = 1696;
    static readonly SYS_OP_ENFORCE_NOT_NULL = 1697;
    static readonly SYSOPER = 1698;
    static readonly SYS_OP_EXTRACT = 1699;
    static readonly SYS_OP_GROUPING = 1700;
    static readonly SYS_OP_GUID = 1701;
    static readonly SYS_OP_HASH = 1702;
    static readonly SYS_OP_IIX = 1703;
    static readonly SYS_OP_ITR = 1704;
    static readonly SYS_OP_KEY_VECTOR_CREATE = 1705;
    static readonly SYS_OP_KEY_VECTOR_FILTER_LIST = 1706;
    static readonly SYS_OP_KEY_VECTOR_FILTER = 1707;
    static readonly SYS_OP_KEY_VECTOR_SUCCEEDED = 1708;
    static readonly SYS_OP_KEY_VECTOR_USE = 1709;
    static readonly SYS_OP_LBID = 1710;
    static readonly SYS_OP_LOBLOC2BLOB = 1711;
    static readonly SYS_OP_LOBLOC2CLOB = 1712;
    static readonly SYS_OP_LOBLOC2ID = 1713;
    static readonly SYS_OP_LOBLOC2NCLOB = 1714;
    static readonly SYS_OP_LOBLOC2TYP = 1715;
    static readonly SYS_OP_LSVI = 1716;
    static readonly SYS_OP_LVL = 1717;
    static readonly SYS_OP_MAKEOID = 1718;
    static readonly SYS_OP_MAP_NONNULL = 1719;
    static readonly SYS_OP_MSR = 1720;
    static readonly SYS_OP_NICOMBINE = 1721;
    static readonly SYS_OP_NIEXTRACT = 1722;
    static readonly SYS_OP_NII = 1723;
    static readonly SYS_OP_NIX = 1724;
    static readonly SYS_OP_NOEXPAND = 1725;
    static readonly SYS_OP_NTCIMG = 1726;
    static readonly SYS_OP_NUMTORAW = 1727;
    static readonly SYS_OP_OIDVALUE = 1728;
    static readonly SYS_OP_OPNSIZE = 1729;
    static readonly SYS_OP_PAR_1 = 1730;
    static readonly SYS_OP_PARGID_1 = 1731;
    static readonly SYS_OP_PARGID = 1732;
    static readonly SYS_OP_PAR = 1733;
    static readonly SYS_OP_PART_ID = 1734;
    static readonly SYS_OP_PIVOT = 1735;
    static readonly SYS_OP_R2O = 1736;
    static readonly SYS_OP_RAWTONUM = 1737;
    static readonly SYS_OP_RDTM = 1738;
    static readonly SYS_OP_REF = 1739;
    static readonly SYS_OP_RMTD = 1740;
    static readonly SYS_OP_ROWIDTOOBJ = 1741;
    static readonly SYS_OP_RPB = 1742;
    static readonly SYS_OPTLOBPRBSC = 1743;
    static readonly SYS_OP_TOSETID = 1744;
    static readonly SYS_OP_TPR = 1745;
    static readonly SYS_OP_TRTB = 1746;
    static readonly SYS_OPTXICMP = 1747;
    static readonly SYS_OPTXQCASTASNQ = 1748;
    static readonly SYS_OP_UNDESCEND = 1749;
    static readonly SYS_OP_VECAND = 1750;
    static readonly SYS_OP_VECBIT = 1751;
    static readonly SYS_OP_VECOR = 1752;
    static readonly SYS_OP_VECXOR = 1753;
    static readonly SYS_OP_VERSION = 1754;
    static readonly SYS_OP_VREF = 1755;
    static readonly SYS_OP_VVD = 1756;
    static readonly SYS_OP_XMLCONS_FOR_CSX = 1757;
    static readonly SYS_OP_XPTHATG = 1758;
    static readonly SYS_OP_XPTHIDX = 1759;
    static readonly SYS_OP_XPTHOP = 1760;
    static readonly SYS_OP_XTXT2SQLT = 1761;
    static readonly SYS_OP_ZONE_ID = 1762;
    static readonly SYS_ORDERKEY_DEPTH = 1763;
    static readonly SYS_ORDERKEY_MAXCHILD = 1764;
    static readonly SYS_ORDERKEY_PARENT = 1765;
    static readonly SYS_PARALLEL_TXN = 1766;
    static readonly SYS_PATHID_IS_ATTR = 1767;
    static readonly SYS_PATHID_IS_NMSPC = 1768;
    static readonly SYS_PATHID_LASTNAME = 1769;
    static readonly SYS_PATHID_LASTNMSPC = 1770;
    static readonly SYS_PATH_REVERSE = 1771;
    static readonly SYS_PXQEXTRACT = 1772;
    static readonly SYS_RAW_TO_XSID = 1773;
    static readonly SYS_RID_ORDER = 1774;
    static readonly SYS_ROW_DELTA = 1775;
    static readonly SYS_SC_2_XMLT = 1776;
    static readonly SYS_SYNRCIREDO = 1777;
    static readonly SYSTEM_DEFINED = 1778;
    static readonly SYSTEM = 1779;
    static readonly SYSTIMESTAMP = 1780;
    static readonly SYS_TYPEID = 1781;
    static readonly SYS_UMAKEXML = 1782;
    static readonly SYS_XMLANALYZE = 1783;
    static readonly SYS_XMLCONTAINS = 1784;
    static readonly SYS_XMLCONV = 1785;
    static readonly SYS_XMLEXNSURI = 1786;
    static readonly SYS_XMLGEN = 1787;
    static readonly SYS_XMLI_LOC_ISNODE = 1788;
    static readonly SYS_XMLI_LOC_ISTEXT = 1789;
    static readonly SYS_XMLINSTR = 1790;
    static readonly SYS_XMLLOCATOR_GETSVAL = 1791;
    static readonly SYS_XMLNODEID_GETCID = 1792;
    static readonly SYS_XMLNODEID_GETLOCATOR = 1793;
    static readonly SYS_XMLNODEID_GETOKEY = 1794;
    static readonly SYS_XMLNODEID_GETPATHID = 1795;
    static readonly SYS_XMLNODEID_GETPTRID = 1796;
    static readonly SYS_XMLNODEID_GETRID = 1797;
    static readonly SYS_XMLNODEID_GETSVAL = 1798;
    static readonly SYS_XMLNODEID_GETTID = 1799;
    static readonly SYS_XMLNODEID = 1800;
    static readonly SYS_XMLT_2_SC = 1801;
    static readonly SYS_XMLTRANSLATE = 1802;
    static readonly SYS_XMLTYPE2SQL = 1803;
    static readonly SYS_XQ_ASQLCNV = 1804;
    static readonly SYS_XQ_ATOMCNVCHK = 1805;
    static readonly SYS_XQBASEURI = 1806;
    static readonly SYS_XQCASTABLEERRH = 1807;
    static readonly SYS_XQCODEP2STR = 1808;
    static readonly SYS_XQCODEPEQ = 1809;
    static readonly SYS_XQCON2SEQ = 1810;
    static readonly SYS_XQCONCAT = 1811;
    static readonly SYS_XQDELETE = 1812;
    static readonly SYS_XQDFLTCOLATION = 1813;
    static readonly SYS_XQDOC = 1814;
    static readonly SYS_XQDOCURI = 1815;
    static readonly SYS_XQDURDIV = 1816;
    static readonly SYS_XQED4URI = 1817;
    static readonly SYS_XQENDSWITH = 1818;
    static readonly SYS_XQERRH = 1819;
    static readonly SYS_XQERR = 1820;
    static readonly SYS_XQESHTMLURI = 1821;
    static readonly SYS_XQEXLOBVAL = 1822;
    static readonly SYS_XQEXSTWRP = 1823;
    static readonly SYS_XQEXTRACT = 1824;
    static readonly SYS_XQEXTRREF = 1825;
    static readonly SYS_XQEXVAL = 1826;
    static readonly SYS_XQFB2STR = 1827;
    static readonly SYS_XQFNBOOL = 1828;
    static readonly SYS_XQFNCMP = 1829;
    static readonly SYS_XQFNDATIM = 1830;
    static readonly SYS_XQFNLNAME = 1831;
    static readonly SYS_XQFNNM = 1832;
    static readonly SYS_XQFNNSURI = 1833;
    static readonly SYS_XQFNPREDTRUTH = 1834;
    static readonly SYS_XQFNQNM = 1835;
    static readonly SYS_XQFNROOT = 1836;
    static readonly SYS_XQFORMATNUM = 1837;
    static readonly SYS_XQFTCONTAIN = 1838;
    static readonly SYS_XQFUNCR = 1839;
    static readonly SYS_XQGETCONTENT = 1840;
    static readonly SYS_XQINDXOF = 1841;
    static readonly SYS_XQINSERT = 1842;
    static readonly SYS_XQINSPFX = 1843;
    static readonly SYS_XQIRI2URI = 1844;
    static readonly SYS_XQLANG = 1845;
    static readonly SYS_XQLLNMFRMQNM = 1846;
    static readonly SYS_XQMKNODEREF = 1847;
    static readonly SYS_XQNILLED = 1848;
    static readonly SYS_XQNODENAME = 1849;
    static readonly SYS_XQNORMSPACE = 1850;
    static readonly SYS_XQNORMUCODE = 1851;
    static readonly SYS_XQ_NRNG = 1852;
    static readonly SYS_XQNSP4PFX = 1853;
    static readonly SYS_XQNSPFRMQNM = 1854;
    static readonly SYS_XQPFXFRMQNM = 1855;
    static readonly SYS_XQ_PKSQL2XML = 1856;
    static readonly SYS_XQPOLYABS = 1857;
    static readonly SYS_XQPOLYADD = 1858;
    static readonly SYS_XQPOLYCEL = 1859;
    static readonly SYS_XQPOLYCSTBL = 1860;
    static readonly SYS_XQPOLYCST = 1861;
    static readonly SYS_XQPOLYDIV = 1862;
    static readonly SYS_XQPOLYFLR = 1863;
    static readonly SYS_XQPOLYMOD = 1864;
    static readonly SYS_XQPOLYMUL = 1865;
    static readonly SYS_XQPOLYRND = 1866;
    static readonly SYS_XQPOLYSQRT = 1867;
    static readonly SYS_XQPOLYSUB = 1868;
    static readonly SYS_XQPOLYUMUS = 1869;
    static readonly SYS_XQPOLYUPLS = 1870;
    static readonly SYS_XQPOLYVEQ = 1871;
    static readonly SYS_XQPOLYVGE = 1872;
    static readonly SYS_XQPOLYVGT = 1873;
    static readonly SYS_XQPOLYVLE = 1874;
    static readonly SYS_XQPOLYVLT = 1875;
    static readonly SYS_XQPOLYVNE = 1876;
    static readonly SYS_XQREF2VAL = 1877;
    static readonly SYS_XQRENAME = 1878;
    static readonly SYS_XQREPLACE = 1879;
    static readonly SYS_XQRESVURI = 1880;
    static readonly SYS_XQRNDHALF2EVN = 1881;
    static readonly SYS_XQRSLVQNM = 1882;
    static readonly SYS_XQRYENVPGET = 1883;
    static readonly SYS_XQRYVARGET = 1884;
    static readonly SYS_XQRYWRP = 1885;
    static readonly SYS_XQSEQ2CON4XC = 1886;
    static readonly SYS_XQSEQ2CON = 1887;
    static readonly SYS_XQSEQDEEPEQ = 1888;
    static readonly SYS_XQSEQINSB = 1889;
    static readonly SYS_XQSEQRM = 1890;
    static readonly SYS_XQSEQRVS = 1891;
    static readonly SYS_XQSEQSUB = 1892;
    static readonly SYS_XQSEQTYPMATCH = 1893;
    static readonly SYS_XQSTARTSWITH = 1894;
    static readonly SYS_XQSTATBURI = 1895;
    static readonly SYS_XQSTR2CODEP = 1896;
    static readonly SYS_XQSTRJOIN = 1897;
    static readonly SYS_XQSUBSTRAFT = 1898;
    static readonly SYS_XQSUBSTRBEF = 1899;
    static readonly SYS_XQTOKENIZE = 1900;
    static readonly SYS_XQTREATAS = 1901;
    static readonly SYS_XQ_UPKXML2SQL = 1902;
    static readonly SYS_XQXFORM = 1903;
    static readonly SYS_XSID_TO_RAW = 1904;
    static readonly SYS_ZMAP_FILTER = 1905;
    static readonly SYS_ZMAP_REFRESH = 1906;
    static readonly TABLE_LOOKUP_BY_NL = 1907;
    static readonly TABLESPACE_NO = 1908;
    static readonly TABLESPACE = 1909;
    static readonly TABLES = 1910;
    static readonly TABLE_STATS = 1911;
    static readonly TABLE = 1912;
    static readonly TABNO = 1913;
    static readonly TAG = 1914;
    static readonly TANH = 1915;
    static readonly TAN = 1916;
    static readonly TBLORIDXPARTNUM = 1917;
    static readonly TEMPFILE = 1918;
    static readonly TEMPLATE = 1919;
    static readonly TEMPORARY = 1920;
    static readonly TEMP_TABLE = 1921;
    static readonly TEST = 1922;
    static readonly TEXT = 1923;
    static readonly THAN = 1924;
    static readonly THEN = 1925;
    static readonly THE = 1926;
    static readonly THREAD = 1927;
    static readonly THROUGH = 1928;
    static readonly TIER = 1929;
    static readonly TIES = 1930;
    static readonly TIMEOUT = 1931;
    static readonly TIMESTAMP_LTZ_UNCONSTRAINED = 1932;
    static readonly TIMESTAMP = 1933;
    static readonly TIMESTAMP_TZ_UNCONSTRAINED = 1934;
    static readonly TIMESTAMP_UNCONSTRAINED = 1935;
    static readonly TIMES = 1936;
    static readonly TIME = 1937;
    static readonly TIMEZONE = 1938;
    static readonly TIMEZONE_ABBR = 1939;
    static readonly TIMEZONE_HOUR = 1940;
    static readonly TIMEZONE_MINUTE = 1941;
    static readonly TIMEZONE_OFFSET = 1942;
    static readonly TIMEZONE_REGION = 1943;
    static readonly TIME_ZONE = 1944;
    static readonly TIV_GB = 1945;
    static readonly TIV_SSF = 1946;
    static readonly TO_ACLID = 1947;
    static readonly TO_BINARY_DOUBLE = 1948;
    static readonly TO_BINARY_FLOAT = 1949;
    static readonly TO_BLOB = 1950;
    static readonly TO_CLOB = 1951;
    static readonly TO_DSINTERVAL = 1952;
    static readonly TO_LOB = 1953;
    static readonly TO_MULTI_BYTE = 1954;
    static readonly TO_NCHAR = 1955;
    static readonly TO_NCLOB = 1956;
    static readonly TO_NUMBER = 1957;
    static readonly TOPLEVEL = 1958;
    static readonly TO_SINGLE_BYTE = 1959;
    static readonly TO_TIMESTAMP = 1960;
    static readonly TO_TIMESTAMP_TZ = 1961;
    static readonly TO_TIME = 1962;
    static readonly TO_TIME_TZ = 1963;
    static readonly TO = 1964;
    static readonly TO_YMINTERVAL = 1965;
    static readonly TRACE = 1966;
    static readonly TRACING = 1967;
    static readonly TRACKING = 1968;
    static readonly TRAILING = 1969;
    static readonly TRANSACTION = 1970;
    static readonly TRANSFORM_DISTINCT_AGG = 1971;
    static readonly TRANSITIONAL = 1972;
    static readonly TRANSITION = 1973;
    static readonly TRANSLATE = 1974;
    static readonly TRANSLATION = 1975;
    static readonly TREAT = 1976;
    static readonly TRIGGERS = 1977;
    static readonly TRIGGER = 1978;
    static readonly TRUE = 1979;
    static readonly TRUNCATE = 1980;
    static readonly TRUNC = 1981;
    static readonly TRUSTED = 1982;
    static readonly TRUST = 1983;
    static readonly TUNING = 1984;
    static readonly TX = 1985;
    static readonly TYPES = 1986;
    static readonly TYPE = 1987;
    static readonly TZ_OFFSET = 1988;
    static readonly UB2 = 1989;
    static readonly UBA = 1990;
    static readonly UCS2 = 1991;
    static readonly UID = 1992;
    static readonly UNARCHIVED = 1993;
    static readonly UNBOUNDED = 1994;
    static readonly UNBOUND = 1995;
    static readonly UNCONDITIONAL = 1996;
    static readonly UNDER = 1997;
    static readonly UNDO = 1998;
    static readonly UNDROP = 1999;
    static readonly UNIFORM = 2000;
    static readonly UNION = 2001;
    static readonly UNIQUE = 2002;
    static readonly UNISTR = 2003;
    static readonly UNLIMITED = 2004;
    static readonly UNLOAD = 2005;
    static readonly UNLOCK = 2006;
    static readonly UNMATCHED = 2007;
    static readonly UNNEST_INNERJ_DISTINCT_VIEW = 2008;
    static readonly UNNEST_NOSEMIJ_NODISTINCTVIEW = 2009;
    static readonly UNNEST_SEMIJ_VIEW = 2010;
    static readonly UNNEST = 2011;
    static readonly UNPACKED = 2012;
    static readonly UNPIVOT = 2013;
    static readonly UNPLUG = 2014;
    static readonly UNPROTECTED = 2015;
    static readonly UNQUIESCE = 2016;
    static readonly UNRECOVERABLE = 2017;
    static readonly UNRESTRICTED = 2018;
    static readonly UNSUBSCRIBE = 2019;
    static readonly UNTIL = 2020;
    static readonly UNUSABLE = 2021;
    static readonly UNUSED = 2022;
    static readonly UPDATABLE = 2023;
    static readonly UPDATED = 2024;
    static readonly UPDATE = 2025;
    static readonly UPDATEXML = 2026;
    static readonly UPD_INDEXES = 2027;
    static readonly UPD_JOININDEX = 2028;
    static readonly UPGRADE = 2029;
    static readonly UPPER = 2030;
    static readonly UPSERT = 2031;
    static readonly UROWID = 2032;
    static readonly USABLE = 2033;
    static readonly USAGE = 2034;
    static readonly USE_ANTI = 2035;
    static readonly USE_CONCAT = 2036;
    static readonly USE_CUBE = 2037;
    static readonly USE_HASH_AGGREGATION = 2038;
    static readonly USE_HASH_GBY_FOR_PUSHDOWN = 2039;
    static readonly USE_HASH = 2040;
    static readonly USE_HIDDEN_PARTITIONS = 2041;
    static readonly USE_INVISIBLE_INDEXES = 2042;
    static readonly USE_MERGE_CARTESIAN = 2043;
    static readonly USE_MERGE = 2044;
    static readonly USE_NL = 2045;
    static readonly USE_NL_WITH_INDEX = 2046;
    static readonly USE_PRIVATE_OUTLINES = 2047;
    static readonly USER_DATA = 2048;
    static readonly USER_DEFINED = 2049;
    static readonly USERENV = 2050;
    static readonly USERGROUP = 2051;
    static readonly USER_RECYCLEBIN = 2052;
    static readonly USERS = 2053;
    static readonly USER_TABLESPACES = 2054;
    static readonly USER = 2055;
    static readonly USE_SEMI = 2056;
    static readonly USE_STORED_OUTLINES = 2057;
    static readonly USE_TTT_FOR_GSETS = 2058;
    static readonly USE = 2059;
    static readonly USE_VECTOR_AGGREGATION = 2060;
    static readonly USE_WEAK_NAME_RESL = 2061;
    static readonly USING_NO_EXPAND = 2062;
    static readonly USING = 2063;
    static readonly UTF16BE = 2064;
    static readonly UTF16LE = 2065;
    static readonly UTF32 = 2066;
    static readonly UTF8 = 2067;
    static readonly V1 = 2068;
    static readonly V2 = 2069;
    static readonly VALIDATE = 2070;
    static readonly VALIDATION = 2071;
    static readonly VALID_TIME_END = 2072;
    static readonly VALUES = 2073;
    static readonly VALUE = 2074;
    static readonly VARCHAR2 = 2075;
    static readonly VARCHAR = 2076;
    static readonly VARIABLE = 2077;
    static readonly VAR_POP = 2078;
    static readonly VARRAYS = 2079;
    static readonly VARRAY = 2080;
    static readonly VAR_SAMP = 2081;
    static readonly VARYING = 2082;
    static readonly VECTOR_READ_TRACE = 2083;
    static readonly VECTOR_READ = 2084;
    static readonly VECTOR_TRANSFORM_DIMS = 2085;
    static readonly VECTOR_TRANSFORM_FACT = 2086;
    static readonly VECTOR_TRANSFORM = 2087;
    static readonly VERIFIER = 2088;
    static readonly VERIFY = 2089;
    static readonly VERSIONING = 2090;
    static readonly VERSIONS_ENDSCN = 2091;
    static readonly VERSIONS_ENDTIME = 2092;
    static readonly VERSIONS_OPERATION = 2093;
    static readonly VERSIONS_STARTSCN = 2094;
    static readonly VERSIONS_STARTTIME = 2095;
    static readonly VERSIONS = 2096;
    static readonly VERSIONS_XID = 2097;
    static readonly VERSION = 2098;
    static readonly VIEW = 2099;
    static readonly VIOLATION = 2100;
    static readonly VIRTUAL = 2101;
    static readonly VISIBILITY = 2102;
    static readonly VISIBLE = 2103;
    static readonly VOLUME = 2104;
    static readonly VSIZE = 2105;
    static readonly WAIT = 2106;
    static readonly WALLET = 2107;
    static readonly WARNING = 2108;
    static readonly WEEKS = 2109;
    static readonly WEEK = 2110;
    static readonly WELLFORMED = 2111;
    static readonly WHENEVER = 2112;
    static readonly WHEN = 2113;
    static readonly WHERE = 2114;
    static readonly WHILE = 2115;
    static readonly WHITESPACE = 2116;
    static readonly WIDTH_BUCKET = 2117;
    static readonly WITHIN = 2118;
    static readonly WITHOUT = 2119;
    static readonly WITH_PLSQL = 2120;
    static readonly WITH = 2121;
    static readonly WORK = 2122;
    static readonly WRAPPED = 2123;
    static readonly WRAPPER = 2124;
    static readonly WRITE = 2125;
    static readonly XDB_FASTPATH_INSERT = 2126;
    static readonly XDB = 2127;
    static readonly X_DYN_PRUNE = 2128;
    static readonly XID = 2129;
    static readonly XML2OBJECT = 2130;
    static readonly XMLAGG = 2131;
    static readonly XMLATTRIBUTES = 2132;
    static readonly XMLCAST = 2133;
    static readonly XMLCDATA = 2134;
    static readonly XMLCOLATTVAL = 2135;
    static readonly XMLCOMMENT = 2136;
    static readonly XMLCONCAT = 2137;
    static readonly XMLDIFF = 2138;
    static readonly XML_DML_RWT_STMT = 2139;
    static readonly XMLELEMENT = 2140;
    static readonly XMLEXISTS2 = 2141;
    static readonly XMLEXISTS = 2142;
    static readonly XMLFOREST = 2143;
    static readonly XMLINDEX = 2144;
    static readonly XMLINDEX_REWRITE_IN_SELECT = 2145;
    static readonly XMLINDEX_REWRITE = 2146;
    static readonly XMLINDEX_SEL_IDX_TBL = 2147;
    static readonly XMLISNODE = 2148;
    static readonly XMLISVALID = 2149;
    static readonly XMLNAMESPACES = 2150;
    static readonly XMLPARSE = 2151;
    static readonly XMLPATCH = 2152;
    static readonly XMLPI = 2153;
    static readonly XMLQUERYVAL = 2154;
    static readonly XMLQUERY = 2155;
    static readonly XMLROOT = 2156;
    static readonly XMLSCHEMA = 2157;
    static readonly XMLSERIALIZE = 2158;
    static readonly XMLTABLE = 2159;
    static readonly XMLTRANSFORMBLOB = 2160;
    static readonly XMLTRANSFORM = 2161;
    static readonly XMLTYPE = 2162;
    static readonly XML = 2163;
    static readonly XPATHTABLE = 2164;
    static readonly XS_SYS_CONTEXT = 2165;
    static readonly XS = 2166;
    static readonly XTRANSPORT = 2167;
    static readonly YEARS = 2168;
    static readonly YEAR = 2169;
    static readonly YES = 2170;
    static readonly YMINTERVAL_UNCONSTRAINED = 2171;
    static readonly ZONEMAP = 2172;
    static readonly ZONE = 2173;
    static readonly PREDICTION = 2174;
    static readonly PREDICTION_BOUNDS = 2175;
    static readonly PREDICTION_COST = 2176;
    static readonly PREDICTION_DETAILS = 2177;
    static readonly PREDICTION_PROBABILITY = 2178;
    static readonly PREDICTION_SET = 2179;
    static readonly CUME_DIST = 2180;
    static readonly DENSE_RANK = 2181;
    static readonly LISTAGG = 2182;
    static readonly PERCENT_RANK = 2183;
    static readonly PERCENTILE_CONT = 2184;
    static readonly PERCENTILE_DISC = 2185;
    static readonly RANK = 2186;
    static readonly AVG = 2187;
    static readonly CORR = 2188;
    static readonly COVAR_ = 2189;
    static readonly DECODE = 2190;
    static readonly LAG = 2191;
    static readonly LEAD = 2192;
    static readonly MAX = 2193;
    static readonly MEDIAN = 2194;
    static readonly MIN = 2195;
    static readonly NTILE = 2196;
    static readonly NVL = 2197;
    static readonly RATIO_TO_REPORT = 2198;
    static readonly REGR_ = 2199;
    static readonly ROUND = 2200;
    static readonly ROW_NUMBER = 2201;
    static readonly SUBSTR = 2202;
    static readonly TO_CHAR = 2203;
    static readonly TRIM = 2204;
    static readonly SUM = 2205;
    static readonly STDDEV = 2206;
    static readonly VAR_ = 2207;
    static readonly VARIANCE = 2208;
    static readonly LEAST = 2209;
    static readonly GREATEST = 2210;
    static readonly TO_DATE = 2211;
    static readonly NATIONAL_CHAR_STRING_LIT = 2212;
    static readonly BIT_STRING_LIT = 2213;
    static readonly HEX_STRING_LIT = 2214;
    static readonly DOUBLE_PERIOD = 2215;
    static readonly PERIOD = 2216;
    static readonly UNSIGNED_INTEGER = 2217;
    static readonly APPROXIMATE_NUM_LIT = 2218;
    static readonly CHAR_STRING = 2219;
    static readonly DELIMITED_ID = 2220;
    static readonly PERCENT = 2221;
    static readonly AMPERSAND = 2222;
    static readonly LEFT_PAREN = 2223;
    static readonly RIGHT_PAREN = 2224;
    static readonly DOUBLE_ASTERISK = 2225;
    static readonly ASTERISK = 2226;
    static readonly PLUS_SIGN = 2227;
    static readonly MINUS_SIGN = 2228;
    static readonly COMMA = 2229;
    static readonly SOLIDUS = 2230;
    static readonly AT_SIGN = 2231;
    static readonly ASSIGN_OP = 2232;
    static readonly BINDVAR = 2233;
    static readonly NOT_EQUAL_OP = 2234;
    static readonly CARRET_OPERATOR_PART = 2235;
    static readonly TILDE_OPERATOR_PART = 2236;
    static readonly EXCLAMATION_OPERATOR_PART = 2237;
    static readonly GREATER_THAN_OP = 2238;
    static readonly LESS_THAN_OP = 2239;
    static readonly COLON = 2240;
    static readonly SEMICOLON = 2241;
    static readonly BAR = 2242;
    static readonly EQUALS_OP = 2243;
    static readonly LEFT_BRACKET = 2244;
    static readonly RIGHT_BRACKET = 2245;
    static readonly INTRODUCER = 2246;
    static readonly SINGLE_LINE_COMMENT = 2247;
    static readonly MULTI_LINE_COMMENT = 2248;
    static readonly REMARK_COMMENT = 2249;
    static readonly PROMPT_MESSAGE = 2250;
    static readonly START_CMD = 2251;
    static readonly REGULAR_ID = 2252;
    static readonly SPACES = 2253;
    static readonly RULE_sql_script = 0;
    static readonly RULE_unit_statement = 1;
    static readonly RULE_drop_function = 2;
    static readonly RULE_alter_function = 3;
    static readonly RULE_create_function_body = 4;
    static readonly RULE_parallel_enable_clause = 5;
    static readonly RULE_partition_by_clause = 6;
    static readonly RULE_result_cache_clause = 7;
    static readonly RULE_relies_on_part = 8;
    static readonly RULE_streaming_clause = 9;
    static readonly RULE_drop_package = 10;
    static readonly RULE_alter_package = 11;
    static readonly RULE_create_package = 12;
    static readonly RULE_create_package_body = 13;
    static readonly RULE_package_obj_spec = 14;
    static readonly RULE_procedure_spec = 15;
    static readonly RULE_function_spec = 16;
    static readonly RULE_package_obj_body = 17;
    static readonly RULE_drop_procedure = 18;
    static readonly RULE_alter_procedure = 19;
    static readonly RULE_function_body = 20;
    static readonly RULE_procedure_body = 21;
    static readonly RULE_create_procedure_body = 22;
    static readonly RULE_drop_trigger = 23;
    static readonly RULE_alter_trigger = 24;
    static readonly RULE_create_trigger = 25;
    static readonly RULE_trigger_follows_clause = 26;
    static readonly RULE_trigger_when_clause = 27;
    static readonly RULE_simple_dml_trigger = 28;
    static readonly RULE_for_each_row = 29;
    static readonly RULE_compound_dml_trigger = 30;
    static readonly RULE_non_dml_trigger = 31;
    static readonly RULE_trigger_body = 32;
    static readonly RULE_routine_clause = 33;
    static readonly RULE_compound_trigger_block = 34;
    static readonly RULE_timing_point_section = 35;
    static readonly RULE_non_dml_event = 36;
    static readonly RULE_dml_event_clause = 37;
    static readonly RULE_dml_event_element = 38;
    static readonly RULE_dml_event_nested_clause = 39;
    static readonly RULE_referencing_clause = 40;
    static readonly RULE_referencing_element = 41;
    static readonly RULE_drop_type = 42;
    static readonly RULE_alter_type = 43;
    static readonly RULE_compile_type_clause = 44;
    static readonly RULE_replace_type_clause = 45;
    static readonly RULE_alter_method_spec = 46;
    static readonly RULE_alter_method_element = 47;
    static readonly RULE_alter_attribute_definition = 48;
    static readonly RULE_attribute_definition = 49;
    static readonly RULE_alter_collection_clauses = 50;
    static readonly RULE_dependent_handling_clause = 51;
    static readonly RULE_dependent_exceptions_part = 52;
    static readonly RULE_create_type = 53;
    static readonly RULE_type_definition = 54;
    static readonly RULE_object_type_def = 55;
    static readonly RULE_object_as_part = 56;
    static readonly RULE_object_under_part = 57;
    static readonly RULE_nested_table_type_def = 58;
    static readonly RULE_sqlj_object_type = 59;
    static readonly RULE_type_body = 60;
    static readonly RULE_type_body_elements = 61;
    static readonly RULE_map_order_func_declaration = 62;
    static readonly RULE_subprog_decl_in_type = 63;
    static readonly RULE_proc_decl_in_type = 64;
    static readonly RULE_func_decl_in_type = 65;
    static readonly RULE_constructor_declaration = 66;
    static readonly RULE_modifier_clause = 67;
    static readonly RULE_object_member_spec = 68;
    static readonly RULE_sqlj_object_type_attr = 69;
    static readonly RULE_element_spec = 70;
    static readonly RULE_element_spec_options = 71;
    static readonly RULE_subprogram_spec = 72;
    static readonly RULE_overriding_subprogram_spec = 73;
    static readonly RULE_overriding_function_spec = 74;
    static readonly RULE_type_procedure_spec = 75;
    static readonly RULE_type_function_spec = 76;
    static readonly RULE_constructor_spec = 77;
    static readonly RULE_map_order_function_spec = 78;
    static readonly RULE_pragma_clause = 79;
    static readonly RULE_pragma_elements = 80;
    static readonly RULE_type_elements_parameter = 81;
    static readonly RULE_drop_sequence = 82;
    static readonly RULE_alter_sequence = 83;
    static readonly RULE_alter_session = 84;
    static readonly RULE_alter_session_set_clause = 85;
    static readonly RULE_create_sequence = 86;
    static readonly RULE_sequence_spec = 87;
    static readonly RULE_sequence_start_clause = 88;
    static readonly RULE_create_index = 89;
    static readonly RULE_cluster_index_clause = 90;
    static readonly RULE_cluster_name = 91;
    static readonly RULE_table_index_clause = 92;
    static readonly RULE_bitmap_join_index_clause = 93;
    static readonly RULE_index_expr = 94;
    static readonly RULE_index_properties = 95;
    static readonly RULE_domain_index_clause = 96;
    static readonly RULE_local_domain_index_clause = 97;
    static readonly RULE_xmlindex_clause = 98;
    static readonly RULE_local_xmlindex_clause = 99;
    static readonly RULE_global_partitioned_index = 100;
    static readonly RULE_index_partitioning_clause = 101;
    static readonly RULE_local_partitioned_index = 102;
    static readonly RULE_on_range_partitioned_table = 103;
    static readonly RULE_on_list_partitioned_table = 104;
    static readonly RULE_partitioned_table = 105;
    static readonly RULE_on_hash_partitioned_table = 106;
    static readonly RULE_on_hash_partitioned_clause = 107;
    static readonly RULE_on_comp_partitioned_table = 108;
    static readonly RULE_on_comp_partitioned_clause = 109;
    static readonly RULE_index_subpartition_clause = 110;
    static readonly RULE_index_subpartition_subclause = 111;
    static readonly RULE_odci_parameters = 112;
    static readonly RULE_indextype = 113;
    static readonly RULE_alter_index = 114;
    static readonly RULE_alter_index_ops_set1 = 115;
    static readonly RULE_alter_index_ops_set2 = 116;
    static readonly RULE_visible_or_invisible = 117;
    static readonly RULE_monitoring_nomonitoring = 118;
    static readonly RULE_rebuild_clause = 119;
    static readonly RULE_alter_index_partitioning = 120;
    static readonly RULE_modify_index_default_attrs = 121;
    static readonly RULE_add_hash_index_partition = 122;
    static readonly RULE_coalesce_index_partition = 123;
    static readonly RULE_modify_index_partition = 124;
    static readonly RULE_modify_index_partitions_ops = 125;
    static readonly RULE_rename_index_partition = 126;
    static readonly RULE_drop_index_partition = 127;
    static readonly RULE_split_index_partition = 128;
    static readonly RULE_index_partition_description = 129;
    static readonly RULE_modify_index_subpartition = 130;
    static readonly RULE_partition_name_old = 131;
    static readonly RULE_new_partition_name = 132;
    static readonly RULE_new_index_name = 133;
    static readonly RULE_create_user = 134;
    static readonly RULE_alter_user = 135;
    static readonly RULE_alter_identified_by = 136;
    static readonly RULE_identified_by = 137;
    static readonly RULE_identified_other_clause = 138;
    static readonly RULE_user_tablespace_clause = 139;
    static readonly RULE_quota_clause = 140;
    static readonly RULE_profile_clause = 141;
    static readonly RULE_role_clause = 142;
    static readonly RULE_user_default_role_clause = 143;
    static readonly RULE_password_expire_clause = 144;
    static readonly RULE_user_lock_clause = 145;
    static readonly RULE_user_editions_clause = 146;
    static readonly RULE_alter_user_editions_clause = 147;
    static readonly RULE_proxy_clause = 148;
    static readonly RULE_container_names = 149;
    static readonly RULE_set_container_data = 150;
    static readonly RULE_add_rem_container_data = 151;
    static readonly RULE_container_data_clause = 152;
    static readonly RULE_analyze = 153;
    static readonly RULE_partition_extention_clause = 154;
    static readonly RULE_validation_clauses = 155;
    static readonly RULE_online_or_offline = 156;
    static readonly RULE_into_clause1 = 157;
    static readonly RULE_partition_key_value = 158;
    static readonly RULE_subpartition_key_value = 159;
    static readonly RULE_associate_statistics = 160;
    static readonly RULE_column_association = 161;
    static readonly RULE_function_association = 162;
    static readonly RULE_indextype_name = 163;
    static readonly RULE_using_statistics_type = 164;
    static readonly RULE_statistics_type_name = 165;
    static readonly RULE_default_cost_clause = 166;
    static readonly RULE_cpu_cost = 167;
    static readonly RULE_io_cost = 168;
    static readonly RULE_network_cost = 169;
    static readonly RULE_default_selectivity_clause = 170;
    static readonly RULE_default_selectivity = 171;
    static readonly RULE_storage_table_clause = 172;
    static readonly RULE_unified_auditing = 173;
    static readonly RULE_policy_name = 174;
    static readonly RULE_audit_traditional = 175;
    static readonly RULE_audit_direct_path = 176;
    static readonly RULE_audit_container_clause = 177;
    static readonly RULE_audit_operation_clause = 178;
    static readonly RULE_auditing_by_clause = 179;
    static readonly RULE_audit_user = 180;
    static readonly RULE_audit_schema_object_clause = 181;
    static readonly RULE_sql_operation = 182;
    static readonly RULE_auditing_on_clause = 183;
    static readonly RULE_model_name = 184;
    static readonly RULE_object_name = 185;
    static readonly RULE_profile_name = 186;
    static readonly RULE_sql_statement_shortcut = 187;
    static readonly RULE_drop_index = 188;
    static readonly RULE_rename_object = 189;
    static readonly RULE_grant_statement = 190;
    static readonly RULE_container_clause = 191;
    static readonly RULE_create_directory = 192;
    static readonly RULE_directory_name = 193;
    static readonly RULE_directory_path = 194;
    static readonly RULE_alter_library = 195;
    static readonly RULE_library_editionable = 196;
    static readonly RULE_library_debug = 197;
    static readonly RULE_compiler_parameters_clause = 198;
    static readonly RULE_parameter_value = 199;
    static readonly RULE_library_name = 200;
    static readonly RULE_alter_view = 201;
    static readonly RULE_alter_view_editionable = 202;
    static readonly RULE_create_view = 203;
    static readonly RULE_view_options = 204;
    static readonly RULE_view_alias_constraint = 205;
    static readonly RULE_object_view_clause = 206;
    static readonly RULE_inline_constraint = 207;
    static readonly RULE_inline_ref_constraint = 208;
    static readonly RULE_out_of_line_ref_constraint = 209;
    static readonly RULE_out_of_line_constraint = 210;
    static readonly RULE_constraint_state = 211;
    static readonly RULE_alter_tablespace = 212;
    static readonly RULE_datafile_tempfile_clauses = 213;
    static readonly RULE_tablespace_logging_clauses = 214;
    static readonly RULE_tablespace_group_clause = 215;
    static readonly RULE_tablespace_group_name = 216;
    static readonly RULE_tablespace_state_clauses = 217;
    static readonly RULE_flashback_mode_clause = 218;
    static readonly RULE_new_tablespace_name = 219;
    static readonly RULE_create_tablespace = 220;
    static readonly RULE_permanent_tablespace_clause = 221;
    static readonly RULE_tablespace_encryption_spec = 222;
    static readonly RULE_logging_clause = 223;
    static readonly RULE_extent_management_clause = 224;
    static readonly RULE_segment_management_clause = 225;
    static readonly RULE_temporary_tablespace_clause = 226;
    static readonly RULE_undo_tablespace_clause = 227;
    static readonly RULE_tablespace_retention_clause = 228;
    static readonly RULE_datafile_specification = 229;
    static readonly RULE_tempfile_specification = 230;
    static readonly RULE_datafile_tempfile_spec = 231;
    static readonly RULE_redo_log_file_spec = 232;
    static readonly RULE_autoextend_clause = 233;
    static readonly RULE_maxsize_clause = 234;
    static readonly RULE_build_clause = 235;
    static readonly RULE_parallel_clause = 236;
    static readonly RULE_alter_materialized_view = 237;
    static readonly RULE_alter_mv_option1 = 238;
    static readonly RULE_alter_mv_refresh = 239;
    static readonly RULE_rollback_segment = 240;
    static readonly RULE_modify_mv_column_clause = 241;
    static readonly RULE_alter_materialized_view_log = 242;
    static readonly RULE_add_mv_log_column_clause = 243;
    static readonly RULE_move_mv_log_clause = 244;
    static readonly RULE_mv_log_augmentation = 245;
    static readonly RULE_datetime_expr = 246;
    static readonly RULE_interval_expr = 247;
    static readonly RULE_synchronous_or_asynchronous = 248;
    static readonly RULE_including_or_excluding = 249;
    static readonly RULE_create_materialized_view_log = 250;
    static readonly RULE_new_values_clause = 251;
    static readonly RULE_mv_log_purge_clause = 252;
    static readonly RULE_create_materialized_view = 253;
    static readonly RULE_create_mv_refresh = 254;
    static readonly RULE_create_context = 255;
    static readonly RULE_oracle_namespace = 256;
    static readonly RULE_create_cluster = 257;
    static readonly RULE_create_table = 258;
    static readonly RULE_xmltype_table = 259;
    static readonly RULE_xmltype_virtual_columns = 260;
    static readonly RULE_xmltype_column_properties = 261;
    static readonly RULE_xmltype_storage = 262;
    static readonly RULE_xmlschema_spec = 263;
    static readonly RULE_object_table = 264;
    static readonly RULE_oid_index_clause = 265;
    static readonly RULE_oid_clause = 266;
    static readonly RULE_object_properties = 267;
    static readonly RULE_object_table_substitution = 268;
    static readonly RULE_relational_table = 269;
    static readonly RULE_relational_property = 270;
    static readonly RULE_table_partitioning_clauses = 271;
    static readonly RULE_range_partitions = 272;
    static readonly RULE_list_partitions = 273;
    static readonly RULE_hash_partitions = 274;
    static readonly RULE_individual_hash_partitions = 275;
    static readonly RULE_hash_partitions_by_quantity = 276;
    static readonly RULE_hash_partition_quantity = 277;
    static readonly RULE_composite_range_partitions = 278;
    static readonly RULE_composite_list_partitions = 279;
    static readonly RULE_composite_hash_partitions = 280;
    static readonly RULE_reference_partitioning = 281;
    static readonly RULE_reference_partition_desc = 282;
    static readonly RULE_system_partitioning = 283;
    static readonly RULE_range_partition_desc = 284;
    static readonly RULE_list_partition_desc = 285;
    static readonly RULE_subpartition_template = 286;
    static readonly RULE_hash_subpartition_quantity = 287;
    static readonly RULE_subpartition_by_range = 288;
    static readonly RULE_subpartition_by_list = 289;
    static readonly RULE_subpartition_by_hash = 290;
    static readonly RULE_subpartition_name = 291;
    static readonly RULE_range_subpartition_desc = 292;
    static readonly RULE_list_subpartition_desc = 293;
    static readonly RULE_individual_hash_subparts = 294;
    static readonly RULE_hash_subparts_by_quantity = 295;
    static readonly RULE_range_values_clause = 296;
    static readonly RULE_list_values_clause = 297;
    static readonly RULE_table_partition_description = 298;
    static readonly RULE_partitioning_storage_clause = 299;
    static readonly RULE_lob_partitioning_storage = 300;
    static readonly RULE_datatype_null_enable = 301;
    static readonly RULE_size_clause = 302;
    static readonly RULE_table_compression = 303;
    static readonly RULE_physical_attributes_clause = 304;
    static readonly RULE_storage_clause = 305;
    static readonly RULE_deferred_segment_creation = 306;
    static readonly RULE_segment_attributes_clause = 307;
    static readonly RULE_physical_properties = 308;
    static readonly RULE_row_movement_clause = 309;
    static readonly RULE_flashback_archive_clause = 310;
    static readonly RULE_log_grp = 311;
    static readonly RULE_supplemental_table_logging = 312;
    static readonly RULE_supplemental_log_grp_clause = 313;
    static readonly RULE_supplemental_id_key_clause = 314;
    static readonly RULE_allocate_extent_clause = 315;
    static readonly RULE_deallocate_unused_clause = 316;
    static readonly RULE_shrink_clause = 317;
    static readonly RULE_records_per_block_clause = 318;
    static readonly RULE_upgrade_table_clause = 319;
    static readonly RULE_truncate_table = 320;
    static readonly RULE_drop_table = 321;
    static readonly RULE_drop_view = 322;
    static readonly RULE_comment_on_column = 323;
    static readonly RULE_enable_or_disable = 324;
    static readonly RULE_allow_or_disallow = 325;
    static readonly RULE_create_synonym = 326;
    static readonly RULE_comment_on_table = 327;
    static readonly RULE_alter_cluster = 328;
    static readonly RULE_cache_or_nocache = 329;
    static readonly RULE_database_name = 330;
    static readonly RULE_alter_database = 331;
    static readonly RULE_startup_clauses = 332;
    static readonly RULE_resetlogs_or_noresetlogs = 333;
    static readonly RULE_upgrade_or_downgrade = 334;
    static readonly RULE_recovery_clauses = 335;
    static readonly RULE_begin_or_end = 336;
    static readonly RULE_general_recovery = 337;
    static readonly RULE_full_database_recovery = 338;
    static readonly RULE_partial_database_recovery = 339;
    static readonly RULE_partial_database_recovery_10g = 340;
    static readonly RULE_managed_standby_recovery = 341;
    static readonly RULE_db_name = 342;
    static readonly RULE_database_file_clauses = 343;
    static readonly RULE_create_datafile_clause = 344;
    static readonly RULE_alter_datafile_clause = 345;
    static readonly RULE_alter_tempfile_clause = 346;
    static readonly RULE_logfile_clauses = 347;
    static readonly RULE_add_logfile_clauses = 348;
    static readonly RULE_log_file_group = 349;
    static readonly RULE_drop_logfile_clauses = 350;
    static readonly RULE_switch_logfile_clause = 351;
    static readonly RULE_supplemental_db_logging = 352;
    static readonly RULE_add_or_drop = 353;
    static readonly RULE_supplemental_plsql_clause = 354;
    static readonly RULE_logfile_descriptor = 355;
    static readonly RULE_controlfile_clauses = 356;
    static readonly RULE_trace_file_clause = 357;
    static readonly RULE_standby_database_clauses = 358;
    static readonly RULE_activate_standby_db_clause = 359;
    static readonly RULE_maximize_standby_db_clause = 360;
    static readonly RULE_register_logfile_clause = 361;
    static readonly RULE_commit_switchover_clause = 362;
    static readonly RULE_start_standby_clause = 363;
    static readonly RULE_stop_standby_clause = 364;
    static readonly RULE_convert_database_clause = 365;
    static readonly RULE_default_settings_clause = 366;
    static readonly RULE_set_time_zone_clause = 367;
    static readonly RULE_instance_clauses = 368;
    static readonly RULE_security_clause = 369;
    static readonly RULE_domain = 370;
    static readonly RULE_database = 371;
    static readonly RULE_edition_name = 372;
    static readonly RULE_filenumber = 373;
    static readonly RULE_filename = 374;
    static readonly RULE_alter_table = 375;
    static readonly RULE_alter_table_properties = 376;
    static readonly RULE_alter_table_properties_1 = 377;
    static readonly RULE_alter_iot_clauses = 378;
    static readonly RULE_alter_mapping_table_clause = 379;
    static readonly RULE_alter_overflow_clause = 380;
    static readonly RULE_add_overflow_clause = 381;
    static readonly RULE_enable_disable_clause = 382;
    static readonly RULE_using_index_clause = 383;
    static readonly RULE_index_attributes = 384;
    static readonly RULE_sort_or_nosort = 385;
    static readonly RULE_exceptions_clause = 386;
    static readonly RULE_move_table_clause = 387;
    static readonly RULE_index_org_table_clause = 388;
    static readonly RULE_mapping_table_clause = 389;
    static readonly RULE_key_compression = 390;
    static readonly RULE_index_org_overflow_clause = 391;
    static readonly RULE_column_clauses = 392;
    static readonly RULE_modify_collection_retrieval = 393;
    static readonly RULE_collection_item = 394;
    static readonly RULE_rename_column_clause = 395;
    static readonly RULE_old_column_name = 396;
    static readonly RULE_new_column_name = 397;
    static readonly RULE_add_modify_drop_column_clauses = 398;
    static readonly RULE_drop_column_clause = 399;
    static readonly RULE_modify_column_clauses = 400;
    static readonly RULE_modify_col_properties = 401;
    static readonly RULE_modify_col_substitutable = 402;
    static readonly RULE_add_column_clause = 403;
    static readonly RULE_alter_varray_col_properties = 404;
    static readonly RULE_varray_col_properties = 405;
    static readonly RULE_varray_storage_clause = 406;
    static readonly RULE_lob_segname = 407;
    static readonly RULE_lob_item = 408;
    static readonly RULE_lob_storage_parameters = 409;
    static readonly RULE_lob_storage_clause = 410;
    static readonly RULE_modify_lob_storage_clause = 411;
    static readonly RULE_modify_lob_parameters = 412;
    static readonly RULE_lob_parameters = 413;
    static readonly RULE_lob_deduplicate_clause = 414;
    static readonly RULE_lob_compression_clause = 415;
    static readonly RULE_lob_retention_clause = 416;
    static readonly RULE_encryption_spec = 417;
    static readonly RULE_tablespace = 418;
    static readonly RULE_varray_item = 419;
    static readonly RULE_column_properties = 420;
    static readonly RULE_period_definition = 421;
    static readonly RULE_start_time_column = 422;
    static readonly RULE_end_time_column = 423;
    static readonly RULE_column_definition = 424;
    static readonly RULE_virtual_column_definition = 425;
    static readonly RULE_autogenerated_sequence_definition = 426;
    static readonly RULE_out_of_line_part_storage = 427;
    static readonly RULE_nested_table_col_properties = 428;
    static readonly RULE_nested_item = 429;
    static readonly RULE_substitutable_column_clause = 430;
    static readonly RULE_partition_name = 431;
    static readonly RULE_supplemental_logging_props = 432;
    static readonly RULE_column_or_attribute = 433;
    static readonly RULE_object_type_col_properties = 434;
    static readonly RULE_constraint_clauses = 435;
    static readonly RULE_old_constraint_name = 436;
    static readonly RULE_new_constraint_name = 437;
    static readonly RULE_drop_constraint_clause = 438;
    static readonly RULE_drop_primary_key_or_unique_or_generic_clause = 439;
    static readonly RULE_add_constraint = 440;
    static readonly RULE_add_constraint_clause = 441;
    static readonly RULE_check_constraint = 442;
    static readonly RULE_drop_constraint = 443;
    static readonly RULE_enable_constraint = 444;
    static readonly RULE_disable_constraint = 445;
    static readonly RULE_foreign_key_clause = 446;
    static readonly RULE_references_clause = 447;
    static readonly RULE_on_delete_clause = 448;
    static readonly RULE_unique_key_clause = 449;
    static readonly RULE_primary_key_clause = 450;
    static readonly RULE_anonymous_block = 451;
    static readonly RULE_invoker_rights_clause = 452;
    static readonly RULE_call_spec = 453;
    static readonly RULE_java_spec = 454;
    static readonly RULE_c_spec = 455;
    static readonly RULE_c_agent_in_clause = 456;
    static readonly RULE_c_parameters_clause = 457;
    static readonly RULE_parameter = 458;
    static readonly RULE_default_value_part = 459;
    static readonly RULE_seq_of_declare_specs = 460;
    static readonly RULE_declare_spec = 461;
    static readonly RULE_variable_declaration = 462;
    static readonly RULE_subtype_declaration = 463;
    static readonly RULE_cursor_declaration = 464;
    static readonly RULE_parameter_spec = 465;
    static readonly RULE_exception_declaration = 466;
    static readonly RULE_pragma_declaration = 467;
    static readonly RULE_record_type_def = 468;
    static readonly RULE_field_spec = 469;
    static readonly RULE_ref_cursor_type_def = 470;
    static readonly RULE_type_declaration = 471;
    static readonly RULE_table_type_def = 472;
    static readonly RULE_table_indexed_by_part = 473;
    static readonly RULE_varray_type_def = 474;
    static readonly RULE_seq_of_statements = 475;
    static readonly RULE_label_declaration = 476;
    static readonly RULE_statement = 477;
    static readonly RULE_swallow_to_semi = 478;
    static readonly RULE_assignment_statement = 479;
    static readonly RULE_continue_statement = 480;
    static readonly RULE_exit_statement = 481;
    static readonly RULE_goto_statement = 482;
    static readonly RULE_if_statement = 483;
    static readonly RULE_elsif_part = 484;
    static readonly RULE_else_part = 485;
    static readonly RULE_loop_statement = 486;
    static readonly RULE_cursor_loop_param = 487;
    static readonly RULE_forall_statement = 488;
    static readonly RULE_bounds_clause = 489;
    static readonly RULE_between_bound = 490;
    static readonly RULE_lower_bound = 491;
    static readonly RULE_upper_bound = 492;
    static readonly RULE_null_statement = 493;
    static readonly RULE_raise_statement = 494;
    static readonly RULE_return_statement = 495;
    static readonly RULE_function_call = 496;
    static readonly RULE_procedure_call = 497;
    static readonly RULE_pipe_row_statement = 498;
    static readonly RULE_body = 499;
    static readonly RULE_exception_handler = 500;
    static readonly RULE_trigger_block = 501;
    static readonly RULE_block = 502;
    static readonly RULE_sql_statement = 503;
    static readonly RULE_execute_immediate = 504;
    static readonly RULE_dynamic_returning_clause = 505;
    static readonly RULE_data_manipulation_language_statements = 506;
    static readonly RULE_cursor_manipulation_statements = 507;
    static readonly RULE_close_statement = 508;
    static readonly RULE_open_statement = 509;
    static readonly RULE_fetch_statement = 510;
    static readonly RULE_open_for_statement = 511;
    static readonly RULE_transaction_control_statements = 512;
    static readonly RULE_set_transaction_command = 513;
    static readonly RULE_set_constraint_command = 514;
    static readonly RULE_commit_statement = 515;
    static readonly RULE_write_clause = 516;
    static readonly RULE_rollback_statement = 517;
    static readonly RULE_savepoint_statement = 518;
    static readonly RULE_explain_statement = 519;
    static readonly RULE_select_only_statement = 520;
    static readonly RULE_select_statement = 521;
    static readonly RULE_subquery_factoring_clause = 522;
    static readonly RULE_factoring_element = 523;
    static readonly RULE_search_clause = 524;
    static readonly RULE_cycle_clause = 525;
    static readonly RULE_subquery = 526;
    static readonly RULE_subquery_basic_elements = 527;
    static readonly RULE_subquery_operation_part = 528;
    static readonly RULE_query_block = 529;
    static readonly RULE_selected_list = 530;
    static readonly RULE_from_clause = 531;
    static readonly RULE_select_list_elements = 532;
    static readonly RULE_table_ref_list = 533;
    static readonly RULE_table_ref = 534;
    static readonly RULE_table_ref_aux = 535;
    static readonly RULE_table_ref_aux_internal = 536;
    static readonly RULE_join_clause = 537;
    static readonly RULE_join_on_part = 538;
    static readonly RULE_join_using_part = 539;
    static readonly RULE_outer_join_type = 540;
    static readonly RULE_query_partition_clause = 541;
    static readonly RULE_flashback_query_clause = 542;
    static readonly RULE_pivot_clause = 543;
    static readonly RULE_pivot_element = 544;
    static readonly RULE_pivot_for_clause = 545;
    static readonly RULE_pivot_in_clause = 546;
    static readonly RULE_pivot_in_clause_element = 547;
    static readonly RULE_pivot_in_clause_elements = 548;
    static readonly RULE_unpivot_clause = 549;
    static readonly RULE_unpivot_in_clause = 550;
    static readonly RULE_unpivot_in_elements = 551;
    static readonly RULE_hierarchical_query_clause = 552;
    static readonly RULE_start_part = 553;
    static readonly RULE_group_by_clause = 554;
    static readonly RULE_group_by_elements = 555;
    static readonly RULE_rollup_cube_clause = 556;
    static readonly RULE_grouping_sets_clause = 557;
    static readonly RULE_grouping_sets_elements = 558;
    static readonly RULE_having_clause = 559;
    static readonly RULE_model_clause = 560;
    static readonly RULE_cell_reference_options = 561;
    static readonly RULE_return_rows_clause = 562;
    static readonly RULE_reference_model = 563;
    static readonly RULE_main_model = 564;
    static readonly RULE_model_column_clauses = 565;
    static readonly RULE_model_column_partition_part = 566;
    static readonly RULE_model_column_list = 567;
    static readonly RULE_model_column = 568;
    static readonly RULE_model_rules_clause = 569;
    static readonly RULE_model_rules_part = 570;
    static readonly RULE_model_rules_element = 571;
    static readonly RULE_cell_assignment = 572;
    static readonly RULE_model_iterate_clause = 573;
    static readonly RULE_until_part = 574;
    static readonly RULE_order_by_clause = 575;
    static readonly RULE_order_by_elements = 576;
    static readonly RULE_offset_clause = 577;
    static readonly RULE_fetch_clause = 578;
    static readonly RULE_for_update_clause = 579;
    static readonly RULE_for_update_of_part = 580;
    static readonly RULE_for_update_options = 581;
    static readonly RULE_update_statement = 582;
    static readonly RULE_update_set_clause = 583;
    static readonly RULE_column_based_update_set_clause = 584;
    static readonly RULE_delete_statement = 585;
    static readonly RULE_insert_statement = 586;
    static readonly RULE_single_table_insert = 587;
    static readonly RULE_multi_table_insert = 588;
    static readonly RULE_multi_table_element = 589;
    static readonly RULE_conditional_insert_clause = 590;
    static readonly RULE_conditional_insert_when_part = 591;
    static readonly RULE_conditional_insert_else_part = 592;
    static readonly RULE_insert_into_clause = 593;
    static readonly RULE_values_clause = 594;
    static readonly RULE_merge_statement = 595;
    static readonly RULE_merge_update_clause = 596;
    static readonly RULE_merge_element = 597;
    static readonly RULE_merge_update_delete_part = 598;
    static readonly RULE_merge_insert_clause = 599;
    static readonly RULE_selected_tableview = 600;
    static readonly RULE_lock_table_statement = 601;
    static readonly RULE_wait_nowait_part = 602;
    static readonly RULE_lock_table_element = 603;
    static readonly RULE_lock_mode = 604;
    static readonly RULE_general_table_ref = 605;
    static readonly RULE_static_returning_clause = 606;
    static readonly RULE_error_logging_clause = 607;
    static readonly RULE_error_logging_into_part = 608;
    static readonly RULE_error_logging_reject_part = 609;
    static readonly RULE_dml_table_expression_clause = 610;
    static readonly RULE_table_collection_expression = 611;
    static readonly RULE_subquery_restriction_clause = 612;
    static readonly RULE_sample_clause = 613;
    static readonly RULE_seed_part = 614;
    static readonly RULE_condition = 615;
    static readonly RULE_expressions = 616;
    static readonly RULE_expression = 617;
    static readonly RULE_cursor_expression = 618;
    static readonly RULE_logical_expression = 619;
    static readonly RULE_unary_logical_expression = 620;
    static readonly RULE_logical_operation = 621;
    static readonly RULE_multiset_expression = 622;
    static readonly RULE_relational_expression = 623;
    static readonly RULE_compound_expression = 624;
    static readonly RULE_relational_operator = 625;
    static readonly RULE_in_elements = 626;
    static readonly RULE_between_elements = 627;
    static readonly RULE_concatenation = 628;
    static readonly RULE_interval_expression = 629;
    static readonly RULE_model_expression = 630;
    static readonly RULE_model_expression_element = 631;
    static readonly RULE_single_column_for_loop = 632;
    static readonly RULE_multi_column_for_loop = 633;
    static readonly RULE_unary_expression = 634;
    static readonly RULE_case_statement = 635;
    static readonly RULE_simple_case_statement = 636;
    static readonly RULE_simple_case_when_part = 637;
    static readonly RULE_searched_case_statement = 638;
    static readonly RULE_searched_case_when_part = 639;
    static readonly RULE_case_else_part = 640;
    static readonly RULE_atom = 641;
    static readonly RULE_quantified_expression = 642;
    static readonly RULE_string_function = 643;
    static readonly RULE_standard_function = 644;
    static readonly RULE_literal = 645;
    static readonly RULE_numeric_function_wrapper = 646;
    static readonly RULE_numeric_function = 647;
    static readonly RULE_other_function = 648;
    static readonly RULE_over_clause_keyword = 649;
    static readonly RULE_within_or_over_clause_keyword = 650;
    static readonly RULE_standard_prediction_function_keyword = 651;
    static readonly RULE_over_clause = 652;
    static readonly RULE_windowing_clause = 653;
    static readonly RULE_windowing_type = 654;
    static readonly RULE_windowing_elements = 655;
    static readonly RULE_using_clause = 656;
    static readonly RULE_using_element = 657;
    static readonly RULE_collect_order_by_part = 658;
    static readonly RULE_within_or_over_part = 659;
    static readonly RULE_cost_matrix_clause = 660;
    static readonly RULE_xml_passing_clause = 661;
    static readonly RULE_xml_attributes_clause = 662;
    static readonly RULE_xml_namespaces_clause = 663;
    static readonly RULE_xml_table_column = 664;
    static readonly RULE_xml_general_default_part = 665;
    static readonly RULE_xml_multiuse_expression_element = 666;
    static readonly RULE_xmlroot_param_version_part = 667;
    static readonly RULE_xmlroot_param_standalone_part = 668;
    static readonly RULE_xmlserialize_param_enconding_part = 669;
    static readonly RULE_xmlserialize_param_version_part = 670;
    static readonly RULE_xmlserialize_param_ident_part = 671;
    static readonly RULE_sql_plus_command = 672;
    static readonly RULE_whenever_command = 673;
    static readonly RULE_set_command = 674;
    static readonly RULE_partition_extension_clause = 675;
    static readonly RULE_column_alias = 676;
    static readonly RULE_table_alias = 677;
    static readonly RULE_where_clause = 678;
    static readonly RULE_into_clause = 679;
    static readonly RULE_xml_column_name = 680;
    static readonly RULE_cost_class_name = 681;
    static readonly RULE_attribute_name = 682;
    static readonly RULE_savepoint_name = 683;
    static readonly RULE_rollback_segment_name = 684;
    static readonly RULE_table_var_name = 685;
    static readonly RULE_schema_name = 686;
    static readonly RULE_routine_name = 687;
    static readonly RULE_package_name = 688;
    static readonly RULE_implementation_type_name = 689;
    static readonly RULE_parameter_name = 690;
    static readonly RULE_reference_model_name = 691;
    static readonly RULE_main_model_name = 692;
    static readonly RULE_container_tableview_name = 693;
    static readonly RULE_aggregate_function_name = 694;
    static readonly RULE_query_name = 695;
    static readonly RULE_grantee_name = 696;
    static readonly RULE_role_name = 697;
    static readonly RULE_constraint_name = 698;
    static readonly RULE_label_name = 699;
    static readonly RULE_type_name = 700;
    static readonly RULE_sequence_name = 701;
    static readonly RULE_exception_name = 702;
    static readonly RULE_function_name = 703;
    static readonly RULE_procedure_name = 704;
    static readonly RULE_trigger_name = 705;
    static readonly RULE_variable_name = 706;
    static readonly RULE_index_name = 707;
    static readonly RULE_cursor_name = 708;
    static readonly RULE_record_name = 709;
    static readonly RULE_collection_name = 710;
    static readonly RULE_link_name = 711;
    static readonly RULE_column_name = 712;
    static readonly RULE_tableview_name = 713;
    static readonly RULE_xmltable = 714;
    static readonly RULE_char_set_name = 715;
    static readonly RULE_synonym_name = 716;
    static readonly RULE_schema_object_name = 717;
    static readonly RULE_dir_object_name = 718;
    static readonly RULE_user_object_name = 719;
    static readonly RULE_grant_object_name = 720;
    static readonly RULE_column_list = 721;
    static readonly RULE_paren_column_list = 722;
    static readonly RULE_keep_clause = 723;
    static readonly RULE_function_argument = 724;
    static readonly RULE_function_argument_analytic = 725;
    static readonly RULE_function_argument_modeling = 726;
    static readonly RULE_respect_or_ignore_nulls = 727;
    static readonly RULE_argument = 728;
    static readonly RULE_type_spec = 729;
    static readonly RULE_datatype = 730;
    static readonly RULE_precision_part = 731;
    static readonly RULE_native_datatype_element = 732;
    static readonly RULE_bind_variable = 733;
    static readonly RULE_general_element = 734;
    static readonly RULE_general_element_part = 735;
    static readonly RULE_table_element = 736;
    static readonly RULE_object_privilege = 737;
    static readonly RULE_system_privilege = 738;
    static readonly RULE_constant = 739;
    static readonly RULE_numeric = 740;
    static readonly RULE_numeric_negative = 741;
    static readonly RULE_quoted_string = 742;
    static readonly RULE_identifier = 743;
    static readonly RULE_id_expression = 744;
    static readonly RULE_outer_join_sign = 745;
    static readonly RULE_regular_id = 746;
    static readonly RULE_non_reserved_keywords_in_12c = 747;
    static readonly RULE_non_reserved_keywords_pre12c = 748;
    static readonly RULE_string_function_name = 749;
    static readonly RULE_numeric_function_name = 750;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException;
    constructor(input: TokenStream);
    sql_script(): Sql_scriptContext;
    unit_statement(): Unit_statementContext;
    drop_function(): Drop_functionContext;
    alter_function(): Alter_functionContext;
    create_function_body(): Create_function_bodyContext;
    parallel_enable_clause(): Parallel_enable_clauseContext;
    partition_by_clause(): Partition_by_clauseContext;
    result_cache_clause(): Result_cache_clauseContext;
    relies_on_part(): Relies_on_partContext;
    streaming_clause(): Streaming_clauseContext;
    drop_package(): Drop_packageContext;
    alter_package(): Alter_packageContext;
    create_package(): Create_packageContext;
    create_package_body(): Create_package_bodyContext;
    package_obj_spec(): Package_obj_specContext;
    procedure_spec(): Procedure_specContext;
    function_spec(): Function_specContext;
    package_obj_body(): Package_obj_bodyContext;
    drop_procedure(): Drop_procedureContext;
    alter_procedure(): Alter_procedureContext;
    function_body(): Function_bodyContext;
    procedure_body(): Procedure_bodyContext;
    create_procedure_body(): Create_procedure_bodyContext;
    drop_trigger(): Drop_triggerContext;
    alter_trigger(): Alter_triggerContext;
    create_trigger(): Create_triggerContext;
    trigger_follows_clause(): Trigger_follows_clauseContext;
    trigger_when_clause(): Trigger_when_clauseContext;
    simple_dml_trigger(): Simple_dml_triggerContext;
    for_each_row(): For_each_rowContext;
    compound_dml_trigger(): Compound_dml_triggerContext;
    non_dml_trigger(): Non_dml_triggerContext;
    trigger_body(): Trigger_bodyContext;
    routine_clause(): Routine_clauseContext;
    compound_trigger_block(): Compound_trigger_blockContext;
    timing_point_section(): Timing_point_sectionContext;
    non_dml_event(): Non_dml_eventContext;
    dml_event_clause(): Dml_event_clauseContext;
    dml_event_element(): Dml_event_elementContext;
    dml_event_nested_clause(): Dml_event_nested_clauseContext;
    referencing_clause(): Referencing_clauseContext;
    referencing_element(): Referencing_elementContext;
    drop_type(): Drop_typeContext;
    alter_type(): Alter_typeContext;
    compile_type_clause(): Compile_type_clauseContext;
    replace_type_clause(): Replace_type_clauseContext;
    alter_method_spec(): Alter_method_specContext;
    alter_method_element(): Alter_method_elementContext;
    alter_attribute_definition(): Alter_attribute_definitionContext;
    attribute_definition(): Attribute_definitionContext;
    alter_collection_clauses(): Alter_collection_clausesContext;
    dependent_handling_clause(): Dependent_handling_clauseContext;
    dependent_exceptions_part(): Dependent_exceptions_partContext;
    create_type(): Create_typeContext;
    type_definition(): Type_definitionContext;
    object_type_def(): Object_type_defContext;
    object_as_part(): Object_as_partContext;
    object_under_part(): Object_under_partContext;
    nested_table_type_def(): Nested_table_type_defContext;
    sqlj_object_type(): Sqlj_object_typeContext;
    type_body(): Type_bodyContext;
    type_body_elements(): Type_body_elementsContext;
    map_order_func_declaration(): Map_order_func_declarationContext;
    subprog_decl_in_type(): Subprog_decl_in_typeContext;
    proc_decl_in_type(): Proc_decl_in_typeContext;
    func_decl_in_type(): Func_decl_in_typeContext;
    constructor_declaration(): Constructor_declarationContext;
    modifier_clause(): Modifier_clauseContext;
    object_member_spec(): Object_member_specContext;
    sqlj_object_type_attr(): Sqlj_object_type_attrContext;
    element_spec(): Element_specContext;
    element_spec_options(): Element_spec_optionsContext;
    subprogram_spec(): Subprogram_specContext;
    overriding_subprogram_spec(): Overriding_subprogram_specContext;
    overriding_function_spec(): Overriding_function_specContext;
    type_procedure_spec(): Type_procedure_specContext;
    type_function_spec(): Type_function_specContext;
    constructor_spec(): Constructor_specContext;
    map_order_function_spec(): Map_order_function_specContext;
    pragma_clause(): Pragma_clauseContext;
    pragma_elements(): Pragma_elementsContext;
    type_elements_parameter(): Type_elements_parameterContext;
    drop_sequence(): Drop_sequenceContext;
    alter_sequence(): Alter_sequenceContext;
    alter_session(): Alter_sessionContext;
    alter_session_set_clause(): Alter_session_set_clauseContext;
    create_sequence(): Create_sequenceContext;
    sequence_spec(): Sequence_specContext;
    sequence_start_clause(): Sequence_start_clauseContext;
    create_index(): Create_indexContext;
    cluster_index_clause(): Cluster_index_clauseContext;
    cluster_name(): Cluster_nameContext;
    table_index_clause(): Table_index_clauseContext;
    bitmap_join_index_clause(): Bitmap_join_index_clauseContext;
    index_expr(): Index_exprContext;
    index_properties(): Index_propertiesContext;
    domain_index_clause(): Domain_index_clauseContext;
    local_domain_index_clause(): Local_domain_index_clauseContext;
    xmlindex_clause(): Xmlindex_clauseContext;
    local_xmlindex_clause(): Local_xmlindex_clauseContext;
    global_partitioned_index(): Global_partitioned_indexContext;
    index_partitioning_clause(): Index_partitioning_clauseContext;
    local_partitioned_index(): Local_partitioned_indexContext;
    on_range_partitioned_table(): On_range_partitioned_tableContext;
    on_list_partitioned_table(): On_list_partitioned_tableContext;
    partitioned_table(): Partitioned_tableContext;
    on_hash_partitioned_table(): On_hash_partitioned_tableContext;
    on_hash_partitioned_clause(): On_hash_partitioned_clauseContext;
    on_comp_partitioned_table(): On_comp_partitioned_tableContext;
    on_comp_partitioned_clause(): On_comp_partitioned_clauseContext;
    index_subpartition_clause(): Index_subpartition_clauseContext;
    index_subpartition_subclause(): Index_subpartition_subclauseContext;
    odci_parameters(): Odci_parametersContext;
    indextype(): IndextypeContext;
    alter_index(): Alter_indexContext;
    alter_index_ops_set1(): Alter_index_ops_set1Context;
    alter_index_ops_set2(): Alter_index_ops_set2Context;
    visible_or_invisible(): Visible_or_invisibleContext;
    monitoring_nomonitoring(): Monitoring_nomonitoringContext;
    rebuild_clause(): Rebuild_clauseContext;
    alter_index_partitioning(): Alter_index_partitioningContext;
    modify_index_default_attrs(): Modify_index_default_attrsContext;
    add_hash_index_partition(): Add_hash_index_partitionContext;
    coalesce_index_partition(): Coalesce_index_partitionContext;
    modify_index_partition(): Modify_index_partitionContext;
    modify_index_partitions_ops(): Modify_index_partitions_opsContext;
    rename_index_partition(): Rename_index_partitionContext;
    drop_index_partition(): Drop_index_partitionContext;
    split_index_partition(): Split_index_partitionContext;
    index_partition_description(): Index_partition_descriptionContext;
    modify_index_subpartition(): Modify_index_subpartitionContext;
    partition_name_old(): Partition_name_oldContext;
    new_partition_name(): New_partition_nameContext;
    new_index_name(): New_index_nameContext;
    create_user(): Create_userContext;
    alter_user(): Alter_userContext;
    alter_identified_by(): Alter_identified_byContext;
    identified_by(): Identified_byContext;
    identified_other_clause(): Identified_other_clauseContext;
    user_tablespace_clause(): User_tablespace_clauseContext;
    quota_clause(): Quota_clauseContext;
    profile_clause(): Profile_clauseContext;
    role_clause(): Role_clauseContext;
    user_default_role_clause(): User_default_role_clauseContext;
    password_expire_clause(): Password_expire_clauseContext;
    user_lock_clause(): User_lock_clauseContext;
    user_editions_clause(): User_editions_clauseContext;
    alter_user_editions_clause(): Alter_user_editions_clauseContext;
    proxy_clause(): Proxy_clauseContext;
    container_names(): Container_namesContext;
    set_container_data(): Set_container_dataContext;
    add_rem_container_data(): Add_rem_container_dataContext;
    container_data_clause(): Container_data_clauseContext;
    analyze(): AnalyzeContext;
    partition_extention_clause(): Partition_extention_clauseContext;
    validation_clauses(): Validation_clausesContext;
    online_or_offline(): Online_or_offlineContext;
    into_clause1(): Into_clause1Context;
    partition_key_value(): Partition_key_valueContext;
    subpartition_key_value(): Subpartition_key_valueContext;
    associate_statistics(): Associate_statisticsContext;
    column_association(): Column_associationContext;
    function_association(): Function_associationContext;
    indextype_name(): Indextype_nameContext;
    using_statistics_type(): Using_statistics_typeContext;
    statistics_type_name(): Statistics_type_nameContext;
    default_cost_clause(): Default_cost_clauseContext;
    cpu_cost(): Cpu_costContext;
    io_cost(): Io_costContext;
    network_cost(): Network_costContext;
    default_selectivity_clause(): Default_selectivity_clauseContext;
    default_selectivity(): Default_selectivityContext;
    storage_table_clause(): Storage_table_clauseContext;
    unified_auditing(): Unified_auditingContext;
    policy_name(): Policy_nameContext;
    audit_traditional(): Audit_traditionalContext;
    audit_direct_path(): Audit_direct_pathContext;
    audit_container_clause(): Audit_container_clauseContext;
    audit_operation_clause(): Audit_operation_clauseContext;
    auditing_by_clause(): Auditing_by_clauseContext;
    audit_user(): Audit_userContext;
    audit_schema_object_clause(): Audit_schema_object_clauseContext;
    sql_operation(): Sql_operationContext;
    auditing_on_clause(): Auditing_on_clauseContext;
    model_name(): Model_nameContext;
    object_name(): Object_nameContext;
    profile_name(): Profile_nameContext;
    sql_statement_shortcut(): Sql_statement_shortcutContext;
    drop_index(): Drop_indexContext;
    rename_object(): Rename_objectContext;
    grant_statement(): Grant_statementContext;
    container_clause(): Container_clauseContext;
    create_directory(): Create_directoryContext;
    directory_name(): Directory_nameContext;
    directory_path(): Directory_pathContext;
    alter_library(): Alter_libraryContext;
    library_editionable(): Library_editionableContext;
    library_debug(): Library_debugContext;
    compiler_parameters_clause(): Compiler_parameters_clauseContext;
    parameter_value(): Parameter_valueContext;
    library_name(): Library_nameContext;
    alter_view(): Alter_viewContext;
    alter_view_editionable(): Alter_view_editionableContext;
    create_view(): Create_viewContext;
    view_options(): View_optionsContext;
    view_alias_constraint(): View_alias_constraintContext;
    object_view_clause(): Object_view_clauseContext;
    inline_constraint(): Inline_constraintContext;
    inline_ref_constraint(): Inline_ref_constraintContext;
    out_of_line_ref_constraint(): Out_of_line_ref_constraintContext;
    out_of_line_constraint(): Out_of_line_constraintContext;
    constraint_state(): Constraint_stateContext;
    alter_tablespace(): Alter_tablespaceContext;
    datafile_tempfile_clauses(): Datafile_tempfile_clausesContext;
    tablespace_logging_clauses(): Tablespace_logging_clausesContext;
    tablespace_group_clause(): Tablespace_group_clauseContext;
    tablespace_group_name(): Tablespace_group_nameContext;
    tablespace_state_clauses(): Tablespace_state_clausesContext;
    flashback_mode_clause(): Flashback_mode_clauseContext;
    new_tablespace_name(): New_tablespace_nameContext;
    create_tablespace(): Create_tablespaceContext;
    permanent_tablespace_clause(): Permanent_tablespace_clauseContext;
    tablespace_encryption_spec(): Tablespace_encryption_specContext;
    logging_clause(): Logging_clauseContext;
    extent_management_clause(): Extent_management_clauseContext;
    segment_management_clause(): Segment_management_clauseContext;
    temporary_tablespace_clause(): Temporary_tablespace_clauseContext;
    undo_tablespace_clause(): Undo_tablespace_clauseContext;
    tablespace_retention_clause(): Tablespace_retention_clauseContext;
    datafile_specification(): Datafile_specificationContext;
    tempfile_specification(): Tempfile_specificationContext;
    datafile_tempfile_spec(): Datafile_tempfile_specContext;
    redo_log_file_spec(): Redo_log_file_specContext;
    autoextend_clause(): Autoextend_clauseContext;
    maxsize_clause(): Maxsize_clauseContext;
    build_clause(): Build_clauseContext;
    parallel_clause(): Parallel_clauseContext;
    alter_materialized_view(): Alter_materialized_viewContext;
    alter_mv_option1(): Alter_mv_option1Context;
    alter_mv_refresh(): Alter_mv_refreshContext;
    rollback_segment(): Rollback_segmentContext;
    modify_mv_column_clause(): Modify_mv_column_clauseContext;
    alter_materialized_view_log(): Alter_materialized_view_logContext;
    add_mv_log_column_clause(): Add_mv_log_column_clauseContext;
    move_mv_log_clause(): Move_mv_log_clauseContext;
    mv_log_augmentation(): Mv_log_augmentationContext;
    datetime_expr(): Datetime_exprContext;
    interval_expr(): Interval_exprContext;
    synchronous_or_asynchronous(): Synchronous_or_asynchronousContext;
    including_or_excluding(): Including_or_excludingContext;
    create_materialized_view_log(): Create_materialized_view_logContext;
    new_values_clause(): New_values_clauseContext;
    mv_log_purge_clause(): Mv_log_purge_clauseContext;
    create_materialized_view(): Create_materialized_viewContext;
    create_mv_refresh(): Create_mv_refreshContext;
    create_context(): Create_contextContext;
    oracle_namespace(): Oracle_namespaceContext;
    create_cluster(): Create_clusterContext;
    create_table(): Create_tableContext;
    xmltype_table(): Xmltype_tableContext;
    xmltype_virtual_columns(): Xmltype_virtual_columnsContext;
    xmltype_column_properties(): Xmltype_column_propertiesContext;
    xmltype_storage(): Xmltype_storageContext;
    xmlschema_spec(): Xmlschema_specContext;
    object_table(): Object_tableContext;
    oid_index_clause(): Oid_index_clauseContext;
    oid_clause(): Oid_clauseContext;
    object_properties(): Object_propertiesContext;
    object_table_substitution(): Object_table_substitutionContext;
    relational_table(): Relational_tableContext;
    relational_property(): Relational_propertyContext;
    table_partitioning_clauses(): Table_partitioning_clausesContext;
    range_partitions(): Range_partitionsContext;
    list_partitions(): List_partitionsContext;
    hash_partitions(): Hash_partitionsContext;
    individual_hash_partitions(): Individual_hash_partitionsContext;
    hash_partitions_by_quantity(): Hash_partitions_by_quantityContext;
    hash_partition_quantity(): Hash_partition_quantityContext;
    composite_range_partitions(): Composite_range_partitionsContext;
    composite_list_partitions(): Composite_list_partitionsContext;
    composite_hash_partitions(): Composite_hash_partitionsContext;
    reference_partitioning(): Reference_partitioningContext;
    reference_partition_desc(): Reference_partition_descContext;
    system_partitioning(): System_partitioningContext;
    range_partition_desc(): Range_partition_descContext;
    list_partition_desc(): List_partition_descContext;
    subpartition_template(): Subpartition_templateContext;
    hash_subpartition_quantity(): Hash_subpartition_quantityContext;
    subpartition_by_range(): Subpartition_by_rangeContext;
    subpartition_by_list(): Subpartition_by_listContext;
    subpartition_by_hash(): Subpartition_by_hashContext;
    subpartition_name(): Subpartition_nameContext;
    range_subpartition_desc(): Range_subpartition_descContext;
    list_subpartition_desc(): List_subpartition_descContext;
    individual_hash_subparts(): Individual_hash_subpartsContext;
    hash_subparts_by_quantity(): Hash_subparts_by_quantityContext;
    range_values_clause(): Range_values_clauseContext;
    list_values_clause(): List_values_clauseContext;
    table_partition_description(): Table_partition_descriptionContext;
    partitioning_storage_clause(): Partitioning_storage_clauseContext;
    lob_partitioning_storage(): Lob_partitioning_storageContext;
    datatype_null_enable(): Datatype_null_enableContext;
    size_clause(): Size_clauseContext;
    table_compression(): Table_compressionContext;
    physical_attributes_clause(): Physical_attributes_clauseContext;
    storage_clause(): Storage_clauseContext;
    deferred_segment_creation(): Deferred_segment_creationContext;
    segment_attributes_clause(): Segment_attributes_clauseContext;
    physical_properties(): Physical_propertiesContext;
    row_movement_clause(): Row_movement_clauseContext;
    flashback_archive_clause(): Flashback_archive_clauseContext;
    log_grp(): Log_grpContext;
    supplemental_table_logging(): Supplemental_table_loggingContext;
    supplemental_log_grp_clause(): Supplemental_log_grp_clauseContext;
    supplemental_id_key_clause(): Supplemental_id_key_clauseContext;
    allocate_extent_clause(): Allocate_extent_clauseContext;
    deallocate_unused_clause(): Deallocate_unused_clauseContext;
    shrink_clause(): Shrink_clauseContext;
    records_per_block_clause(): Records_per_block_clauseContext;
    upgrade_table_clause(): Upgrade_table_clauseContext;
    truncate_table(): Truncate_tableContext;
    drop_table(): Drop_tableContext;
    drop_view(): Drop_viewContext;
    comment_on_column(): Comment_on_columnContext;
    enable_or_disable(): Enable_or_disableContext;
    allow_or_disallow(): Allow_or_disallowContext;
    create_synonym(): Create_synonymContext;
    comment_on_table(): Comment_on_tableContext;
    alter_cluster(): Alter_clusterContext;
    cache_or_nocache(): Cache_or_nocacheContext;
    database_name(): Database_nameContext;
    alter_database(): Alter_databaseContext;
    startup_clauses(): Startup_clausesContext;
    resetlogs_or_noresetlogs(): Resetlogs_or_noresetlogsContext;
    upgrade_or_downgrade(): Upgrade_or_downgradeContext;
    recovery_clauses(): Recovery_clausesContext;
    begin_or_end(): Begin_or_endContext;
    general_recovery(): General_recoveryContext;
    full_database_recovery(): Full_database_recoveryContext;
    partial_database_recovery(): Partial_database_recoveryContext;
    partial_database_recovery_10g(): Partial_database_recovery_10gContext;
    managed_standby_recovery(): Managed_standby_recoveryContext;
    db_name(): Db_nameContext;
    database_file_clauses(): Database_file_clausesContext;
    create_datafile_clause(): Create_datafile_clauseContext;
    alter_datafile_clause(): Alter_datafile_clauseContext;
    alter_tempfile_clause(): Alter_tempfile_clauseContext;
    logfile_clauses(): Logfile_clausesContext;
    add_logfile_clauses(): Add_logfile_clausesContext;
    log_file_group(): Log_file_groupContext;
    drop_logfile_clauses(): Drop_logfile_clausesContext;
    switch_logfile_clause(): Switch_logfile_clauseContext;
    supplemental_db_logging(): Supplemental_db_loggingContext;
    add_or_drop(): Add_or_dropContext;
    supplemental_plsql_clause(): Supplemental_plsql_clauseContext;
    logfile_descriptor(): Logfile_descriptorContext;
    controlfile_clauses(): Controlfile_clausesContext;
    trace_file_clause(): Trace_file_clauseContext;
    standby_database_clauses(): Standby_database_clausesContext;
    activate_standby_db_clause(): Activate_standby_db_clauseContext;
    maximize_standby_db_clause(): Maximize_standby_db_clauseContext;
    register_logfile_clause(): Register_logfile_clauseContext;
    commit_switchover_clause(): Commit_switchover_clauseContext;
    start_standby_clause(): Start_standby_clauseContext;
    stop_standby_clause(): Stop_standby_clauseContext;
    convert_database_clause(): Convert_database_clauseContext;
    default_settings_clause(): Default_settings_clauseContext;
    set_time_zone_clause(): Set_time_zone_clauseContext;
    instance_clauses(): Instance_clausesContext;
    security_clause(): Security_clauseContext;
    domain(): DomainContext;
    database(): DatabaseContext;
    edition_name(): Edition_nameContext;
    filenumber(): FilenumberContext;
    filename(): FilenameContext;
    alter_table(): Alter_tableContext;
    alter_table_properties(): Alter_table_propertiesContext;
    alter_table_properties_1(): Alter_table_properties_1Context;
    alter_iot_clauses(): Alter_iot_clausesContext;
    alter_mapping_table_clause(): Alter_mapping_table_clauseContext;
    alter_overflow_clause(): Alter_overflow_clauseContext;
    add_overflow_clause(): Add_overflow_clauseContext;
    enable_disable_clause(): Enable_disable_clauseContext;
    using_index_clause(): Using_index_clauseContext;
    index_attributes(): Index_attributesContext;
    sort_or_nosort(): Sort_or_nosortContext;
    exceptions_clause(): Exceptions_clauseContext;
    move_table_clause(): Move_table_clauseContext;
    index_org_table_clause(): Index_org_table_clauseContext;
    mapping_table_clause(): Mapping_table_clauseContext;
    key_compression(): Key_compressionContext;
    index_org_overflow_clause(): Index_org_overflow_clauseContext;
    column_clauses(): Column_clausesContext;
    modify_collection_retrieval(): Modify_collection_retrievalContext;
    collection_item(): Collection_itemContext;
    rename_column_clause(): Rename_column_clauseContext;
    old_column_name(): Old_column_nameContext;
    new_column_name(): New_column_nameContext;
    add_modify_drop_column_clauses(): Add_modify_drop_column_clausesContext;
    drop_column_clause(): Drop_column_clauseContext;
    modify_column_clauses(): Modify_column_clausesContext;
    modify_col_properties(): Modify_col_propertiesContext;
    modify_col_substitutable(): Modify_col_substitutableContext;
    add_column_clause(): Add_column_clauseContext;
    alter_varray_col_properties(): Alter_varray_col_propertiesContext;
    varray_col_properties(): Varray_col_propertiesContext;
    varray_storage_clause(): Varray_storage_clauseContext;
    lob_segname(): Lob_segnameContext;
    lob_item(): Lob_itemContext;
    lob_storage_parameters(): Lob_storage_parametersContext;
    lob_storage_clause(): Lob_storage_clauseContext;
    modify_lob_storage_clause(): Modify_lob_storage_clauseContext;
    modify_lob_parameters(): Modify_lob_parametersContext;
    lob_parameters(): Lob_parametersContext;
    lob_deduplicate_clause(): Lob_deduplicate_clauseContext;
    lob_compression_clause(): Lob_compression_clauseContext;
    lob_retention_clause(): Lob_retention_clauseContext;
    encryption_spec(): Encryption_specContext;
    tablespace(): TablespaceContext;
    varray_item(): Varray_itemContext;
    column_properties(): Column_propertiesContext;
    period_definition(): Period_definitionContext;
    start_time_column(): Start_time_columnContext;
    end_time_column(): End_time_columnContext;
    column_definition(): Column_definitionContext;
    virtual_column_definition(): Virtual_column_definitionContext;
    autogenerated_sequence_definition(): Autogenerated_sequence_definitionContext;
    out_of_line_part_storage(): Out_of_line_part_storageContext;
    nested_table_col_properties(): Nested_table_col_propertiesContext;
    nested_item(): Nested_itemContext;
    substitutable_column_clause(): Substitutable_column_clauseContext;
    partition_name(): Partition_nameContext;
    supplemental_logging_props(): Supplemental_logging_propsContext;
    column_or_attribute(): Column_or_attributeContext;
    object_type_col_properties(): Object_type_col_propertiesContext;
    constraint_clauses(): Constraint_clausesContext;
    old_constraint_name(): Old_constraint_nameContext;
    new_constraint_name(): New_constraint_nameContext;
    drop_constraint_clause(): Drop_constraint_clauseContext;
    drop_primary_key_or_unique_or_generic_clause(): Drop_primary_key_or_unique_or_generic_clauseContext;
    add_constraint(): Add_constraintContext;
    add_constraint_clause(): Add_constraint_clauseContext;
    check_constraint(): Check_constraintContext;
    drop_constraint(): Drop_constraintContext;
    enable_constraint(): Enable_constraintContext;
    disable_constraint(): Disable_constraintContext;
    foreign_key_clause(): Foreign_key_clauseContext;
    references_clause(): References_clauseContext;
    on_delete_clause(): On_delete_clauseContext;
    unique_key_clause(): Unique_key_clauseContext;
    primary_key_clause(): Primary_key_clauseContext;
    anonymous_block(): Anonymous_blockContext;
    invoker_rights_clause(): Invoker_rights_clauseContext;
    call_spec(): Call_specContext;
    java_spec(): Java_specContext;
    c_spec(): C_specContext;
    c_agent_in_clause(): C_agent_in_clauseContext;
    c_parameters_clause(): C_parameters_clauseContext;
    parameter(): ParameterContext;
    default_value_part(): Default_value_partContext;
    seq_of_declare_specs(): Seq_of_declare_specsContext;
    declare_spec(): Declare_specContext;
    variable_declaration(): Variable_declarationContext;
    subtype_declaration(): Subtype_declarationContext;
    cursor_declaration(): Cursor_declarationContext;
    parameter_spec(): Parameter_specContext;
    exception_declaration(): Exception_declarationContext;
    pragma_declaration(): Pragma_declarationContext;
    record_type_def(): Record_type_defContext;
    field_spec(): Field_specContext;
    ref_cursor_type_def(): Ref_cursor_type_defContext;
    type_declaration(): Type_declarationContext;
    table_type_def(): Table_type_defContext;
    table_indexed_by_part(): Table_indexed_by_partContext;
    varray_type_def(): Varray_type_defContext;
    seq_of_statements(): Seq_of_statementsContext;
    label_declaration(): Label_declarationContext;
    statement(): StatementContext;
    swallow_to_semi(): Swallow_to_semiContext;
    assignment_statement(): Assignment_statementContext;
    continue_statement(): Continue_statementContext;
    exit_statement(): Exit_statementContext;
    goto_statement(): Goto_statementContext;
    if_statement(): If_statementContext;
    elsif_part(): Elsif_partContext;
    else_part(): Else_partContext;
    loop_statement(): Loop_statementContext;
    cursor_loop_param(): Cursor_loop_paramContext;
    forall_statement(): Forall_statementContext;
    bounds_clause(): Bounds_clauseContext;
    between_bound(): Between_boundContext;
    lower_bound(): Lower_boundContext;
    upper_bound(): Upper_boundContext;
    null_statement(): Null_statementContext;
    raise_statement(): Raise_statementContext;
    return_statement(): Return_statementContext;
    function_call(): Function_callContext;
    procedure_call(): Procedure_callContext;
    pipe_row_statement(): Pipe_row_statementContext;
    body(): BodyContext;
    exception_handler(): Exception_handlerContext;
    trigger_block(): Trigger_blockContext;
    block(): BlockContext;
    sql_statement(): Sql_statementContext;
    execute_immediate(): Execute_immediateContext;
    dynamic_returning_clause(): Dynamic_returning_clauseContext;
    data_manipulation_language_statements(): Data_manipulation_language_statementsContext;
    cursor_manipulation_statements(): Cursor_manipulation_statementsContext;
    close_statement(): Close_statementContext;
    open_statement(): Open_statementContext;
    fetch_statement(): Fetch_statementContext;
    open_for_statement(): Open_for_statementContext;
    transaction_control_statements(): Transaction_control_statementsContext;
    set_transaction_command(): Set_transaction_commandContext;
    set_constraint_command(): Set_constraint_commandContext;
    commit_statement(): Commit_statementContext;
    write_clause(): Write_clauseContext;
    rollback_statement(): Rollback_statementContext;
    savepoint_statement(): Savepoint_statementContext;
    explain_statement(): Explain_statementContext;
    select_only_statement(): Select_only_statementContext;
    select_statement(): Select_statementContext;
    subquery_factoring_clause(): Subquery_factoring_clauseContext;
    factoring_element(): Factoring_elementContext;
    search_clause(): Search_clauseContext;
    cycle_clause(): Cycle_clauseContext;
    subquery(): SubqueryContext;
    subquery_basic_elements(): Subquery_basic_elementsContext;
    subquery_operation_part(): Subquery_operation_partContext;
    query_block(): Query_blockContext;
    selected_list(): Selected_listContext;
    from_clause(): From_clauseContext;
    select_list_elements(): Select_list_elementsContext;
    table_ref_list(): Table_ref_listContext;
    table_ref(): Table_refContext;
    table_ref_aux(): Table_ref_auxContext;
    table_ref_aux_internal(): Table_ref_aux_internalContext;
    join_clause(): Join_clauseContext;
    join_on_part(): Join_on_partContext;
    join_using_part(): Join_using_partContext;
    outer_join_type(): Outer_join_typeContext;
    query_partition_clause(): Query_partition_clauseContext;
    flashback_query_clause(): Flashback_query_clauseContext;
    pivot_clause(): Pivot_clauseContext;
    pivot_element(): Pivot_elementContext;
    pivot_for_clause(): Pivot_for_clauseContext;
    pivot_in_clause(): Pivot_in_clauseContext;
    pivot_in_clause_element(): Pivot_in_clause_elementContext;
    pivot_in_clause_elements(): Pivot_in_clause_elementsContext;
    unpivot_clause(): Unpivot_clauseContext;
    unpivot_in_clause(): Unpivot_in_clauseContext;
    unpivot_in_elements(): Unpivot_in_elementsContext;
    hierarchical_query_clause(): Hierarchical_query_clauseContext;
    start_part(): Start_partContext;
    group_by_clause(): Group_by_clauseContext;
    group_by_elements(): Group_by_elementsContext;
    rollup_cube_clause(): Rollup_cube_clauseContext;
    grouping_sets_clause(): Grouping_sets_clauseContext;
    grouping_sets_elements(): Grouping_sets_elementsContext;
    having_clause(): Having_clauseContext;
    model_clause(): Model_clauseContext;
    cell_reference_options(): Cell_reference_optionsContext;
    return_rows_clause(): Return_rows_clauseContext;
    reference_model(): Reference_modelContext;
    main_model(): Main_modelContext;
    model_column_clauses(): Model_column_clausesContext;
    model_column_partition_part(): Model_column_partition_partContext;
    model_column_list(): Model_column_listContext;
    model_column(): Model_columnContext;
    model_rules_clause(): Model_rules_clauseContext;
    model_rules_part(): Model_rules_partContext;
    model_rules_element(): Model_rules_elementContext;
    cell_assignment(): Cell_assignmentContext;
    model_iterate_clause(): Model_iterate_clauseContext;
    until_part(): Until_partContext;
    order_by_clause(): Order_by_clauseContext;
    order_by_elements(): Order_by_elementsContext;
    offset_clause(): Offset_clauseContext;
    fetch_clause(): Fetch_clauseContext;
    for_update_clause(): For_update_clauseContext;
    for_update_of_part(): For_update_of_partContext;
    for_update_options(): For_update_optionsContext;
    update_statement(): Update_statementContext;
    update_set_clause(): Update_set_clauseContext;
    column_based_update_set_clause(): Column_based_update_set_clauseContext;
    delete_statement(): Delete_statementContext;
    insert_statement(): Insert_statementContext;
    single_table_insert(): Single_table_insertContext;
    multi_table_insert(): Multi_table_insertContext;
    multi_table_element(): Multi_table_elementContext;
    conditional_insert_clause(): Conditional_insert_clauseContext;
    conditional_insert_when_part(): Conditional_insert_when_partContext;
    conditional_insert_else_part(): Conditional_insert_else_partContext;
    insert_into_clause(): Insert_into_clauseContext;
    values_clause(): Values_clauseContext;
    merge_statement(): Merge_statementContext;
    merge_update_clause(): Merge_update_clauseContext;
    merge_element(): Merge_elementContext;
    merge_update_delete_part(): Merge_update_delete_partContext;
    merge_insert_clause(): Merge_insert_clauseContext;
    selected_tableview(): Selected_tableviewContext;
    lock_table_statement(): Lock_table_statementContext;
    wait_nowait_part(): Wait_nowait_partContext;
    lock_table_element(): Lock_table_elementContext;
    lock_mode(): Lock_modeContext;
    general_table_ref(): General_table_refContext;
    static_returning_clause(): Static_returning_clauseContext;
    error_logging_clause(): Error_logging_clauseContext;
    error_logging_into_part(): Error_logging_into_partContext;
    error_logging_reject_part(): Error_logging_reject_partContext;
    dml_table_expression_clause(): Dml_table_expression_clauseContext;
    table_collection_expression(): Table_collection_expressionContext;
    subquery_restriction_clause(): Subquery_restriction_clauseContext;
    sample_clause(): Sample_clauseContext;
    seed_part(): Seed_partContext;
    condition(): ConditionContext;
    expressions(): ExpressionsContext;
    expression(): ExpressionContext;
    cursor_expression(): Cursor_expressionContext;
    logical_expression(): Logical_expressionContext;
    logical_expression(_p: number): Logical_expressionContext;
    unary_logical_expression(): Unary_logical_expressionContext;
    logical_operation(): Logical_operationContext;
    multiset_expression(): Multiset_expressionContext;
    relational_expression(): Relational_expressionContext;
    relational_expression(_p: number): Relational_expressionContext;
    compound_expression(): Compound_expressionContext;
    relational_operator(): Relational_operatorContext;
    in_elements(): In_elementsContext;
    between_elements(): Between_elementsContext;
    concatenation(): ConcatenationContext;
    concatenation(_p: number): ConcatenationContext;
    interval_expression(): Interval_expressionContext;
    model_expression(): Model_expressionContext;
    model_expression_element(): Model_expression_elementContext;
    single_column_for_loop(): Single_column_for_loopContext;
    multi_column_for_loop(): Multi_column_for_loopContext;
    unary_expression(): Unary_expressionContext;
    case_statement(): Case_statementContext;
    simple_case_statement(): Simple_case_statementContext;
    simple_case_when_part(): Simple_case_when_partContext;
    searched_case_statement(): Searched_case_statementContext;
    searched_case_when_part(): Searched_case_when_partContext;
    case_else_part(): Case_else_partContext;
    atom(): AtomContext;
    quantified_expression(): Quantified_expressionContext;
    string_function(): String_functionContext;
    standard_function(): Standard_functionContext;
    literal(): LiteralContext;
    numeric_function_wrapper(): Numeric_function_wrapperContext;
    numeric_function(): Numeric_functionContext;
    other_function(): Other_functionContext;
    over_clause_keyword(): Over_clause_keywordContext;
    within_or_over_clause_keyword(): Within_or_over_clause_keywordContext;
    standard_prediction_function_keyword(): Standard_prediction_function_keywordContext;
    over_clause(): Over_clauseContext;
    windowing_clause(): Windowing_clauseContext;
    windowing_type(): Windowing_typeContext;
    windowing_elements(): Windowing_elementsContext;
    using_clause(): Using_clauseContext;
    using_element(): Using_elementContext;
    collect_order_by_part(): Collect_order_by_partContext;
    within_or_over_part(): Within_or_over_partContext;
    cost_matrix_clause(): Cost_matrix_clauseContext;
    xml_passing_clause(): Xml_passing_clauseContext;
    xml_attributes_clause(): Xml_attributes_clauseContext;
    xml_namespaces_clause(): Xml_namespaces_clauseContext;
    xml_table_column(): Xml_table_columnContext;
    xml_general_default_part(): Xml_general_default_partContext;
    xml_multiuse_expression_element(): Xml_multiuse_expression_elementContext;
    xmlroot_param_version_part(): Xmlroot_param_version_partContext;
    xmlroot_param_standalone_part(): Xmlroot_param_standalone_partContext;
    xmlserialize_param_enconding_part(): Xmlserialize_param_enconding_partContext;
    xmlserialize_param_version_part(): Xmlserialize_param_version_partContext;
    xmlserialize_param_ident_part(): Xmlserialize_param_ident_partContext;
    sql_plus_command(): Sql_plus_commandContext;
    whenever_command(): Whenever_commandContext;
    set_command(): Set_commandContext;
    partition_extension_clause(): Partition_extension_clauseContext;
    column_alias(): Column_aliasContext;
    table_alias(): Table_aliasContext;
    where_clause(): Where_clauseContext;
    into_clause(): Into_clauseContext;
    xml_column_name(): Xml_column_nameContext;
    cost_class_name(): Cost_class_nameContext;
    attribute_name(): Attribute_nameContext;
    savepoint_name(): Savepoint_nameContext;
    rollback_segment_name(): Rollback_segment_nameContext;
    table_var_name(): Table_var_nameContext;
    schema_name(): Schema_nameContext;
    routine_name(): Routine_nameContext;
    package_name(): Package_nameContext;
    implementation_type_name(): Implementation_type_nameContext;
    parameter_name(): Parameter_nameContext;
    reference_model_name(): Reference_model_nameContext;
    main_model_name(): Main_model_nameContext;
    container_tableview_name(): Container_tableview_nameContext;
    aggregate_function_name(): Aggregate_function_nameContext;
    query_name(): Query_nameContext;
    grantee_name(): Grantee_nameContext;
    role_name(): Role_nameContext;
    constraint_name(): Constraint_nameContext;
    label_name(): Label_nameContext;
    type_name(): Type_nameContext;
    sequence_name(): Sequence_nameContext;
    exception_name(): Exception_nameContext;
    function_name(): Function_nameContext;
    procedure_name(): Procedure_nameContext;
    trigger_name(): Trigger_nameContext;
    variable_name(): Variable_nameContext;
    index_name(): Index_nameContext;
    cursor_name(): Cursor_nameContext;
    record_name(): Record_nameContext;
    collection_name(): Collection_nameContext;
    link_name(): Link_nameContext;
    column_name(): Column_nameContext;
    tableview_name(): Tableview_nameContext;
    xmltable(): XmltableContext;
    char_set_name(): Char_set_nameContext;
    synonym_name(): Synonym_nameContext;
    schema_object_name(): Schema_object_nameContext;
    dir_object_name(): Dir_object_nameContext;
    user_object_name(): User_object_nameContext;
    grant_object_name(): Grant_object_nameContext;
    column_list(): Column_listContext;
    paren_column_list(): Paren_column_listContext;
    keep_clause(): Keep_clauseContext;
    function_argument(): Function_argumentContext;
    function_argument_analytic(): Function_argument_analyticContext;
    function_argument_modeling(): Function_argument_modelingContext;
    respect_or_ignore_nulls(): Respect_or_ignore_nullsContext;
    argument(): ArgumentContext;
    type_spec(): Type_specContext;
    datatype(): DatatypeContext;
    precision_part(): Precision_partContext;
    native_datatype_element(): Native_datatype_elementContext;
    bind_variable(): Bind_variableContext;
    general_element(): General_elementContext;
    general_element_part(): General_element_partContext;
    table_element(): Table_elementContext;
    object_privilege(): Object_privilegeContext;
    system_privilege(): System_privilegeContext;
    constant(): ConstantContext;
    numeric(): NumericContext;
    numeric_negative(): Numeric_negativeContext;
    quoted_string(): Quoted_stringContext;
    identifier(): IdentifierContext;
    id_expression(): Id_expressionContext;
    outer_join_sign(): Outer_join_signContext;
    regular_id(): Regular_idContext;
    non_reserved_keywords_in_12c(): Non_reserved_keywords_in_12cContext;
    non_reserved_keywords_pre12c(): Non_reserved_keywords_pre12cContext;
    string_function_name(): String_function_nameContext;
    numeric_function_name(): Numeric_function_nameContext;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private unified_auditing_sempred;
    private audit_direct_path_sempred;
    private audit_container_clause_sempred;
    private auditing_on_clause_sempred;
    private sql_statement_shortcut_sempred;
    private library_editionable_sempred;
    private library_debug_sempred;
    private alter_view_editionable_sempred;
    private partial_database_recovery_10g_sempred;
    private period_definition_sempred;
    private logical_expression_sempred;
    private relational_expression_sempred;
    private concatenation_sempred;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    private static readonly _serializedATNSegment3;
    private static readonly _serializedATNSegment4;
    private static readonly _serializedATNSegment5;
    private static readonly _serializedATNSegment6;
    private static readonly _serializedATNSegment7;
    private static readonly _serializedATNSegment8;
    private static readonly _serializedATNSegment9;
    private static readonly _serializedATNSegment10;
    private static readonly _serializedATNSegment11;
    private static readonly _serializedATNSegment12;
    private static readonly _serializedATNSegment13;
    private static readonly _serializedATNSegment14;
    private static readonly _serializedATNSegment15;
    private static readonly _serializedATNSegment16;
    private static readonly _serializedATNSegment17;
    private static readonly _serializedATNSegment18;
    private static readonly _serializedATNSegment19;
    private static readonly _serializedATNSegment20;
    private static readonly _serializedATNSegment21;
    private static readonly _serializedATNSegment22;
    private static readonly _serializedATNSegment23;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
export declare class Sql_scriptContext extends ParserRuleContext {
    EOF(): TerminalNode;
    unit_statement(): Unit_statementContext[];
    unit_statement(i: number): Unit_statementContext;
    sql_plus_command(): Sql_plus_commandContext[];
    sql_plus_command(i: number): Sql_plus_commandContext;
    SEMICOLON(): TerminalNode[];
    SEMICOLON(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Unit_statementContext extends ParserRuleContext {
    transaction_control_statements(): Transaction_control_statementsContext | undefined;
    alter_cluster(): Alter_clusterContext | undefined;
    alter_database(): Alter_databaseContext | undefined;
    alter_function(): Alter_functionContext | undefined;
    alter_package(): Alter_packageContext | undefined;
    alter_procedure(): Alter_procedureContext | undefined;
    alter_sequence(): Alter_sequenceContext | undefined;
    alter_session(): Alter_sessionContext | undefined;
    alter_trigger(): Alter_triggerContext | undefined;
    alter_type(): Alter_typeContext | undefined;
    alter_table(): Alter_tableContext | undefined;
    alter_tablespace(): Alter_tablespaceContext | undefined;
    alter_index(): Alter_indexContext | undefined;
    alter_library(): Alter_libraryContext | undefined;
    alter_materialized_view(): Alter_materialized_viewContext | undefined;
    alter_materialized_view_log(): Alter_materialized_view_logContext | undefined;
    alter_user(): Alter_userContext | undefined;
    alter_view(): Alter_viewContext | undefined;
    analyze(): AnalyzeContext | undefined;
    associate_statistics(): Associate_statisticsContext | undefined;
    audit_traditional(): Audit_traditionalContext | undefined;
    unified_auditing(): Unified_auditingContext | undefined;
    create_function_body(): Create_function_bodyContext | undefined;
    create_procedure_body(): Create_procedure_bodyContext | undefined;
    create_package(): Create_packageContext | undefined;
    create_package_body(): Create_package_bodyContext | undefined;
    create_index(): Create_indexContext | undefined;
    create_table(): Create_tableContext | undefined;
    create_tablespace(): Create_tablespaceContext | undefined;
    create_cluster(): Create_clusterContext | undefined;
    create_context(): Create_contextContext | undefined;
    create_view(): Create_viewContext | undefined;
    create_directory(): Create_directoryContext | undefined;
    create_materialized_view(): Create_materialized_viewContext | undefined;
    create_materialized_view_log(): Create_materialized_view_logContext | undefined;
    create_user(): Create_userContext | undefined;
    create_sequence(): Create_sequenceContext | undefined;
    create_trigger(): Create_triggerContext | undefined;
    create_type(): Create_typeContext | undefined;
    create_synonym(): Create_synonymContext | undefined;
    drop_function(): Drop_functionContext | undefined;
    drop_package(): Drop_packageContext | undefined;
    drop_procedure(): Drop_procedureContext | undefined;
    drop_sequence(): Drop_sequenceContext | undefined;
    drop_trigger(): Drop_triggerContext | undefined;
    drop_type(): Drop_typeContext | undefined;
    data_manipulation_language_statements(): Data_manipulation_language_statementsContext | undefined;
    truncate_table(): Truncate_tableContext | undefined;
    drop_table(): Drop_tableContext | undefined;
    drop_view(): Drop_viewContext | undefined;
    drop_index(): Drop_indexContext | undefined;
    rename_object(): Rename_objectContext | undefined;
    comment_on_column(): Comment_on_columnContext | undefined;
    comment_on_table(): Comment_on_tableContext | undefined;
    anonymous_block(): Anonymous_blockContext | undefined;
    grant_statement(): Grant_statementContext | undefined;
    procedure_call(): Procedure_callContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_functionContext extends ParserRuleContext {
    DROP(): TerminalNode;
    FUNCTION(): TerminalNode;
    function_name(): Function_nameContext;
    SEMICOLON(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_functionContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    FUNCTION(): TerminalNode;
    function_name(): Function_nameContext;
    COMPILE(): TerminalNode;
    SEMICOLON(): TerminalNode;
    DEBUG(): TerminalNode | undefined;
    compiler_parameters_clause(): Compiler_parameters_clauseContext[];
    compiler_parameters_clause(i: number): Compiler_parameters_clauseContext;
    REUSE(): TerminalNode | undefined;
    SETTINGS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_function_bodyContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    FUNCTION(): TerminalNode;
    function_name(): Function_nameContext;
    RETURN(): TerminalNode;
    type_spec(): Type_specContext;
    SEMICOLON(): TerminalNode;
    USING(): TerminalNode | undefined;
    implementation_type_name(): Implementation_type_nameContext | undefined;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    parameter(): ParameterContext[];
    parameter(i: number): ParameterContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    invoker_rights_clause(): Invoker_rights_clauseContext[];
    invoker_rights_clause(i: number): Invoker_rights_clauseContext;
    parallel_enable_clause(): Parallel_enable_clauseContext[];
    parallel_enable_clause(i: number): Parallel_enable_clauseContext;
    result_cache_clause(): Result_cache_clauseContext[];
    result_cache_clause(i: number): Result_cache_clauseContext;
    DETERMINISTIC(): TerminalNode[];
    DETERMINISTIC(i: number): TerminalNode;
    PIPELINED(): TerminalNode | undefined;
    AGGREGATE(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    body(): BodyContext | undefined;
    call_spec(): Call_specContext | undefined;
    DECLARE(): TerminalNode | undefined;
    seq_of_declare_specs(): Seq_of_declare_specsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Parallel_enable_clauseContext extends ParserRuleContext {
    PARALLEL_ENABLE(): TerminalNode;
    partition_by_clause(): Partition_by_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Partition_by_clauseContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    PARTITION(): TerminalNode;
    expression(): ExpressionContext;
    BY(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    ANY(): TerminalNode | undefined;
    paren_column_list(): Paren_column_listContext | undefined;
    HASH(): TerminalNode | undefined;
    RANGE(): TerminalNode | undefined;
    LIST(): TerminalNode | undefined;
    streaming_clause(): Streaming_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Result_cache_clauseContext extends ParserRuleContext {
    RESULT_CACHE(): TerminalNode;
    relies_on_part(): Relies_on_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Relies_on_partContext extends ParserRuleContext {
    RELIES_ON(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    tableview_name(): Tableview_nameContext[];
    tableview_name(i: number): Tableview_nameContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Streaming_clauseContext extends ParserRuleContext {
    expression(): ExpressionContext;
    BY(): TerminalNode;
    paren_column_list(): Paren_column_listContext;
    ORDER(): TerminalNode | undefined;
    CLUSTER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_packageContext extends ParserRuleContext {
    DROP(): TerminalNode;
    PACKAGE(): TerminalNode;
    package_name(): Package_nameContext;
    SEMICOLON(): TerminalNode;
    BODY(): TerminalNode | undefined;
    schema_object_name(): Schema_object_nameContext | undefined;
    PERIOD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_packageContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    PACKAGE(): TerminalNode[];
    PACKAGE(i: number): TerminalNode;
    package_name(): Package_nameContext;
    COMPILE(): TerminalNode;
    SEMICOLON(): TerminalNode;
    DEBUG(): TerminalNode | undefined;
    compiler_parameters_clause(): Compiler_parameters_clauseContext[];
    compiler_parameters_clause(i: number): Compiler_parameters_clauseContext;
    REUSE(): TerminalNode | undefined;
    SETTINGS(): TerminalNode | undefined;
    BODY(): TerminalNode | undefined;
    SPECIFICATION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_packageContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    PACKAGE(): TerminalNode;
    package_name(): Package_nameContext[];
    package_name(i: number): Package_nameContext;
    END(): TerminalNode;
    SEMICOLON(): TerminalNode;
    IS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    schema_object_name(): Schema_object_nameContext | undefined;
    PERIOD(): TerminalNode | undefined;
    invoker_rights_clause(): Invoker_rights_clauseContext | undefined;
    package_obj_spec(): Package_obj_specContext[];
    package_obj_spec(i: number): Package_obj_specContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_package_bodyContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    PACKAGE(): TerminalNode;
    BODY(): TerminalNode;
    package_name(): Package_nameContext[];
    package_name(i: number): Package_nameContext;
    END(): TerminalNode;
    SEMICOLON(): TerminalNode;
    IS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    schema_object_name(): Schema_object_nameContext | undefined;
    PERIOD(): TerminalNode | undefined;
    package_obj_body(): Package_obj_bodyContext[];
    package_obj_body(i: number): Package_obj_bodyContext;
    BEGIN(): TerminalNode | undefined;
    seq_of_statements(): Seq_of_statementsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Package_obj_specContext extends ParserRuleContext {
    pragma_declaration(): Pragma_declarationContext | undefined;
    variable_declaration(): Variable_declarationContext | undefined;
    subtype_declaration(): Subtype_declarationContext | undefined;
    cursor_declaration(): Cursor_declarationContext | undefined;
    exception_declaration(): Exception_declarationContext | undefined;
    type_declaration(): Type_declarationContext | undefined;
    procedure_spec(): Procedure_specContext | undefined;
    function_spec(): Function_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Procedure_specContext extends ParserRuleContext {
    PROCEDURE(): TerminalNode;
    identifier(): IdentifierContext;
    SEMICOLON(): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    parameter(): ParameterContext[];
    parameter(i: number): ParameterContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Function_specContext extends ParserRuleContext {
    FUNCTION(): TerminalNode;
    identifier(): IdentifierContext;
    RETURN(): TerminalNode;
    type_spec(): Type_specContext;
    SEMICOLON(): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    parameter(): ParameterContext[];
    parameter(i: number): ParameterContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    PIPELINED(): TerminalNode | undefined;
    DETERMINISTIC(): TerminalNode | undefined;
    RESULT_CACHE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Package_obj_bodyContext extends ParserRuleContext {
    variable_declaration(): Variable_declarationContext | undefined;
    subtype_declaration(): Subtype_declarationContext | undefined;
    cursor_declaration(): Cursor_declarationContext | undefined;
    exception_declaration(): Exception_declarationContext | undefined;
    type_declaration(): Type_declarationContext | undefined;
    procedure_body(): Procedure_bodyContext | undefined;
    function_body(): Function_bodyContext | undefined;
    procedure_spec(): Procedure_specContext | undefined;
    function_spec(): Function_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_procedureContext extends ParserRuleContext {
    DROP(): TerminalNode;
    PROCEDURE(): TerminalNode;
    procedure_name(): Procedure_nameContext;
    SEMICOLON(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_procedureContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    PROCEDURE(): TerminalNode;
    procedure_name(): Procedure_nameContext;
    COMPILE(): TerminalNode;
    SEMICOLON(): TerminalNode;
    DEBUG(): TerminalNode | undefined;
    compiler_parameters_clause(): Compiler_parameters_clauseContext[];
    compiler_parameters_clause(i: number): Compiler_parameters_clauseContext;
    REUSE(): TerminalNode | undefined;
    SETTINGS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Function_bodyContext extends ParserRuleContext {
    FUNCTION(): TerminalNode;
    identifier(): IdentifierContext;
    RETURN(): TerminalNode;
    type_spec(): Type_specContext;
    SEMICOLON(): TerminalNode;
    USING(): TerminalNode | undefined;
    implementation_type_name(): Implementation_type_nameContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    parameter(): ParameterContext[];
    parameter(i: number): ParameterContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    invoker_rights_clause(): Invoker_rights_clauseContext[];
    invoker_rights_clause(i: number): Invoker_rights_clauseContext;
    parallel_enable_clause(): Parallel_enable_clauseContext[];
    parallel_enable_clause(i: number): Parallel_enable_clauseContext;
    result_cache_clause(): Result_cache_clauseContext[];
    result_cache_clause(i: number): Result_cache_clauseContext;
    DETERMINISTIC(): TerminalNode[];
    DETERMINISTIC(i: number): TerminalNode;
    PIPELINED(): TerminalNode | undefined;
    AGGREGATE(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    body(): BodyContext | undefined;
    call_spec(): Call_specContext | undefined;
    DECLARE(): TerminalNode | undefined;
    seq_of_declare_specs(): Seq_of_declare_specsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Procedure_bodyContext extends ParserRuleContext {
    PROCEDURE(): TerminalNode;
    identifier(): IdentifierContext;
    SEMICOLON(): TerminalNode;
    IS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    body(): BodyContext | undefined;
    call_spec(): Call_specContext | undefined;
    EXTERNAL(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    parameter(): ParameterContext[];
    parameter(i: number): ParameterContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    DECLARE(): TerminalNode | undefined;
    seq_of_declare_specs(): Seq_of_declare_specsContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_procedure_bodyContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    PROCEDURE(): TerminalNode;
    procedure_name(): Procedure_nameContext;
    SEMICOLON(): TerminalNode;
    IS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    body(): BodyContext | undefined;
    call_spec(): Call_specContext | undefined;
    EXTERNAL(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    parameter(): ParameterContext[];
    parameter(i: number): ParameterContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    invoker_rights_clause(): Invoker_rights_clauseContext | undefined;
    DECLARE(): TerminalNode | undefined;
    seq_of_declare_specs(): Seq_of_declare_specsContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_triggerContext extends ParserRuleContext {
    DROP(): TerminalNode;
    TRIGGER(): TerminalNode;
    trigger_name(): Trigger_nameContext;
    SEMICOLON(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_triggerContext extends ParserRuleContext {
    _alter_trigger_name: Trigger_nameContext;
    _rename_trigger_name: Trigger_nameContext;
    ALTER(): TerminalNode;
    TRIGGER(): TerminalNode;
    SEMICOLON(): TerminalNode;
    trigger_name(): Trigger_nameContext[];
    trigger_name(i: number): Trigger_nameContext;
    RENAME(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    COMPILE(): TerminalNode | undefined;
    ENABLE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    DEBUG(): TerminalNode | undefined;
    compiler_parameters_clause(): Compiler_parameters_clauseContext[];
    compiler_parameters_clause(i: number): Compiler_parameters_clauseContext;
    REUSE(): TerminalNode | undefined;
    SETTINGS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_triggerContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    TRIGGER(): TerminalNode;
    trigger_name(): Trigger_nameContext;
    trigger_body(): Trigger_bodyContext;
    SEMICOLON(): TerminalNode;
    simple_dml_trigger(): Simple_dml_triggerContext | undefined;
    compound_dml_trigger(): Compound_dml_triggerContext | undefined;
    non_dml_trigger(): Non_dml_triggerContext | undefined;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    trigger_follows_clause(): Trigger_follows_clauseContext | undefined;
    trigger_when_clause(): Trigger_when_clauseContext | undefined;
    ENABLE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Trigger_follows_clauseContext extends ParserRuleContext {
    FOLLOWS(): TerminalNode;
    trigger_name(): Trigger_nameContext[];
    trigger_name(i: number): Trigger_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Trigger_when_clauseContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    condition(): ConditionContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Simple_dml_triggerContext extends ParserRuleContext {
    dml_event_clause(): Dml_event_clauseContext;
    BEFORE(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    INSTEAD(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    referencing_clause(): Referencing_clauseContext | undefined;
    for_each_row(): For_each_rowContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class For_each_rowContext extends ParserRuleContext {
    FOR(): TerminalNode;
    EACH(): TerminalNode;
    ROW(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Compound_dml_triggerContext extends ParserRuleContext {
    FOR(): TerminalNode;
    dml_event_clause(): Dml_event_clauseContext;
    referencing_clause(): Referencing_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Non_dml_triggerContext extends ParserRuleContext {
    non_dml_event(): Non_dml_eventContext[];
    non_dml_event(i: number): Non_dml_eventContext;
    ON(): TerminalNode;
    BEFORE(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    OR(): TerminalNode[];
    OR(i: number): TerminalNode;
    schema_name(): Schema_nameContext | undefined;
    PERIOD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Trigger_bodyContext extends ParserRuleContext {
    COMPOUND(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    CALL(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    trigger_block(): Trigger_blockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Routine_clauseContext extends ParserRuleContext {
    routine_name(): Routine_nameContext;
    function_argument(): Function_argumentContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Compound_trigger_blockContext extends ParserRuleContext {
    COMPOUND(): TerminalNode;
    TRIGGER(): TerminalNode;
    END(): TerminalNode;
    trigger_name(): Trigger_nameContext;
    seq_of_declare_specs(): Seq_of_declare_specsContext | undefined;
    timing_point_section(): Timing_point_sectionContext[];
    timing_point_section(i: number): Timing_point_sectionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Timing_point_sectionContext extends ParserRuleContext {
    _bk: Token;
    _ak: Token;
    STATEMENT(): TerminalNode[];
    STATEMENT(i: number): TerminalNode;
    IS(): TerminalNode;
    trigger_block(): Trigger_blockContext;
    BEFORE(): TerminalNode[];
    BEFORE(i: number): TerminalNode;
    SEMICOLON(): TerminalNode;
    EACH(): TerminalNode[];
    EACH(i: number): TerminalNode;
    ROW(): TerminalNode[];
    ROW(i: number): TerminalNode;
    AFTER(): TerminalNode[];
    AFTER(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Non_dml_eventContext extends ParserRuleContext {
    ALTER(): TerminalNode | undefined;
    ANALYZE(): TerminalNode | undefined;
    ASSOCIATE(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    AUDIT(): TerminalNode | undefined;
    COMMENT(): TerminalNode | undefined;
    CREATE(): TerminalNode | undefined;
    DISASSOCIATE(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    GRANT(): TerminalNode | undefined;
    NOAUDIT(): TerminalNode | undefined;
    RENAME(): TerminalNode | undefined;
    REVOKE(): TerminalNode | undefined;
    TRUNCATE(): TerminalNode | undefined;
    DDL(): TerminalNode | undefined;
    STARTUP(): TerminalNode | undefined;
    SHUTDOWN(): TerminalNode | undefined;
    DB_ROLE_CHANGE(): TerminalNode | undefined;
    LOGON(): TerminalNode | undefined;
    LOGOFF(): TerminalNode | undefined;
    SERVERERROR(): TerminalNode | undefined;
    SUSPEND(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    FOLLOWS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Dml_event_clauseContext extends ParserRuleContext {
    dml_event_element(): Dml_event_elementContext[];
    dml_event_element(i: number): Dml_event_elementContext;
    ON(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    OR(): TerminalNode[];
    OR(i: number): TerminalNode;
    dml_event_nested_clause(): Dml_event_nested_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Dml_event_elementContext extends ParserRuleContext {
    DELETE(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    column_list(): Column_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Dml_event_nested_clauseContext extends ParserRuleContext {
    NESTED(): TerminalNode;
    TABLE(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    OF(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Referencing_clauseContext extends ParserRuleContext {
    REFERENCING(): TerminalNode;
    referencing_element(): Referencing_elementContext[];
    referencing_element(i: number): Referencing_elementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Referencing_elementContext extends ParserRuleContext {
    column_alias(): Column_aliasContext;
    NEW(): TerminalNode | undefined;
    OLD(): TerminalNode | undefined;
    PARENT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_typeContext extends ParserRuleContext {
    DROP(): TerminalNode;
    TYPE(): TerminalNode;
    type_name(): Type_nameContext;
    SEMICOLON(): TerminalNode;
    BODY(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    VALIDATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_typeContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    TYPE(): TerminalNode;
    type_name(): Type_nameContext;
    SEMICOLON(): TerminalNode;
    compile_type_clause(): Compile_type_clauseContext | undefined;
    replace_type_clause(): Replace_type_clauseContext | undefined;
    alter_method_spec(): Alter_method_specContext | undefined;
    alter_collection_clauses(): Alter_collection_clausesContext | undefined;
    modifier_clause(): Modifier_clauseContext | undefined;
    overriding_subprogram_spec(): Overriding_subprogram_specContext | undefined;
    dependent_handling_clause(): Dependent_handling_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Compile_type_clauseContext extends ParserRuleContext {
    COMPILE(): TerminalNode;
    DEBUG(): TerminalNode | undefined;
    compiler_parameters_clause(): Compiler_parameters_clauseContext[];
    compiler_parameters_clause(i: number): Compiler_parameters_clauseContext;
    REUSE(): TerminalNode | undefined;
    SETTINGS(): TerminalNode | undefined;
    SPECIFICATION(): TerminalNode | undefined;
    BODY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Replace_type_clauseContext extends ParserRuleContext {
    REPLACE(): TerminalNode;
    AS(): TerminalNode;
    OBJECT(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    object_member_spec(): Object_member_specContext[];
    object_member_spec(i: number): Object_member_specContext;
    RIGHT_PAREN(): TerminalNode;
    invoker_rights_clause(): Invoker_rights_clauseContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_method_specContext extends ParserRuleContext {
    alter_method_element(): Alter_method_elementContext[];
    alter_method_element(i: number): Alter_method_elementContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_method_elementContext extends ParserRuleContext {
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    map_order_function_spec(): Map_order_function_specContext | undefined;
    subprogram_spec(): Subprogram_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_attribute_definitionContext extends ParserRuleContext {
    ATTRIBUTE(): TerminalNode;
    ADD(): TerminalNode | undefined;
    MODIFY(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    attribute_definition(): Attribute_definitionContext[];
    attribute_definition(i: number): Attribute_definitionContext;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Attribute_definitionContext extends ParserRuleContext {
    attribute_name(): Attribute_nameContext;
    type_spec(): Type_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_collection_clausesContext extends ParserRuleContext {
    MODIFY(): TerminalNode;
    LIMIT(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    ELEMENT(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    type_spec(): Type_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Dependent_handling_clauseContext extends ParserRuleContext {
    INVALIDATE(): TerminalNode | undefined;
    CASCADE(): TerminalNode | undefined;
    CONVERT(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    SUBSTITUTABLE(): TerminalNode | undefined;
    INCLUDING(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    dependent_exceptions_part(): Dependent_exceptions_partContext | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Dependent_exceptions_partContext extends ParserRuleContext {
    EXCEPTIONS(): TerminalNode;
    INTO(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    FORCE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_typeContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    TYPE(): TerminalNode;
    SEMICOLON(): TerminalNode;
    type_definition(): Type_definitionContext | undefined;
    type_body(): Type_bodyContext | undefined;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Type_definitionContext extends ParserRuleContext {
    type_name(): Type_nameContext;
    OID(): TerminalNode | undefined;
    CHAR_STRING(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    object_type_def(): Object_type_defContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Object_type_defContext extends ParserRuleContext {
    object_as_part(): Object_as_partContext | undefined;
    object_under_part(): Object_under_partContext | undefined;
    invoker_rights_clause(): Invoker_rights_clauseContext | undefined;
    sqlj_object_type(): Sqlj_object_typeContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    object_member_spec(): Object_member_specContext[];
    object_member_spec(i: number): Object_member_specContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    modifier_clause(): Modifier_clauseContext[];
    modifier_clause(i: number): Modifier_clauseContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Object_as_partContext extends ParserRuleContext {
    IS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    varray_type_def(): Varray_type_defContext | undefined;
    nested_table_type_def(): Nested_table_type_defContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Object_under_partContext extends ParserRuleContext {
    UNDER(): TerminalNode;
    type_spec(): Type_specContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Nested_table_type_defContext extends ParserRuleContext {
    TABLE(): TerminalNode;
    OF(): TerminalNode;
    type_spec(): Type_specContext;
    NOT(): TerminalNode | undefined;
    NULL_(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Sqlj_object_typeContext extends ParserRuleContext {
    EXTERNAL(): TerminalNode;
    NAME(): TerminalNode;
    expression(): ExpressionContext;
    LANGUAGE(): TerminalNode;
    JAVA(): TerminalNode;
    USING(): TerminalNode;
    SQLDATA(): TerminalNode | undefined;
    CUSTOMDATUM(): TerminalNode | undefined;
    ORADATA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Type_bodyContext extends ParserRuleContext {
    BODY(): TerminalNode;
    type_name(): Type_nameContext;
    END(): TerminalNode;
    IS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    type_body_elements(): Type_body_elementsContext[];
    type_body_elements(i: number): Type_body_elementsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Type_body_elementsContext extends ParserRuleContext {
    map_order_func_declaration(): Map_order_func_declarationContext | undefined;
    subprog_decl_in_type(): Subprog_decl_in_typeContext | undefined;
    overriding_subprogram_spec(): Overriding_subprogram_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Map_order_func_declarationContext extends ParserRuleContext {
    MEMBER(): TerminalNode;
    func_decl_in_type(): Func_decl_in_typeContext;
    MAP(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subprog_decl_in_typeContext extends ParserRuleContext {
    MEMBER(): TerminalNode | undefined;
    STATIC(): TerminalNode | undefined;
    proc_decl_in_type(): Proc_decl_in_typeContext | undefined;
    func_decl_in_type(): Func_decl_in_typeContext | undefined;
    constructor_declaration(): Constructor_declarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Proc_decl_in_typeContext extends ParserRuleContext {
    PROCEDURE(): TerminalNode;
    procedure_name(): Procedure_nameContext;
    LEFT_PAREN(): TerminalNode;
    type_elements_parameter(): Type_elements_parameterContext[];
    type_elements_parameter(i: number): Type_elements_parameterContext;
    RIGHT_PAREN(): TerminalNode;
    IS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    call_spec(): Call_specContext | undefined;
    body(): BodyContext | undefined;
    SEMICOLON(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    DECLARE(): TerminalNode | undefined;
    seq_of_declare_specs(): Seq_of_declare_specsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Func_decl_in_typeContext extends ParserRuleContext {
    FUNCTION(): TerminalNode;
    function_name(): Function_nameContext;
    RETURN(): TerminalNode;
    type_spec(): Type_specContext;
    IS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    call_spec(): Call_specContext | undefined;
    body(): BodyContext | undefined;
    SEMICOLON(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    type_elements_parameter(): Type_elements_parameterContext[];
    type_elements_parameter(i: number): Type_elements_parameterContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    DECLARE(): TerminalNode | undefined;
    seq_of_declare_specs(): Seq_of_declare_specsContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Constructor_declarationContext extends ParserRuleContext {
    CONSTRUCTOR(): TerminalNode;
    FUNCTION(): TerminalNode;
    type_spec(): Type_specContext[];
    type_spec(i: number): Type_specContext;
    RETURN(): TerminalNode;
    SELF(): TerminalNode[];
    SELF(i: number): TerminalNode;
    AS(): TerminalNode[];
    AS(i: number): TerminalNode;
    RESULT(): TerminalNode;
    IS(): TerminalNode | undefined;
    call_spec(): Call_specContext | undefined;
    body(): BodyContext | undefined;
    SEMICOLON(): TerminalNode | undefined;
    FINAL(): TerminalNode | undefined;
    INSTANTIABLE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    type_elements_parameter(): Type_elements_parameterContext[];
    type_elements_parameter(i: number): Type_elements_parameterContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    OUT(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    DECLARE(): TerminalNode | undefined;
    seq_of_declare_specs(): Seq_of_declare_specsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Modifier_clauseContext extends ParserRuleContext {
    INSTANTIABLE(): TerminalNode | undefined;
    FINAL(): TerminalNode | undefined;
    OVERRIDING(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Object_member_specContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    type_spec(): Type_specContext | undefined;
    sqlj_object_type_attr(): Sqlj_object_type_attrContext | undefined;
    element_spec(): Element_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Sqlj_object_type_attrContext extends ParserRuleContext {
    EXTERNAL(): TerminalNode;
    NAME(): TerminalNode;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Element_specContext extends ParserRuleContext {
    modifier_clause(): Modifier_clauseContext | undefined;
    element_spec_options(): Element_spec_optionsContext[];
    element_spec_options(i: number): Element_spec_optionsContext;
    COMMA(): TerminalNode | undefined;
    pragma_clause(): Pragma_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Element_spec_optionsContext extends ParserRuleContext {
    subprogram_spec(): Subprogram_specContext | undefined;
    constructor_spec(): Constructor_specContext | undefined;
    map_order_function_spec(): Map_order_function_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subprogram_specContext extends ParserRuleContext {
    MEMBER(): TerminalNode | undefined;
    STATIC(): TerminalNode | undefined;
    type_procedure_spec(): Type_procedure_specContext | undefined;
    type_function_spec(): Type_function_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Overriding_subprogram_specContext extends ParserRuleContext {
    OVERRIDING(): TerminalNode;
    MEMBER(): TerminalNode;
    overriding_function_spec(): Overriding_function_specContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Overriding_function_specContext extends ParserRuleContext {
    FUNCTION(): TerminalNode;
    function_name(): Function_nameContext;
    RETURN(): TerminalNode;
    type_spec(): Type_specContext | undefined;
    SELF(): TerminalNode | undefined;
    AS(): TerminalNode[];
    AS(i: number): TerminalNode;
    RESULT(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    type_elements_parameter(): Type_elements_parameterContext[];
    type_elements_parameter(i: number): Type_elements_parameterContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    SEMICOLON(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    body(): BodyContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    PIPELINED(): TerminalNode | undefined;
    DECLARE(): TerminalNode | undefined;
    seq_of_declare_specs(): Seq_of_declare_specsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Type_procedure_specContext extends ParserRuleContext {
    PROCEDURE(): TerminalNode;
    procedure_name(): Procedure_nameContext;
    LEFT_PAREN(): TerminalNode;
    type_elements_parameter(): Type_elements_parameterContext[];
    type_elements_parameter(i: number): Type_elements_parameterContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    call_spec(): Call_specContext | undefined;
    IS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Type_function_specContext extends ParserRuleContext {
    FUNCTION(): TerminalNode;
    function_name(): Function_nameContext;
    RETURN(): TerminalNode;
    type_spec(): Type_specContext | undefined;
    SELF(): TerminalNode | undefined;
    AS(): TerminalNode[];
    AS(i: number): TerminalNode;
    RESULT(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    type_elements_parameter(): Type_elements_parameterContext[];
    type_elements_parameter(i: number): Type_elements_parameterContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    call_spec(): Call_specContext | undefined;
    EXTERNAL(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    IS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    VARIABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Constructor_specContext extends ParserRuleContext {
    CONSTRUCTOR(): TerminalNode;
    FUNCTION(): TerminalNode;
    type_spec(): Type_specContext[];
    type_spec(i: number): Type_specContext;
    RETURN(): TerminalNode;
    SELF(): TerminalNode[];
    SELF(i: number): TerminalNode;
    AS(): TerminalNode[];
    AS(i: number): TerminalNode;
    RESULT(): TerminalNode;
    FINAL(): TerminalNode | undefined;
    INSTANTIABLE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    type_elements_parameter(): Type_elements_parameterContext[];
    type_elements_parameter(i: number): Type_elements_parameterContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    call_spec(): Call_specContext | undefined;
    IS(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    OUT(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Map_order_function_specContext extends ParserRuleContext {
    MEMBER(): TerminalNode;
    type_function_spec(): Type_function_specContext;
    MAP(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Pragma_clauseContext extends ParserRuleContext {
    PRAGMA(): TerminalNode;
    RESTRICT_REFERENCES(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    pragma_elements(): Pragma_elementsContext[];
    pragma_elements(i: number): Pragma_elementsContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Pragma_elementsContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Type_elements_parameterContext extends ParserRuleContext {
    parameter_name(): Parameter_nameContext;
    type_spec(): Type_specContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_sequenceContext extends ParserRuleContext {
    DROP(): TerminalNode;
    SEQUENCE(): TerminalNode;
    sequence_name(): Sequence_nameContext;
    SEMICOLON(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_sequenceContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    SEQUENCE(): TerminalNode;
    sequence_name(): Sequence_nameContext;
    SEMICOLON(): TerminalNode;
    sequence_spec(): Sequence_specContext[];
    sequence_spec(i: number): Sequence_specContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_sessionContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    SESSION(): TerminalNode;
    ADVISE(): TerminalNode | undefined;
    CLOSE(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    LINK(): TerminalNode | undefined;
    parameter_name(): Parameter_nameContext | undefined;
    enable_or_disable(): Enable_or_disableContext | undefined;
    COMMIT(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    GUARD(): TerminalNode | undefined;
    PARALLEL(): TerminalNode[];
    PARALLEL(i: number): TerminalNode;
    SET(): TerminalNode | undefined;
    alter_session_set_clause(): Alter_session_set_clauseContext | undefined;
    ROLLBACK(): TerminalNode | undefined;
    NOTHING(): TerminalNode | undefined;
    DML(): TerminalNode | undefined;
    DDL(): TerminalNode | undefined;
    QUERY(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    literal(): LiteralContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_session_set_clauseContext extends ParserRuleContext {
    parameter_name(): Parameter_nameContext;
    EQUALS_OP(): TerminalNode;
    parameter_value(): Parameter_valueContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_sequenceContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    SEQUENCE(): TerminalNode;
    sequence_name(): Sequence_nameContext;
    SEMICOLON(): TerminalNode;
    sequence_start_clause(): Sequence_start_clauseContext[];
    sequence_start_clause(i: number): Sequence_start_clauseContext;
    sequence_spec(): Sequence_specContext[];
    sequence_spec(i: number): Sequence_specContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Sequence_specContext extends ParserRuleContext {
    INCREMENT(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    MAXVALUE(): TerminalNode | undefined;
    NOMAXVALUE(): TerminalNode | undefined;
    MINVALUE(): TerminalNode | undefined;
    NOMINVALUE(): TerminalNode | undefined;
    CYCLE(): TerminalNode | undefined;
    NOCYCLE(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    NOCACHE(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    NOORDER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Sequence_start_clauseContext extends ParserRuleContext {
    START(): TerminalNode;
    WITH(): TerminalNode;
    UNSIGNED_INTEGER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_indexContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    INDEX(): TerminalNode;
    index_name(): Index_nameContext;
    ON(): TerminalNode;
    SEMICOLON(): TerminalNode;
    cluster_index_clause(): Cluster_index_clauseContext | undefined;
    table_index_clause(): Table_index_clauseContext | undefined;
    bitmap_join_index_clause(): Bitmap_join_index_clauseContext | undefined;
    UNUSABLE(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    BITMAP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cluster_index_clauseContext extends ParserRuleContext {
    CLUSTER(): TerminalNode;
    cluster_name(): Cluster_nameContext;
    index_attributes(): Index_attributesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cluster_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    PERIOD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_index_clauseContext extends ParserRuleContext {
    tableview_name(): Tableview_nameContext;
    LEFT_PAREN(): TerminalNode;
    index_expr(): Index_exprContext[];
    index_expr(i: number): Index_exprContext;
    RIGHT_PAREN(): TerminalNode;
    table_alias(): Table_aliasContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    index_properties(): Index_propertiesContext | undefined;
    ASC(): TerminalNode[];
    ASC(i: number): TerminalNode;
    DESC(): TerminalNode[];
    DESC(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Bitmap_join_index_clauseContext extends ParserRuleContext {
    tableview_name(): Tableview_nameContext[];
    tableview_name(i: number): Tableview_nameContext;
    LEFT_PAREN(): TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    RIGHT_PAREN(): TerminalNode;
    FROM(): TerminalNode;
    table_alias(): Table_aliasContext[];
    table_alias(i: number): Table_aliasContext;
    where_clause(): Where_clauseContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    local_partitioned_index(): Local_partitioned_indexContext | undefined;
    index_attributes(): Index_attributesContext | undefined;
    ASC(): TerminalNode[];
    ASC(i: number): TerminalNode;
    DESC(): TerminalNode[];
    DESC(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Index_exprContext extends ParserRuleContext {
    column_name(): Column_nameContext | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Index_propertiesContext extends ParserRuleContext {
    global_partitioned_index(): Global_partitioned_indexContext[];
    global_partitioned_index(i: number): Global_partitioned_indexContext;
    local_partitioned_index(): Local_partitioned_indexContext[];
    local_partitioned_index(i: number): Local_partitioned_indexContext;
    index_attributes(): Index_attributesContext[];
    index_attributes(i: number): Index_attributesContext;
    INDEXTYPE(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    domain_index_clause(): Domain_index_clauseContext | undefined;
    xmlindex_clause(): Xmlindex_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Domain_index_clauseContext extends ParserRuleContext {
    indextype(): IndextypeContext;
    local_domain_index_clause(): Local_domain_index_clauseContext | undefined;
    parallel_clause(): Parallel_clauseContext | undefined;
    PARAMETERS(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    odci_parameters(): Odci_parametersContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Local_domain_index_clauseContext extends ParserRuleContext {
    LOCAL(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    PARTITION(): TerminalNode[];
    PARTITION(i: number): TerminalNode;
    partition_name(): Partition_nameContext[];
    partition_name(i: number): Partition_nameContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    PARAMETERS(): TerminalNode[];
    PARAMETERS(i: number): TerminalNode;
    odci_parameters(): Odci_parametersContext[];
    odci_parameters(i: number): Odci_parametersContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xmlindex_clauseContext extends ParserRuleContext {
    XMLINDEX(): TerminalNode;
    XDB(): TerminalNode | undefined;
    PERIOD(): TerminalNode | undefined;
    local_xmlindex_clause(): Local_xmlindex_clauseContext | undefined;
    parallel_clause(): Parallel_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Local_xmlindex_clauseContext extends ParserRuleContext {
    LOCAL(): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    PARTITION(): TerminalNode[];
    PARTITION(i: number): TerminalNode;
    partition_name(): Partition_nameContext[];
    partition_name(i: number): Partition_nameContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Global_partitioned_indexContext extends ParserRuleContext {
    GLOBAL(): TerminalNode;
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    RANGE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    index_partitioning_clause(): Index_partitioning_clauseContext | undefined;
    HASH(): TerminalNode | undefined;
    individual_hash_partitions(): Individual_hash_partitionsContext | undefined;
    hash_partitions_by_quantity(): Hash_partitions_by_quantityContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Index_partitioning_clauseContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    VALUES(): TerminalNode;
    LESS(): TerminalNode;
    THAN(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    literal(): LiteralContext[];
    literal(i: number): LiteralContext;
    RIGHT_PAREN(): TerminalNode;
    partition_name(): Partition_nameContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    segment_attributes_clause(): Segment_attributes_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Local_partitioned_indexContext extends ParserRuleContext {
    LOCAL(): TerminalNode;
    on_range_partitioned_table(): On_range_partitioned_tableContext | undefined;
    on_list_partitioned_table(): On_list_partitioned_tableContext | undefined;
    on_hash_partitioned_table(): On_hash_partitioned_tableContext | undefined;
    on_comp_partitioned_table(): On_comp_partitioned_tableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class On_range_partitioned_tableContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    partitioned_table(): Partitioned_tableContext[];
    partitioned_table(i: number): Partitioned_tableContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class On_list_partitioned_tableContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    partitioned_table(): Partitioned_tableContext[];
    partitioned_table(i: number): Partitioned_tableContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Partitioned_tableContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    partition_name(): Partition_nameContext | undefined;
    segment_attributes_clause(): Segment_attributes_clauseContext[];
    segment_attributes_clause(i: number): Segment_attributes_clauseContext;
    key_compression(): Key_compressionContext[];
    key_compression(i: number): Key_compressionContext;
    UNUSABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class On_hash_partitioned_tableContext extends ParserRuleContext {
    STORE(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    on_hash_partitioned_clause(): On_hash_partitioned_clauseContext[];
    on_hash_partitioned_clause(i: number): On_hash_partitioned_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class On_hash_partitioned_clauseContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    partition_name(): Partition_nameContext | undefined;
    TABLESPACE(): TerminalNode | undefined;
    tablespace(): TablespaceContext | undefined;
    key_compression(): Key_compressionContext | undefined;
    UNUSABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class On_comp_partitioned_tableContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    on_comp_partitioned_clause(): On_comp_partitioned_clauseContext[];
    on_comp_partitioned_clause(i: number): On_comp_partitioned_clauseContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    STORE(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class On_comp_partitioned_clauseContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    UNUSABLE(): TerminalNode;
    partition_name(): Partition_nameContext | undefined;
    segment_attributes_clause(): Segment_attributes_clauseContext[];
    segment_attributes_clause(i: number): Segment_attributes_clauseContext;
    key_compression(): Key_compressionContext[];
    key_compression(i: number): Key_compressionContext;
    index_subpartition_clause(): Index_subpartition_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Index_subpartition_clauseContext extends ParserRuleContext {
    STORE(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    index_subpartition_subclause(): Index_subpartition_subclauseContext[];
    index_subpartition_subclause(i: number): Index_subpartition_subclauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Index_subpartition_subclauseContext extends ParserRuleContext {
    SUBPARTITION(): TerminalNode;
    subpartition_name(): Subpartition_nameContext | undefined;
    TABLESPACE(): TerminalNode | undefined;
    tablespace(): TablespaceContext | undefined;
    key_compression(): Key_compressionContext | undefined;
    UNUSABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Odci_parametersContext extends ParserRuleContext {
    CHAR_STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class IndextypeContext extends ParserRuleContext {
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    PERIOD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_indexContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    INDEX(): TerminalNode;
    index_name(): Index_nameContext;
    SEMICOLON(): TerminalNode;
    alter_index_ops_set1(): Alter_index_ops_set1Context | undefined;
    alter_index_ops_set2(): Alter_index_ops_set2Context | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_index_ops_set1Context extends ParserRuleContext {
    deallocate_unused_clause(): Deallocate_unused_clauseContext[];
    deallocate_unused_clause(i: number): Deallocate_unused_clauseContext;
    allocate_extent_clause(): Allocate_extent_clauseContext[];
    allocate_extent_clause(i: number): Allocate_extent_clauseContext;
    shrink_clause(): Shrink_clauseContext[];
    shrink_clause(i: number): Shrink_clauseContext;
    parallel_clause(): Parallel_clauseContext[];
    parallel_clause(i: number): Parallel_clauseContext;
    physical_attributes_clause(): Physical_attributes_clauseContext[];
    physical_attributes_clause(i: number): Physical_attributes_clauseContext;
    logging_clause(): Logging_clauseContext[];
    logging_clause(i: number): Logging_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_index_ops_set2Context extends ParserRuleContext {
    rebuild_clause(): Rebuild_clauseContext | undefined;
    PARAMETERS(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    odci_parameters(): Odci_parametersContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMPILE(): TerminalNode | undefined;
    enable_or_disable(): Enable_or_disableContext | undefined;
    UNUSABLE(): TerminalNode | undefined;
    visible_or_invisible(): Visible_or_invisibleContext | undefined;
    RENAME(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    new_index_name(): New_index_nameContext | undefined;
    COALESCE(): TerminalNode | undefined;
    monitoring_nomonitoring(): Monitoring_nomonitoringContext | undefined;
    USAGE(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    BLOCK(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    alter_index_partitioning(): Alter_index_partitioningContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Visible_or_invisibleContext extends ParserRuleContext {
    VISIBLE(): TerminalNode | undefined;
    INVISIBLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Monitoring_nomonitoringContext extends ParserRuleContext {
    MONITORING(): TerminalNode | undefined;
    NOMONITORING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Rebuild_clauseContext extends ParserRuleContext {
    REBUILD(): TerminalNode;
    PARTITION(): TerminalNode | undefined;
    partition_name(): Partition_nameContext | undefined;
    SUBPARTITION(): TerminalNode | undefined;
    subpartition_name(): Subpartition_nameContext | undefined;
    REVERSE(): TerminalNode | undefined;
    NOREVERSE(): TerminalNode | undefined;
    parallel_clause(): Parallel_clauseContext[];
    parallel_clause(i: number): Parallel_clauseContext;
    TABLESPACE(): TerminalNode[];
    TABLESPACE(i: number): TerminalNode;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    PARAMETERS(): TerminalNode[];
    PARAMETERS(i: number): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    odci_parameters(): Odci_parametersContext[];
    odci_parameters(i: number): Odci_parametersContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    ONLINE(): TerminalNode[];
    ONLINE(i: number): TerminalNode;
    physical_attributes_clause(): Physical_attributes_clauseContext[];
    physical_attributes_clause(i: number): Physical_attributes_clauseContext;
    key_compression(): Key_compressionContext[];
    key_compression(i: number): Key_compressionContext;
    logging_clause(): Logging_clauseContext[];
    logging_clause(i: number): Logging_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_index_partitioningContext extends ParserRuleContext {
    modify_index_default_attrs(): Modify_index_default_attrsContext | undefined;
    add_hash_index_partition(): Add_hash_index_partitionContext | undefined;
    modify_index_partition(): Modify_index_partitionContext | undefined;
    rename_index_partition(): Rename_index_partitionContext | undefined;
    drop_index_partition(): Drop_index_partitionContext | undefined;
    split_index_partition(): Split_index_partitionContext | undefined;
    coalesce_index_partition(): Coalesce_index_partitionContext | undefined;
    modify_index_subpartition(): Modify_index_subpartitionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Modify_index_default_attrsContext extends ParserRuleContext {
    MODIFY(): TerminalNode;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    ATTRIBUTES(): TerminalNode;
    physical_attributes_clause(): Physical_attributes_clauseContext | undefined;
    TABLESPACE(): TerminalNode | undefined;
    logging_clause(): Logging_clauseContext | undefined;
    FOR(): TerminalNode | undefined;
    PARTITION(): TerminalNode | undefined;
    partition_name(): Partition_nameContext | undefined;
    tablespace(): TablespaceContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Add_hash_index_partitionContext extends ParserRuleContext {
    ADD(): TerminalNode;
    PARTITION(): TerminalNode;
    partition_name(): Partition_nameContext | undefined;
    TABLESPACE(): TerminalNode | undefined;
    tablespace(): TablespaceContext | undefined;
    key_compression(): Key_compressionContext | undefined;
    parallel_clause(): Parallel_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Coalesce_index_partitionContext extends ParserRuleContext {
    COALESCE(): TerminalNode;
    PARTITION(): TerminalNode;
    parallel_clause(): Parallel_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Modify_index_partitionContext extends ParserRuleContext {
    MODIFY(): TerminalNode;
    PARTITION(): TerminalNode;
    partition_name(): Partition_nameContext;
    PARAMETERS(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    odci_parameters(): Odci_parametersContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    COALESCE(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    BLOCK(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    UNUSABLE(): TerminalNode | undefined;
    modify_index_partitions_ops(): Modify_index_partitions_opsContext[];
    modify_index_partitions_ops(i: number): Modify_index_partitions_opsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Modify_index_partitions_opsContext extends ParserRuleContext {
    deallocate_unused_clause(): Deallocate_unused_clauseContext | undefined;
    allocate_extent_clause(): Allocate_extent_clauseContext | undefined;
    physical_attributes_clause(): Physical_attributes_clauseContext | undefined;
    logging_clause(): Logging_clauseContext | undefined;
    key_compression(): Key_compressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Rename_index_partitionContext extends ParserRuleContext {
    RENAME(): TerminalNode;
    TO(): TerminalNode;
    new_partition_name(): New_partition_nameContext;
    PARTITION(): TerminalNode | undefined;
    partition_name(): Partition_nameContext | undefined;
    SUBPARTITION(): TerminalNode | undefined;
    subpartition_name(): Subpartition_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_index_partitionContext extends ParserRuleContext {
    DROP(): TerminalNode;
    PARTITION(): TerminalNode;
    partition_name(): Partition_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Split_index_partitionContext extends ParserRuleContext {
    SPLIT(): TerminalNode;
    PARTITION(): TerminalNode;
    partition_name_old(): Partition_name_oldContext;
    AT(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    literal(): LiteralContext[];
    literal(i: number): LiteralContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    INTO(): TerminalNode | undefined;
    index_partition_description(): Index_partition_descriptionContext[];
    index_partition_description(i: number): Index_partition_descriptionContext;
    parallel_clause(): Parallel_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Index_partition_descriptionContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    partition_name(): Partition_nameContext | undefined;
    PARAMETERS(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    odci_parameters(): Odci_parametersContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    UNUSABLE(): TerminalNode | undefined;
    segment_attributes_clause(): Segment_attributes_clauseContext[];
    segment_attributes_clause(i: number): Segment_attributes_clauseContext;
    key_compression(): Key_compressionContext[];
    key_compression(i: number): Key_compressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Modify_index_subpartitionContext extends ParserRuleContext {
    MODIFY(): TerminalNode;
    SUBPARTITION(): TerminalNode;
    subpartition_name(): Subpartition_nameContext;
    UNUSABLE(): TerminalNode | undefined;
    allocate_extent_clause(): Allocate_extent_clauseContext | undefined;
    deallocate_unused_clause(): Deallocate_unused_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Partition_name_oldContext extends ParserRuleContext {
    partition_name(): Partition_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class New_partition_nameContext extends ParserRuleContext {
    partition_name(): Partition_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class New_index_nameContext extends ParserRuleContext {
    index_name(): Index_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_userContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    USER(): TerminalNode;
    user_object_name(): User_object_nameContext;
    SEMICOLON(): TerminalNode;
    identified_by(): Identified_byContext[];
    identified_by(i: number): Identified_byContext;
    identified_other_clause(): Identified_other_clauseContext[];
    identified_other_clause(i: number): Identified_other_clauseContext;
    user_tablespace_clause(): User_tablespace_clauseContext[];
    user_tablespace_clause(i: number): User_tablespace_clauseContext;
    quota_clause(): Quota_clauseContext[];
    quota_clause(i: number): Quota_clauseContext;
    profile_clause(): Profile_clauseContext[];
    profile_clause(i: number): Profile_clauseContext;
    password_expire_clause(): Password_expire_clauseContext[];
    password_expire_clause(i: number): Password_expire_clauseContext;
    user_lock_clause(): User_lock_clauseContext[];
    user_lock_clause(i: number): User_lock_clauseContext;
    user_editions_clause(): User_editions_clauseContext[];
    user_editions_clause(i: number): User_editions_clauseContext;
    container_clause(): Container_clauseContext[];
    container_clause(i: number): Container_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_userContext extends ParserRuleContext {
    ALTER(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    user_object_name(): User_object_nameContext[];
    user_object_name(i: number): User_object_nameContext;
    SEMICOLON(): TerminalNode;
    alter_identified_by(): Alter_identified_byContext[];
    alter_identified_by(i: number): Alter_identified_byContext;
    identified_other_clause(): Identified_other_clauseContext[];
    identified_other_clause(i: number): Identified_other_clauseContext;
    user_tablespace_clause(): User_tablespace_clauseContext[];
    user_tablespace_clause(i: number): User_tablespace_clauseContext;
    quota_clause(): Quota_clauseContext[];
    quota_clause(i: number): Quota_clauseContext;
    profile_clause(): Profile_clauseContext[];
    profile_clause(i: number): Profile_clauseContext;
    user_default_role_clause(): User_default_role_clauseContext[];
    user_default_role_clause(i: number): User_default_role_clauseContext;
    password_expire_clause(): Password_expire_clauseContext[];
    password_expire_clause(i: number): Password_expire_clauseContext;
    user_lock_clause(): User_lock_clauseContext[];
    user_lock_clause(i: number): User_lock_clauseContext;
    alter_user_editions_clause(): Alter_user_editions_clauseContext[];
    alter_user_editions_clause(i: number): Alter_user_editions_clauseContext;
    container_clause(): Container_clauseContext[];
    container_clause(i: number): Container_clauseContext;
    container_data_clause(): Container_data_clauseContext[];
    container_data_clause(i: number): Container_data_clauseContext;
    proxy_clause(): Proxy_clauseContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_identified_byContext extends ParserRuleContext {
    identified_by(): Identified_byContext;
    REPLACE(): TerminalNode | undefined;
    id_expression(): Id_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Identified_byContext extends ParserRuleContext {
    IDENTIFIED(): TerminalNode;
    BY(): TerminalNode;
    id_expression(): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Identified_other_clauseContext extends ParserRuleContext {
    IDENTIFIED(): TerminalNode;
    EXTERNALLY(): TerminalNode | undefined;
    GLOBALLY(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    quoted_string(): Quoted_stringContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class User_tablespace_clauseContext extends ParserRuleContext {
    TABLESPACE(): TerminalNode;
    id_expression(): Id_expressionContext;
    DEFAULT(): TerminalNode | undefined;
    TEMPORARY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Quota_clauseContext extends ParserRuleContext {
    QUOTA(): TerminalNode;
    ON(): TerminalNode;
    id_expression(): Id_expressionContext;
    size_clause(): Size_clauseContext | undefined;
    UNLIMITED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Profile_clauseContext extends ParserRuleContext {
    PROFILE(): TerminalNode;
    id_expression(): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Role_clauseContext extends ParserRuleContext {
    role_name(): Role_nameContext[];
    role_name(i: number): Role_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    ALL(): TerminalNode | undefined;
    EXCEPT(): TerminalNode[];
    EXCEPT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class User_default_role_clauseContext extends ParserRuleContext {
    DEFAULT(): TerminalNode;
    ROLE(): TerminalNode;
    NONE(): TerminalNode | undefined;
    role_clause(): Role_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Password_expire_clauseContext extends ParserRuleContext {
    PASSWORD(): TerminalNode;
    EXPIRE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class User_lock_clauseContext extends ParserRuleContext {
    ACCOUNT(): TerminalNode;
    LOCK(): TerminalNode | undefined;
    UNLOCK(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class User_editions_clauseContext extends ParserRuleContext {
    ENABLE(): TerminalNode;
    EDITIONS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_user_editions_clauseContext extends ParserRuleContext {
    user_editions_clause(): User_editions_clauseContext;
    FOR(): TerminalNode | undefined;
    regular_id(): Regular_idContext[];
    regular_id(i: number): Regular_idContext;
    FORCE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Proxy_clauseContext extends ParserRuleContext {
    REVOKE(): TerminalNode | undefined;
    CONNECT(): TerminalNode;
    THROUGH(): TerminalNode;
    ENTERPRISE(): TerminalNode | undefined;
    USERS(): TerminalNode | undefined;
    user_object_name(): User_object_nameContext | undefined;
    GRANT(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    AUTHENTICATION(): TerminalNode | undefined;
    REQUIRED(): TerminalNode | undefined;
    AUTHENTICATED(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    ROLES(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    role_clause(): Role_clauseContext | undefined;
    PASSWORD(): TerminalNode | undefined;
    CERTIFICATE(): TerminalNode | undefined;
    DISTINGUISHED(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Container_namesContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Set_container_dataContext extends ParserRuleContext {
    SET(): TerminalNode;
    CONTAINER_DATA(): TerminalNode;
    EQUALS_OP(): TerminalNode;
    ALL(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    container_names(): Container_namesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Add_rem_container_dataContext extends ParserRuleContext {
    CONTAINER_DATA(): TerminalNode;
    EQUALS_OP(): TerminalNode;
    container_names(): Container_namesContext;
    ADD(): TerminalNode | undefined;
    REMOVE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Container_data_clauseContext extends ParserRuleContext {
    set_container_data(): Set_container_dataContext | undefined;
    add_rem_container_data(): Add_rem_container_dataContext | undefined;
    FOR(): TerminalNode | undefined;
    container_tableview_name(): Container_tableview_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class AnalyzeContext extends ParserRuleContext {
    SEMICOLON(): TerminalNode;
    ANALYZE(): TerminalNode | undefined;
    CLUSTER(): TerminalNode | undefined;
    cluster_name(): Cluster_nameContext | undefined;
    validation_clauses(): Validation_clausesContext | undefined;
    LIST(): TerminalNode | undefined;
    CHAINED(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    tableview_name(): Tableview_nameContext | undefined;
    INDEX(): TerminalNode | undefined;
    index_name(): Index_nameContext | undefined;
    partition_extention_clause(): Partition_extention_clauseContext | undefined;
    into_clause1(): Into_clause1Context | undefined;
    SYSTEM(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Partition_extention_clauseContext extends ParserRuleContext {
    PARTITION(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    partition_name(): Partition_nameContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    partition_key_value(): Partition_key_valueContext[];
    partition_key_value(i: number): Partition_key_valueContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SUBPARTITION(): TerminalNode | undefined;
    subpartition_name(): Subpartition_nameContext | undefined;
    subpartition_key_value(): Subpartition_key_valueContext[];
    subpartition_key_value(i: number): Subpartition_key_valueContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Validation_clausesContext extends ParserRuleContext {
    VALIDATE(): TerminalNode;
    REF(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    DANGLING(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    NULL_(): TerminalNode | undefined;
    STRUCTURE(): TerminalNode | undefined;
    CASCADE(): TerminalNode | undefined;
    FAST(): TerminalNode | undefined;
    online_or_offline(): Online_or_offlineContext[];
    online_or_offline(i: number): Online_or_offlineContext;
    into_clause(): Into_clauseContext[];
    into_clause(i: number): Into_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Online_or_offlineContext extends ParserRuleContext {
    OFFLINE(): TerminalNode | undefined;
    ONLINE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Into_clause1Context extends ParserRuleContext {
    INTO(): TerminalNode;
    tableview_name(): Tableview_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Partition_key_valueContext extends ParserRuleContext {
    literal(): LiteralContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subpartition_key_valueContext extends ParserRuleContext {
    literal(): LiteralContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Associate_statisticsContext extends ParserRuleContext {
    ASSOCIATE(): TerminalNode;
    STATISTICS(): TerminalNode;
    WITH(): TerminalNode;
    SEMICOLON(): TerminalNode;
    column_association(): Column_associationContext | undefined;
    function_association(): Function_associationContext | undefined;
    storage_table_clause(): Storage_table_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Column_associationContext extends ParserRuleContext {
    COLUMNS(): TerminalNode;
    tableview_name(): Tableview_nameContext[];
    tableview_name(i: number): Tableview_nameContext;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    using_statistics_type(): Using_statistics_typeContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Function_associationContext extends ParserRuleContext {
    FUNCTIONS(): TerminalNode | undefined;
    function_name(): Function_nameContext[];
    function_name(i: number): Function_nameContext;
    PACKAGES(): TerminalNode | undefined;
    package_name(): Package_nameContext[];
    package_name(i: number): Package_nameContext;
    TYPES(): TerminalNode | undefined;
    type_name(): Type_nameContext[];
    type_name(i: number): Type_nameContext;
    INDEXES(): TerminalNode | undefined;
    index_name(): Index_nameContext[];
    index_name(i: number): Index_nameContext;
    INDEXTYPES(): TerminalNode | undefined;
    indextype_name(): Indextype_nameContext[];
    indextype_name(i: number): Indextype_nameContext;
    using_statistics_type(): Using_statistics_typeContext | undefined;
    default_cost_clause(): Default_cost_clauseContext | undefined;
    default_selectivity_clause(): Default_selectivity_clauseContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Indextype_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Using_statistics_typeContext extends ParserRuleContext {
    USING(): TerminalNode;
    statistics_type_name(): Statistics_type_nameContext | undefined;
    NULL_(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Statistics_type_nameContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Default_cost_clauseContext extends ParserRuleContext {
    DEFAULT(): TerminalNode;
    COST(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    cpu_cost(): Cpu_costContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    io_cost(): Io_costContext;
    network_cost(): Network_costContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cpu_costContext extends ParserRuleContext {
    UNSIGNED_INTEGER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Io_costContext extends ParserRuleContext {
    UNSIGNED_INTEGER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Network_costContext extends ParserRuleContext {
    UNSIGNED_INTEGER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Default_selectivity_clauseContext extends ParserRuleContext {
    DEFAULT(): TerminalNode;
    SELECTIVITY(): TerminalNode;
    default_selectivity(): Default_selectivityContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Default_selectivityContext extends ParserRuleContext {
    UNSIGNED_INTEGER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Storage_table_clauseContext extends ParserRuleContext {
    WITH(): TerminalNode;
    MANAGED(): TerminalNode;
    STORAGE(): TerminalNode;
    TABLES(): TerminalNode;
    SYSTEM(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Unified_auditingContext extends ParserRuleContext {
    AUDIT(): TerminalNode;
    SEMICOLON(): TerminalNode;
    POLICY(): TerminalNode | undefined;
    policy_name(): Policy_nameContext | undefined;
    CONTEXT(): TerminalNode | undefined;
    NAMESPACE(): TerminalNode | undefined;
    oracle_namespace(): Oracle_namespaceContext | undefined;
    ATTRIBUTES(): TerminalNode | undefined;
    attribute_name(): Attribute_nameContext[];
    attribute_name(i: number): Attribute_nameContext;
    audit_user(): Audit_userContext[];
    audit_user(i: number): Audit_userContext;
    WHENEVER(): TerminalNode | undefined;
    SUCCESSFUL(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    BY(): TerminalNode | undefined;
    EXCEPT(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Policy_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Audit_traditionalContext extends ParserRuleContext {
    AUDIT(): TerminalNode;
    SEMICOLON(): TerminalNode;
    audit_operation_clause(): Audit_operation_clauseContext | undefined;
    audit_schema_object_clause(): Audit_schema_object_clauseContext | undefined;
    NETWORK(): TerminalNode | undefined;
    audit_direct_path(): Audit_direct_pathContext | undefined;
    BY(): TerminalNode | undefined;
    WHENEVER(): TerminalNode | undefined;
    SUCCESSFUL(): TerminalNode | undefined;
    audit_container_clause(): Audit_container_clauseContext | undefined;
    SESSION(): TerminalNode[];
    SESSION(i: number): TerminalNode;
    ACCESS(): TerminalNode | undefined;
    auditing_by_clause(): Auditing_by_clauseContext | undefined;
    IN(): TerminalNode | undefined;
    CURRENT(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Audit_direct_pathContext extends ParserRuleContext {
    DIRECT_PATH(): TerminalNode;
    auditing_by_clause(): Auditing_by_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Audit_container_clauseContext extends ParserRuleContext {
    CONTAINER(): TerminalNode | undefined;
    EQUALS_OP(): TerminalNode | undefined;
    CURRENT(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Audit_operation_clauseContext extends ParserRuleContext {
    sql_statement_shortcut(): Sql_statement_shortcutContext[];
    sql_statement_shortcut(i: number): Sql_statement_shortcutContext;
    ALL(): TerminalNode[];
    ALL(i: number): TerminalNode;
    system_privilege(): System_privilegeContext[];
    system_privilege(i: number): System_privilegeContext;
    PRIVILEGES(): TerminalNode[];
    PRIVILEGES(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    STATEMENTS(): TerminalNode[];
    STATEMENTS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Auditing_by_clauseContext extends ParserRuleContext {
    BY(): TerminalNode;
    audit_user(): Audit_userContext[];
    audit_user(i: number): Audit_userContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Audit_userContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Audit_schema_object_clauseContext extends ParserRuleContext {
    auditing_on_clause(): Auditing_on_clauseContext;
    sql_operation(): Sql_operationContext[];
    sql_operation(i: number): Sql_operationContext;
    ALL(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Sql_operationContext extends ParserRuleContext {
    ALTER(): TerminalNode | undefined;
    AUDIT(): TerminalNode | undefined;
    COMMENT(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    EXECUTE(): TerminalNode | undefined;
    FLASHBACK(): TerminalNode | undefined;
    GRANT(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    LOCK(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    RENAME(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Auditing_on_clauseContext extends ParserRuleContext {
    ON(): TerminalNode;
    object_name(): Object_nameContext | undefined;
    DIRECTORY(): TerminalNode | undefined;
    regular_id(): Regular_idContext | undefined;
    MINING(): TerminalNode | undefined;
    MODEL(): TerminalNode | undefined;
    model_name(): Model_nameContext | undefined;
    SQL(): TerminalNode | undefined;
    TRANSLATION(): TerminalNode | undefined;
    PROFILE(): TerminalNode | undefined;
    profile_name(): Profile_nameContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Model_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    PERIOD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Object_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    PERIOD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Profile_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    PERIOD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Sql_statement_shortcutContext extends ParserRuleContext {
    ALTER(): TerminalNode | undefined;
    SYSTEM(): TerminalNode | undefined;
    CLUSTER(): TerminalNode | undefined;
    CONTEXT(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    LINK(): TerminalNode | undefined;
    DIMENSION(): TerminalNode | undefined;
    DIRECTORY(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    OUTLINE(): TerminalNode | undefined;
    PLUGGABLE(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    PROFILE(): TerminalNode | undefined;
    PUBLIC(): TerminalNode | undefined;
    SYNONYM(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    ROLLBACK(): TerminalNode | undefined;
    SEGMENT(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    AUDIT(): TerminalNode | undefined;
    GRANT(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    COMMENT(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    EXECUTE(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    LOCK(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_indexContext extends ParserRuleContext {
    DROP(): TerminalNode;
    INDEX(): TerminalNode;
    index_name(): Index_nameContext;
    SEMICOLON(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Rename_objectContext extends ParserRuleContext {
    RENAME(): TerminalNode;
    object_name(): Object_nameContext[];
    object_name(i: number): Object_nameContext;
    TO(): TerminalNode;
    SEMICOLON(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Grant_statementContext extends ParserRuleContext {
    GRANT(): TerminalNode[];
    GRANT(i: number): TerminalNode;
    TO(): TerminalNode;
    SEMICOLON(): TerminalNode;
    grantee_name(): Grantee_nameContext[];
    grantee_name(i: number): Grantee_nameContext;
    PUBLIC(): TerminalNode[];
    PUBLIC(i: number): TerminalNode;
    ON(): TerminalNode | undefined;
    grant_object_name(): Grant_object_nameContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    WITH(): TerminalNode[];
    WITH(i: number): TerminalNode;
    OPTION(): TerminalNode[];
    OPTION(i: number): TerminalNode;
    HIERARCHY(): TerminalNode | undefined;
    container_clause(): Container_clauseContext | undefined;
    ADMIN(): TerminalNode | undefined;
    DELEGATE(): TerminalNode | undefined;
    role_name(): Role_nameContext[];
    role_name(i: number): Role_nameContext;
    system_privilege(): System_privilegeContext[];
    system_privilege(i: number): System_privilegeContext;
    object_privilege(): Object_privilegeContext[];
    object_privilege(i: number): Object_privilegeContext;
    paren_column_list(): Paren_column_listContext[];
    paren_column_list(i: number): Paren_column_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Container_clauseContext extends ParserRuleContext {
    CONTAINER(): TerminalNode;
    EQUALS_OP(): TerminalNode;
    CURRENT(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_directoryContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    DIRECTORY(): TerminalNode;
    directory_name(): Directory_nameContext;
    AS(): TerminalNode;
    directory_path(): Directory_pathContext;
    SEMICOLON(): TerminalNode;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Directory_nameContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Directory_pathContext extends ParserRuleContext {
    CHAR_STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_libraryContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    LIBRARY(): TerminalNode;
    library_name(): Library_nameContext;
    SEMICOLON(): TerminalNode;
    COMPILE(): TerminalNode | undefined;
    library_editionable(): Library_editionableContext | undefined;
    library_debug(): Library_debugContext | undefined;
    compiler_parameters_clause(): Compiler_parameters_clauseContext[];
    compiler_parameters_clause(i: number): Compiler_parameters_clauseContext;
    REUSE(): TerminalNode | undefined;
    SETTINGS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Library_editionableContext extends ParserRuleContext {
    EDITIONABLE(): TerminalNode | undefined;
    NONEDITIONABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Library_debugContext extends ParserRuleContext {
    DEBUG(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Compiler_parameters_clauseContext extends ParserRuleContext {
    parameter_name(): Parameter_nameContext;
    EQUALS_OP(): TerminalNode;
    parameter_value(): Parameter_valueContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Parameter_valueContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Library_nameContext extends ParserRuleContext {
    regular_id(): Regular_idContext[];
    regular_id(i: number): Regular_idContext;
    PERIOD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_viewContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    VIEW(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    SEMICOLON(): TerminalNode;
    ADD(): TerminalNode | undefined;
    out_of_line_constraint(): Out_of_line_constraintContext | undefined;
    MODIFY(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    constraint_name(): Constraint_nameContext | undefined;
    DROP(): TerminalNode | undefined;
    COMPILE(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    RELY(): TerminalNode | undefined;
    NORELY(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    alter_view_editionable(): Alter_view_editionableContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_view_editionableContext extends ParserRuleContext {
    EDITIONABLE(): TerminalNode | undefined;
    NONEDITIONABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_viewContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    VIEW(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    AS(): TerminalNode;
    select_only_statement(): Select_only_statementContext;
    OR(): TerminalNode[];
    OR(i: number): TerminalNode;
    REPLACE(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    EDITIONABLE(): TerminalNode | undefined;
    EDITIONING(): TerminalNode | undefined;
    view_options(): View_optionsContext | undefined;
    subquery_restriction_clause(): Subquery_restriction_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class View_optionsContext extends ParserRuleContext {
    view_alias_constraint(): View_alias_constraintContext | undefined;
    object_view_clause(): Object_view_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class View_alias_constraintContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    table_alias(): Table_aliasContext[];
    table_alias(i: number): Table_aliasContext;
    out_of_line_constraint(): Out_of_line_constraintContext[];
    out_of_line_constraint(i: number): Out_of_line_constraintContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    inline_constraint(): Inline_constraintContext[];
    inline_constraint(i: number): Inline_constraintContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Object_view_clauseContext extends ParserRuleContext {
    OF(): TerminalNode;
    type_name(): Type_nameContext;
    WITH(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    UNDER(): TerminalNode | undefined;
    tableview_name(): Tableview_nameContext | undefined;
    IDENTIFIER(): TerminalNode | undefined;
    ID(): TerminalNode | undefined;
    OID(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    DEFAULT(): TerminalNode | undefined;
    REGULAR_ID(): TerminalNode[];
    REGULAR_ID(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    out_of_line_constraint(): Out_of_line_constraintContext[];
    out_of_line_constraint(i: number): Out_of_line_constraintContext;
    inline_constraint(): Inline_constraintContext[];
    inline_constraint(i: number): Inline_constraintContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Inline_constraintContext extends ParserRuleContext {
    NULL_(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    references_clause(): References_clauseContext | undefined;
    check_constraint(): Check_constraintContext | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    constraint_name(): Constraint_nameContext | undefined;
    constraint_state(): Constraint_stateContext | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Inline_ref_constraintContext extends ParserRuleContext {
    SCOPE(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    tableview_name(): Tableview_nameContext | undefined;
    WITH(): TerminalNode | undefined;
    ROWID(): TerminalNode | undefined;
    references_clause(): References_clauseContext | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    constraint_name(): Constraint_nameContext | undefined;
    constraint_state(): Constraint_stateContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Out_of_line_ref_constraintContext extends ParserRuleContext {
    _ref_col_or_attr: Regular_idContext;
    SCOPE(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    IS(): TerminalNode | undefined;
    tableview_name(): Tableview_nameContext | undefined;
    regular_id(): Regular_idContext[];
    regular_id(i: number): Regular_idContext;
    REF(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    ROWID(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    references_clause(): References_clauseContext | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    constraint_name(): Constraint_nameContext | undefined;
    constraint_state(): Constraint_stateContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Out_of_line_constraintContext extends ParserRuleContext {
    constraint_state(): Constraint_stateContext | undefined;
    UNIQUE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    foreign_key_clause(): Foreign_key_clauseContext | undefined;
    CHECK(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    constraint_name(): Constraint_nameContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Constraint_stateContext extends ParserRuleContext {
    DEFERRABLE(): TerminalNode[];
    DEFERRABLE(i: number): TerminalNode;
    INITIALLY(): TerminalNode[];
    INITIALLY(i: number): TerminalNode;
    using_index_clause(): Using_index_clauseContext[];
    using_index_clause(i: number): Using_index_clauseContext;
    IMMEDIATE(): TerminalNode[];
    IMMEDIATE(i: number): TerminalNode;
    DEFERRED(): TerminalNode[];
    DEFERRED(i: number): TerminalNode;
    RELY(): TerminalNode[];
    RELY(i: number): TerminalNode;
    NORELY(): TerminalNode[];
    NORELY(i: number): TerminalNode;
    ENABLE(): TerminalNode[];
    ENABLE(i: number): TerminalNode;
    DISABLE(): TerminalNode[];
    DISABLE(i: number): TerminalNode;
    VALIDATE(): TerminalNode[];
    VALIDATE(i: number): TerminalNode;
    NOVALIDATE(): TerminalNode[];
    NOVALIDATE(i: number): TerminalNode;
    NOT(): TerminalNode[];
    NOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_tablespaceContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    TABLESPACE(): TerminalNode;
    tablespace(): TablespaceContext;
    SEMICOLON(): TerminalNode;
    DEFAULT(): TerminalNode | undefined;
    MINIMUM(): TerminalNode | undefined;
    EXTENT(): TerminalNode | undefined;
    size_clause(): Size_clauseContext | undefined;
    RESIZE(): TerminalNode | undefined;
    COALESCE(): TerminalNode | undefined;
    SHRINK(): TerminalNode | undefined;
    SPACE_KEYWORD(): TerminalNode | undefined;
    RENAME(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    new_tablespace_name(): New_tablespace_nameContext | undefined;
    begin_or_end(): Begin_or_endContext | undefined;
    BACKUP(): TerminalNode | undefined;
    datafile_tempfile_clauses(): Datafile_tempfile_clausesContext | undefined;
    tablespace_logging_clauses(): Tablespace_logging_clausesContext | undefined;
    tablespace_group_clause(): Tablespace_group_clauseContext | undefined;
    tablespace_state_clauses(): Tablespace_state_clausesContext | undefined;
    autoextend_clause(): Autoextend_clauseContext | undefined;
    flashback_mode_clause(): Flashback_mode_clauseContext | undefined;
    tablespace_retention_clause(): Tablespace_retention_clauseContext | undefined;
    table_compression(): Table_compressionContext | undefined;
    storage_clause(): Storage_clauseContext | undefined;
    KEEP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Datafile_tempfile_clausesContext extends ParserRuleContext {
    ADD(): TerminalNode | undefined;
    datafile_specification(): Datafile_specificationContext | undefined;
    tempfile_specification(): Tempfile_specificationContext | undefined;
    DROP(): TerminalNode | undefined;
    DATAFILE(): TerminalNode | undefined;
    TEMPFILE(): TerminalNode | undefined;
    filename(): FilenameContext[];
    filename(i: number): FilenameContext;
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    KEEP(): TerminalNode | undefined;
    size_clause(): Size_clauseContext | undefined;
    SHRINK(): TerminalNode | undefined;
    RENAME(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    online_or_offline(): Online_or_offlineContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Tablespace_logging_clausesContext extends ParserRuleContext {
    logging_clause(): Logging_clauseContext | undefined;
    FORCE(): TerminalNode | undefined;
    LOGGING(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Tablespace_group_clauseContext extends ParserRuleContext {
    TABLESPACE(): TerminalNode;
    GROUP(): TerminalNode;
    tablespace_group_name(): Tablespace_group_nameContext | undefined;
    CHAR_STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Tablespace_group_nameContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Tablespace_state_clausesContext extends ParserRuleContext {
    ONLINE(): TerminalNode | undefined;
    OFFLINE(): TerminalNode | undefined;
    NORMAL(): TerminalNode | undefined;
    TEMPORARY(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    PERMANENT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Flashback_mode_clauseContext extends ParserRuleContext {
    FLASHBACK(): TerminalNode;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class New_tablespace_nameContext extends ParserRuleContext {
    tablespace(): TablespaceContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_tablespaceContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    SEMICOLON(): TerminalNode;
    permanent_tablespace_clause(): Permanent_tablespace_clauseContext | undefined;
    temporary_tablespace_clause(): Temporary_tablespace_clauseContext | undefined;
    undo_tablespace_clause(): Undo_tablespace_clauseContext | undefined;
    BIGFILE(): TerminalNode | undefined;
    SMALLFILE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Permanent_tablespace_clauseContext extends ParserRuleContext {
    TABLESPACE(): TerminalNode;
    id_expression(): Id_expressionContext;
    datafile_specification(): Datafile_specificationContext | undefined;
    MINIMUM(): TerminalNode[];
    MINIMUM(i: number): TerminalNode;
    EXTENT(): TerminalNode[];
    EXTENT(i: number): TerminalNode;
    size_clause(): Size_clauseContext[];
    size_clause(i: number): Size_clauseContext;
    BLOCKSIZE(): TerminalNode[];
    BLOCKSIZE(i: number): TerminalNode;
    logging_clause(): Logging_clauseContext[];
    logging_clause(i: number): Logging_clauseContext;
    FORCE(): TerminalNode[];
    FORCE(i: number): TerminalNode;
    LOGGING(): TerminalNode[];
    LOGGING(i: number): TerminalNode;
    ENCRYPTION(): TerminalNode[];
    ENCRYPTION(i: number): TerminalNode;
    tablespace_encryption_spec(): Tablespace_encryption_specContext[];
    tablespace_encryption_spec(i: number): Tablespace_encryption_specContext;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    extent_management_clause(): Extent_management_clauseContext[];
    extent_management_clause(i: number): Extent_management_clauseContext;
    segment_management_clause(): Segment_management_clauseContext[];
    segment_management_clause(i: number): Segment_management_clauseContext;
    flashback_mode_clause(): Flashback_mode_clauseContext[];
    flashback_mode_clause(i: number): Flashback_mode_clauseContext;
    ONLINE(): TerminalNode[];
    ONLINE(i: number): TerminalNode;
    OFFLINE(): TerminalNode[];
    OFFLINE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Tablespace_encryption_specContext extends ParserRuleContext {
    _encrypt_algorithm: Token;
    USING(): TerminalNode;
    CHAR_STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Logging_clauseContext extends ParserRuleContext {
    LOGGING(): TerminalNode | undefined;
    NOLOGGING(): TerminalNode | undefined;
    FILESYSTEM_LIKE_LOGGING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Extent_management_clauseContext extends ParserRuleContext {
    EXTENT(): TerminalNode;
    MANAGEMENT(): TerminalNode;
    LOCAL(): TerminalNode;
    AUTOALLOCATE(): TerminalNode | undefined;
    UNIFORM(): TerminalNode | undefined;
    SIZE(): TerminalNode | undefined;
    size_clause(): Size_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Segment_management_clauseContext extends ParserRuleContext {
    SEGMENT(): TerminalNode;
    SPACE_KEYWORD(): TerminalNode;
    MANAGEMENT(): TerminalNode;
    AUTO(): TerminalNode | undefined;
    MANUAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Temporary_tablespace_clauseContext extends ParserRuleContext {
    _tablespace_name: Id_expressionContext;
    TEMPORARY(): TerminalNode;
    TABLESPACE(): TerminalNode;
    id_expression(): Id_expressionContext;
    tempfile_specification(): Tempfile_specificationContext | undefined;
    tablespace_group_clause(): Tablespace_group_clauseContext | undefined;
    extent_management_clause(): Extent_management_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Undo_tablespace_clauseContext extends ParserRuleContext {
    _tablespace_name: Id_expressionContext;
    UNDO(): TerminalNode;
    TABLESPACE(): TerminalNode;
    id_expression(): Id_expressionContext;
    datafile_specification(): Datafile_specificationContext | undefined;
    extent_management_clause(): Extent_management_clauseContext | undefined;
    tablespace_retention_clause(): Tablespace_retention_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Tablespace_retention_clauseContext extends ParserRuleContext {
    RETENTION(): TerminalNode;
    GUARANTEE(): TerminalNode | undefined;
    NOGUARANTEE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Datafile_specificationContext extends ParserRuleContext {
    DATAFILE(): TerminalNode;
    datafile_tempfile_spec(): Datafile_tempfile_specContext | undefined;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Tempfile_specificationContext extends ParserRuleContext {
    TEMPFILE(): TerminalNode;
    datafile_tempfile_spec(): Datafile_tempfile_specContext | undefined;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Datafile_tempfile_specContext extends ParserRuleContext {
    CHAR_STRING(): TerminalNode | undefined;
    SIZE(): TerminalNode | undefined;
    size_clause(): Size_clauseContext | undefined;
    REUSE(): TerminalNode | undefined;
    autoextend_clause(): Autoextend_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Redo_log_file_specContext extends ParserRuleContext {
    DATAFILE(): TerminalNode | undefined;
    CHAR_STRING(): TerminalNode[];
    CHAR_STRING(i: number): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    SIZE(): TerminalNode | undefined;
    size_clause(): Size_clauseContext[];
    size_clause(i: number): Size_clauseContext;
    BLOCKSIZE(): TerminalNode | undefined;
    REUSE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Autoextend_clauseContext extends ParserRuleContext {
    AUTOEXTEND(): TerminalNode;
    OFF(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    size_clause(): Size_clauseContext | undefined;
    maxsize_clause(): Maxsize_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Maxsize_clauseContext extends ParserRuleContext {
    MAXSIZE(): TerminalNode;
    UNLIMITED(): TerminalNode | undefined;
    size_clause(): Size_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Build_clauseContext extends ParserRuleContext {
    BUILD(): TerminalNode;
    IMMEDIATE(): TerminalNode | undefined;
    DEFERRED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Parallel_clauseContext extends ParserRuleContext {
    _parallel_count: Token;
    NOPARALLEL(): TerminalNode | undefined;
    PARALLEL(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_materialized_viewContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    MATERIALIZED(): TerminalNode;
    VIEW(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    SEMICOLON(): TerminalNode;
    physical_attributes_clause(): Physical_attributes_clauseContext[];
    physical_attributes_clause(i: number): Physical_attributes_clauseContext;
    modify_mv_column_clause(): Modify_mv_column_clauseContext | undefined;
    table_compression(): Table_compressionContext | undefined;
    lob_storage_clause(): Lob_storage_clauseContext[];
    lob_storage_clause(i: number): Lob_storage_clauseContext;
    modify_lob_storage_clause(): Modify_lob_storage_clauseContext[];
    modify_lob_storage_clause(i: number): Modify_lob_storage_clauseContext;
    parallel_clause(): Parallel_clauseContext | undefined;
    logging_clause(): Logging_clauseContext | undefined;
    allocate_extent_clause(): Allocate_extent_clauseContext | undefined;
    deallocate_unused_clause(): Deallocate_unused_clauseContext | undefined;
    shrink_clause(): Shrink_clauseContext | undefined;
    alter_iot_clauses(): Alter_iot_clausesContext | undefined;
    USING(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    alter_mv_option1(): Alter_mv_option1Context | undefined;
    enable_or_disable(): Enable_or_disableContext | undefined;
    QUERY(): TerminalNode | undefined;
    REWRITE(): TerminalNode | undefined;
    COMPILE(): TerminalNode | undefined;
    CONSIDER(): TerminalNode | undefined;
    FRESH(): TerminalNode | undefined;
    cache_or_nocache(): Cache_or_nocacheContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_mv_option1Context extends ParserRuleContext {
    alter_mv_refresh(): Alter_mv_refreshContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_mv_refreshContext extends ParserRuleContext {
    REFRESH(): TerminalNode;
    FAST(): TerminalNode[];
    FAST(i: number): TerminalNode;
    COMPLETE(): TerminalNode[];
    COMPLETE(i: number): TerminalNode;
    FORCE(): TerminalNode[];
    FORCE(i: number): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    START(): TerminalNode[];
    START(i: number): TerminalNode;
    WITH(): TerminalNode[];
    WITH(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    NEXT(): TerminalNode[];
    NEXT(i: number): TerminalNode;
    PRIMARY(): TerminalNode[];
    PRIMARY(i: number): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    USING(): TerminalNode[];
    USING(i: number): TerminalNode;
    MASTER(): TerminalNode[];
    MASTER(i: number): TerminalNode;
    ROLLBACK(): TerminalNode[];
    ROLLBACK(i: number): TerminalNode;
    SEGMENT(): TerminalNode[];
    SEGMENT(i: number): TerminalNode;
    CONSTRAINTS(): TerminalNode[];
    CONSTRAINTS(i: number): TerminalNode;
    DEMAND(): TerminalNode[];
    DEMAND(i: number): TerminalNode;
    COMMIT(): TerminalNode[];
    COMMIT(i: number): TerminalNode;
    ENFORCED(): TerminalNode[];
    ENFORCED(i: number): TerminalNode;
    TRUSTED(): TerminalNode[];
    TRUSTED(i: number): TerminalNode;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    rollback_segment(): Rollback_segmentContext[];
    rollback_segment(i: number): Rollback_segmentContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Rollback_segmentContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Modify_mv_column_clauseContext extends ParserRuleContext {
    MODIFY(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    column_name(): Column_nameContext;
    RIGHT_PAREN(): TerminalNode;
    ENCRYPT(): TerminalNode | undefined;
    encryption_spec(): Encryption_specContext | undefined;
    DECRYPT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_materialized_view_logContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    MATERIALIZED(): TerminalNode;
    VIEW(): TerminalNode;
    LOG(): TerminalNode;
    ON(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    SEMICOLON(): TerminalNode;
    FORCE(): TerminalNode | undefined;
    physical_attributes_clause(): Physical_attributes_clauseContext | undefined;
    add_mv_log_column_clause(): Add_mv_log_column_clauseContext | undefined;
    parallel_clause(): Parallel_clauseContext | undefined;
    logging_clause(): Logging_clauseContext | undefined;
    allocate_extent_clause(): Allocate_extent_clauseContext | undefined;
    shrink_clause(): Shrink_clauseContext | undefined;
    move_mv_log_clause(): Move_mv_log_clauseContext | undefined;
    cache_or_nocache(): Cache_or_nocacheContext | undefined;
    mv_log_augmentation(): Mv_log_augmentationContext | undefined;
    mv_log_purge_clause(): Mv_log_purge_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Add_mv_log_column_clauseContext extends ParserRuleContext {
    ADD(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    column_name(): Column_nameContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Move_mv_log_clauseContext extends ParserRuleContext {
    MOVE(): TerminalNode;
    segment_attributes_clause(): Segment_attributes_clauseContext;
    parallel_clause(): Parallel_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Mv_log_augmentationContext extends ParserRuleContext {
    ADD(): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    new_values_clause(): New_values_clauseContext | undefined;
    OBJECT(): TerminalNode | undefined;
    ID(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    ROWID(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Datetime_exprContext extends ParserRuleContext {
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Interval_exprContext extends ParserRuleContext {
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Synchronous_or_asynchronousContext extends ParserRuleContext {
    SYNCHRONOUS(): TerminalNode | undefined;
    ASYNCHRONOUS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Including_or_excludingContext extends ParserRuleContext {
    INCLUDING(): TerminalNode | undefined;
    EXCLUDING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_materialized_view_logContext extends ParserRuleContext {
    _tablespace_name: Id_expressionContext;
    CREATE(): TerminalNode;
    MATERIALIZED(): TerminalNode;
    VIEW(): TerminalNode;
    LOG(): TerminalNode;
    ON(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    parallel_clause(): Parallel_clauseContext | undefined;
    WITH(): TerminalNode[];
    WITH(i: number): TerminalNode;
    physical_attributes_clause(): Physical_attributes_clauseContext[];
    physical_attributes_clause(i: number): Physical_attributes_clauseContext;
    TABLESPACE(): TerminalNode[];
    TABLESPACE(i: number): TerminalNode;
    logging_clause(): Logging_clauseContext[];
    logging_clause(i: number): Logging_clauseContext;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    mv_log_purge_clause(): Mv_log_purge_clauseContext[];
    mv_log_purge_clause(i: number): Mv_log_purge_clauseContext;
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    CACHE(): TerminalNode[];
    CACHE(i: number): TerminalNode;
    NOCACHE(): TerminalNode[];
    NOCACHE(i: number): TerminalNode;
    OBJECT(): TerminalNode[];
    OBJECT(i: number): TerminalNode;
    ID(): TerminalNode[];
    ID(i: number): TerminalNode;
    PRIMARY(): TerminalNode[];
    PRIMARY(i: number): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    ROWID(): TerminalNode[];
    ROWID(i: number): TerminalNode;
    SEQUENCE(): TerminalNode[];
    SEQUENCE(i: number): TerminalNode;
    COMMIT(): TerminalNode[];
    COMMIT(i: number): TerminalNode;
    SCN(): TerminalNode[];
    SCN(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    regular_id(): Regular_idContext[];
    regular_id(i: number): Regular_idContext;
    new_values_clause(): New_values_clauseContext[];
    new_values_clause(i: number): New_values_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class New_values_clauseContext extends ParserRuleContext {
    NEW(): TerminalNode;
    VALUES(): TerminalNode;
    INCLUDING(): TerminalNode | undefined;
    EXCLUDING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Mv_log_purge_clauseContext extends ParserRuleContext {
    PURGE(): TerminalNode;
    IMMEDIATE(): TerminalNode | undefined;
    SYNCHRONOUS(): TerminalNode | undefined;
    ASYNCHRONOUS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_materialized_viewContext extends ParserRuleContext {
    _mv_tablespace: Id_expressionContext;
    CREATE(): TerminalNode;
    MATERIALIZED(): TerminalNode;
    VIEW(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    AS(): TerminalNode;
    select_only_statement(): Select_only_statementContext;
    SEMICOLON(): TerminalNode;
    ON(): TerminalNode | undefined;
    PREBUILT(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    type_name(): Type_nameContext | undefined;
    USING(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    create_mv_refresh(): Create_mv_refreshContext | undefined;
    FOR(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    QUERY(): TerminalNode | undefined;
    REWRITE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    ENABLE(): TerminalNode | undefined;
    REDUCED(): TerminalNode | undefined;
    PRECISION(): TerminalNode | undefined;
    physical_properties(): Physical_propertiesContext | undefined;
    parallel_clause(): Parallel_clauseContext | undefined;
    build_clause(): Build_clauseContext | undefined;
    WITH(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    NOCACHE(): TerminalNode | undefined;
    physical_attributes_clause(): Physical_attributes_clauseContext[];
    physical_attributes_clause(i: number): Physical_attributes_clauseContext;
    TABLESPACE(): TerminalNode[];
    TABLESPACE(i: number): TerminalNode;
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_mv_refreshContext extends ParserRuleContext {
    _rb_segment: Token;
    NEVER(): TerminalNode | undefined;
    REFRESH(): TerminalNode | undefined;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    WITH(): TerminalNode[];
    WITH(i: number): TerminalNode;
    USING(): TerminalNode[];
    USING(i: number): TerminalNode;
    CONSTRAINTS(): TerminalNode[];
    CONSTRAINTS(i: number): TerminalNode;
    FAST(): TerminalNode[];
    FAST(i: number): TerminalNode;
    COMPLETE(): TerminalNode[];
    COMPLETE(i: number): TerminalNode;
    FORCE(): TerminalNode[];
    FORCE(i: number): TerminalNode;
    DEMAND(): TerminalNode[];
    DEMAND(i: number): TerminalNode;
    COMMIT(): TerminalNode[];
    COMMIT(i: number): TerminalNode;
    ENFORCED(): TerminalNode[];
    ENFORCED(i: number): TerminalNode;
    TRUSTED(): TerminalNode[];
    TRUSTED(i: number): TerminalNode;
    START(): TerminalNode[];
    START(i: number): TerminalNode;
    NEXT(): TerminalNode[];
    NEXT(i: number): TerminalNode;
    PRIMARY(): TerminalNode[];
    PRIMARY(i: number): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    ROWID(): TerminalNode[];
    ROWID(i: number): TerminalNode;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    ROLLBACK(): TerminalNode[];
    ROLLBACK(i: number): TerminalNode;
    SEGMENT(): TerminalNode[];
    SEGMENT(i: number): TerminalNode;
    REGULAR_ID(): TerminalNode[];
    REGULAR_ID(i: number): TerminalNode;
    MASTER(): TerminalNode[];
    MASTER(i: number): TerminalNode;
    LOCAL(): TerminalNode[];
    LOCAL(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_contextContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    CONTEXT(): TerminalNode;
    oracle_namespace(): Oracle_namespaceContext;
    USING(): TerminalNode;
    package_name(): Package_nameContext;
    SEMICOLON(): TerminalNode;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    schema_object_name(): Schema_object_nameContext | undefined;
    PERIOD(): TerminalNode | undefined;
    INITIALIZED(): TerminalNode | undefined;
    ACCESSED(): TerminalNode | undefined;
    GLOBALLY(): TerminalNode | undefined;
    EXTERNALLY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Oracle_namespaceContext extends ParserRuleContext {
    id_expression(): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_clusterContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    CLUSTER(): TerminalNode;
    cluster_name(): Cluster_nameContext;
    LEFT_PAREN(): TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    datatype(): DatatypeContext[];
    datatype(i: number): DatatypeContext;
    RIGHT_PAREN(): TerminalNode;
    SEMICOLON(): TerminalNode;
    SORT(): TerminalNode[];
    SORT(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    physical_attributes_clause(): Physical_attributes_clauseContext[];
    physical_attributes_clause(i: number): Physical_attributes_clauseContext;
    SIZE(): TerminalNode[];
    SIZE(i: number): TerminalNode;
    size_clause(): Size_clauseContext[];
    size_clause(i: number): Size_clauseContext;
    TABLESPACE(): TerminalNode[];
    TABLESPACE(i: number): TerminalNode;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    INDEX(): TerminalNode[];
    INDEX(i: number): TerminalNode;
    HASHKEYS(): TerminalNode[];
    HASHKEYS(i: number): TerminalNode;
    UNSIGNED_INTEGER(): TerminalNode[];
    UNSIGNED_INTEGER(i: number): TerminalNode;
    parallel_clause(): Parallel_clauseContext | undefined;
    ROWDEPENDENCIES(): TerminalNode | undefined;
    NOROWDEPENDENCIES(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    NOCACHE(): TerminalNode | undefined;
    SINGLE(): TerminalNode[];
    SINGLE(i: number): TerminalNode;
    TABLE(): TerminalNode[];
    TABLE(i: number): TerminalNode;
    HASH(): TerminalNode[];
    HASH(i: number): TerminalNode;
    IS(): TerminalNode[];
    IS(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_tableContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    TABLE(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    SEMICOLON(): TerminalNode;
    relational_table(): Relational_tableContext | undefined;
    object_table(): Object_tableContext | undefined;
    xmltype_table(): Xmltype_tableContext | undefined;
    GLOBAL(): TerminalNode | undefined;
    TEMPORARY(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    select_only_statement(): Select_only_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xmltype_tableContext extends ParserRuleContext {
    OF(): TerminalNode;
    XMLTYPE(): TerminalNode[];
    XMLTYPE(i: number): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    object_properties(): Object_propertiesContext | undefined;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    xmltype_storage(): Xmltype_storageContext | undefined;
    xmlschema_spec(): Xmlschema_specContext | undefined;
    xmltype_virtual_columns(): Xmltype_virtual_columnsContext | undefined;
    ON(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    oid_clause(): Oid_clauseContext | undefined;
    oid_index_clause(): Oid_index_clauseContext | undefined;
    physical_properties(): Physical_propertiesContext | undefined;
    column_properties(): Column_propertiesContext | undefined;
    table_partitioning_clauses(): Table_partitioning_clausesContext | undefined;
    RESULT_CACHE(): TerminalNode | undefined;
    MODE(): TerminalNode | undefined;
    parallel_clause(): Parallel_clauseContext | undefined;
    row_movement_clause(): Row_movement_clauseContext | undefined;
    flashback_archive_clause(): Flashback_archive_clauseContext | undefined;
    DELETE(): TerminalNode | undefined;
    PRESERVE(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    NOCACHE(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    ROWDEPENDENCIES(): TerminalNode | undefined;
    NOROWDEPENDENCIES(): TerminalNode | undefined;
    enable_disable_clause(): Enable_disable_clauseContext[];
    enable_disable_clause(i: number): Enable_disable_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xmltype_virtual_columnsContext extends ParserRuleContext {
    VIRTUAL(): TerminalNode;
    COLUMNS(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    AS(): TerminalNode[];
    AS(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xmltype_column_propertiesContext extends ParserRuleContext {
    XMLTYPE(): TerminalNode;
    column_name(): Column_nameContext;
    COLUMN(): TerminalNode | undefined;
    xmltype_storage(): Xmltype_storageContext | undefined;
    xmlschema_spec(): Xmlschema_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xmltype_storageContext extends ParserRuleContext {
    STORE(): TerminalNode;
    AS(): TerminalNode;
    OBJECT(): TerminalNode | undefined;
    RELATIONAL(): TerminalNode | undefined;
    CLOB(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    XML(): TerminalNode | undefined;
    lob_segname(): Lob_segnameContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    lob_parameters(): Lob_parametersContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    SECUREFILE(): TerminalNode | undefined;
    BASICFILE(): TerminalNode | undefined;
    VARRAYS(): TerminalNode | undefined;
    LOBS(): TerminalNode | undefined;
    TABLES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xmlschema_specContext extends ParserRuleContext {
    ELEMENT(): TerminalNode;
    DELIMITED_ID(): TerminalNode[];
    DELIMITED_ID(i: number): TerminalNode;
    XMLSCHEMA(): TerminalNode | undefined;
    allow_or_disallow(): Allow_or_disallowContext[];
    allow_or_disallow(i: number): Allow_or_disallowContext;
    NONSCHEMA(): TerminalNode | undefined;
    ANYSCHEMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Object_tableContext extends ParserRuleContext {
    OF(): TerminalNode;
    type_name(): Type_nameContext;
    object_table_substitution(): Object_table_substitutionContext | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    object_properties(): Object_propertiesContext[];
    object_properties(i: number): Object_propertiesContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    ON(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    oid_clause(): Oid_clauseContext | undefined;
    oid_index_clause(): Oid_index_clauseContext | undefined;
    physical_properties(): Physical_propertiesContext | undefined;
    column_properties(): Column_propertiesContext | undefined;
    table_partitioning_clauses(): Table_partitioning_clausesContext | undefined;
    RESULT_CACHE(): TerminalNode | undefined;
    MODE(): TerminalNode | undefined;
    parallel_clause(): Parallel_clauseContext | undefined;
    row_movement_clause(): Row_movement_clauseContext | undefined;
    flashback_archive_clause(): Flashback_archive_clauseContext | undefined;
    DELETE(): TerminalNode | undefined;
    PRESERVE(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    NOCACHE(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    ROWDEPENDENCIES(): TerminalNode | undefined;
    NOROWDEPENDENCIES(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    enable_disable_clause(): Enable_disable_clauseContext[];
    enable_disable_clause(i: number): Enable_disable_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Oid_index_clauseContext extends ParserRuleContext {
    OIDINDEX(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    index_name(): Index_nameContext | undefined;
    physical_attributes_clause(): Physical_attributes_clauseContext[];
    physical_attributes_clause(i: number): Physical_attributes_clauseContext;
    TABLESPACE(): TerminalNode[];
    TABLESPACE(i: number): TerminalNode;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Oid_clauseContext extends ParserRuleContext {
    OBJECT(): TerminalNode;
    IDENTIFIER(): TerminalNode;
    IS(): TerminalNode;
    SYSTEM(): TerminalNode | undefined;
    GENERATED(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Object_propertiesContext extends ParserRuleContext {
    column_name(): Column_nameContext | undefined;
    attribute_name(): Attribute_nameContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    inline_constraint(): Inline_constraintContext[];
    inline_constraint(i: number): Inline_constraintContext;
    inline_ref_constraint(): Inline_ref_constraintContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    out_of_line_constraint(): Out_of_line_constraintContext | undefined;
    out_of_line_ref_constraint(): Out_of_line_ref_constraintContext | undefined;
    supplemental_logging_props(): Supplemental_logging_propsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Object_table_substitutionContext extends ParserRuleContext {
    SUBSTITUTABLE(): TerminalNode;
    AT(): TerminalNode;
    ALL(): TerminalNode;
    LEVELS(): TerminalNode;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Relational_tableContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    relational_property(): Relational_propertyContext[];
    relational_property(i: number): Relational_propertyContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    ON(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    physical_properties(): Physical_propertiesContext | undefined;
    column_properties(): Column_propertiesContext | undefined;
    table_partitioning_clauses(): Table_partitioning_clausesContext | undefined;
    RESULT_CACHE(): TerminalNode | undefined;
    MODE(): TerminalNode | undefined;
    parallel_clause(): Parallel_clauseContext | undefined;
    row_movement_clause(): Row_movement_clauseContext | undefined;
    flashback_archive_clause(): Flashback_archive_clauseContext | undefined;
    DELETE(): TerminalNode | undefined;
    PRESERVE(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    NOCACHE(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    ROWDEPENDENCIES(): TerminalNode | undefined;
    NOROWDEPENDENCIES(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    enable_disable_clause(): Enable_disable_clauseContext[];
    enable_disable_clause(i: number): Enable_disable_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Relational_propertyContext extends ParserRuleContext {
    column_definition(): Column_definitionContext | undefined;
    virtual_column_definition(): Virtual_column_definitionContext | undefined;
    out_of_line_constraint(): Out_of_line_constraintContext | undefined;
    out_of_line_ref_constraint(): Out_of_line_ref_constraintContext | undefined;
    supplemental_logging_props(): Supplemental_logging_propsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_partitioning_clausesContext extends ParserRuleContext {
    range_partitions(): Range_partitionsContext | undefined;
    list_partitions(): List_partitionsContext | undefined;
    hash_partitions(): Hash_partitionsContext | undefined;
    composite_range_partitions(): Composite_range_partitionsContext | undefined;
    composite_list_partitions(): Composite_list_partitionsContext | undefined;
    composite_hash_partitions(): Composite_hash_partitionsContext | undefined;
    reference_partitioning(): Reference_partitioningContext | undefined;
    system_partitioning(): System_partitioningContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Range_partitionsContext extends ParserRuleContext {
    PARTITION(): TerminalNode[];
    PARTITION(i: number): TerminalNode;
    BY(): TerminalNode;
    RANGE(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    range_values_clause(): Range_values_clauseContext[];
    range_values_clause(i: number): Range_values_clauseContext;
    table_partition_description(): Table_partition_descriptionContext[];
    table_partition_description(i: number): Table_partition_descriptionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    INTERVAL(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    partition_name(): Partition_nameContext[];
    partition_name(i: number): Partition_nameContext;
    STORE(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class List_partitionsContext extends ParserRuleContext {
    PARTITION(): TerminalNode[];
    PARTITION(i: number): TerminalNode;
    BY(): TerminalNode;
    LIST(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    column_name(): Column_nameContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    list_values_clause(): List_values_clauseContext[];
    list_values_clause(i: number): List_values_clauseContext;
    table_partition_description(): Table_partition_descriptionContext[];
    table_partition_description(i: number): Table_partition_descriptionContext;
    partition_name(): Partition_nameContext[];
    partition_name(i: number): Partition_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Hash_partitionsContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    HASH(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    RIGHT_PAREN(): TerminalNode;
    individual_hash_partitions(): Individual_hash_partitionsContext | undefined;
    hash_partitions_by_quantity(): Hash_partitions_by_quantityContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Individual_hash_partitionsContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    PARTITION(): TerminalNode[];
    PARTITION(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    partition_name(): Partition_nameContext[];
    partition_name(i: number): Partition_nameContext;
    partitioning_storage_clause(): Partitioning_storage_clauseContext[];
    partitioning_storage_clause(i: number): Partitioning_storage_clauseContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Hash_partitions_by_quantityContext extends ParserRuleContext {
    PARTITIONS(): TerminalNode;
    hash_partition_quantity(): Hash_partition_quantityContext;
    STORE(): TerminalNode[];
    STORE(i: number): TerminalNode;
    IN(): TerminalNode[];
    IN(i: number): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    table_compression(): Table_compressionContext | undefined;
    key_compression(): Key_compressionContext | undefined;
    OVERFLOW(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Hash_partition_quantityContext extends ParserRuleContext {
    UNSIGNED_INTEGER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Composite_range_partitionsContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    RANGE(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    range_partition_desc(): Range_partition_descContext[];
    range_partition_desc(i: number): Range_partition_descContext;
    subpartition_by_range(): Subpartition_by_rangeContext | undefined;
    subpartition_by_list(): Subpartition_by_listContext | undefined;
    subpartition_by_hash(): Subpartition_by_hashContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    INTERVAL(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    STORE(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Composite_list_partitionsContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    LIST(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    column_name(): Column_nameContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    list_partition_desc(): List_partition_descContext[];
    list_partition_desc(i: number): List_partition_descContext;
    subpartition_by_range(): Subpartition_by_rangeContext | undefined;
    subpartition_by_list(): Subpartition_by_listContext | undefined;
    subpartition_by_hash(): Subpartition_by_hashContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Composite_hash_partitionsContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    HASH(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    subpartition_by_range(): Subpartition_by_rangeContext | undefined;
    subpartition_by_list(): Subpartition_by_listContext | undefined;
    subpartition_by_hash(): Subpartition_by_hashContext | undefined;
    individual_hash_partitions(): Individual_hash_partitionsContext | undefined;
    hash_partitions_by_quantity(): Hash_partitions_by_quantityContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Reference_partitioningContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    REFERENCE(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    regular_id(): Regular_idContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    reference_partition_desc(): Reference_partition_descContext[];
    reference_partition_desc(i: number): Reference_partition_descContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Reference_partition_descContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    table_partition_description(): Table_partition_descriptionContext;
    partition_name(): Partition_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class System_partitioningContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    SYSTEM(): TerminalNode;
    PARTITIONS(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    reference_partition_desc(): Reference_partition_descContext[];
    reference_partition_desc(i: number): Reference_partition_descContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Range_partition_descContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    range_values_clause(): Range_values_clauseContext;
    table_partition_description(): Table_partition_descriptionContext;
    partition_name(): Partition_nameContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    hash_subparts_by_quantity(): Hash_subparts_by_quantityContext | undefined;
    range_subpartition_desc(): Range_subpartition_descContext[];
    range_subpartition_desc(i: number): Range_subpartition_descContext;
    list_subpartition_desc(): List_subpartition_descContext[];
    list_subpartition_desc(i: number): List_subpartition_descContext;
    individual_hash_subparts(): Individual_hash_subpartsContext[];
    individual_hash_subparts(i: number): Individual_hash_subpartsContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class List_partition_descContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    list_values_clause(): List_values_clauseContext;
    table_partition_description(): Table_partition_descriptionContext;
    partition_name(): Partition_nameContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    hash_subparts_by_quantity(): Hash_subparts_by_quantityContext | undefined;
    range_subpartition_desc(): Range_subpartition_descContext[];
    range_subpartition_desc(i: number): Range_subpartition_descContext;
    list_subpartition_desc(): List_subpartition_descContext[];
    list_subpartition_desc(i: number): List_subpartition_descContext;
    individual_hash_subparts(): Individual_hash_subpartsContext[];
    individual_hash_subparts(i: number): Individual_hash_subpartsContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subpartition_templateContext extends ParserRuleContext {
    SUBPARTITION(): TerminalNode;
    TEMPLATE(): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    hash_subpartition_quantity(): Hash_subpartition_quantityContext | undefined;
    range_subpartition_desc(): Range_subpartition_descContext[];
    range_subpartition_desc(i: number): Range_subpartition_descContext;
    list_subpartition_desc(): List_subpartition_descContext[];
    list_subpartition_desc(i: number): List_subpartition_descContext;
    individual_hash_subparts(): Individual_hash_subpartsContext[];
    individual_hash_subparts(i: number): Individual_hash_subpartsContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Hash_subpartition_quantityContext extends ParserRuleContext {
    UNSIGNED_INTEGER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subpartition_by_rangeContext extends ParserRuleContext {
    SUBPARTITION(): TerminalNode;
    BY(): TerminalNode;
    RANGE(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    subpartition_template(): Subpartition_templateContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subpartition_by_listContext extends ParserRuleContext {
    SUBPARTITION(): TerminalNode;
    BY(): TerminalNode;
    LIST(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    column_name(): Column_nameContext;
    RIGHT_PAREN(): TerminalNode;
    subpartition_template(): Subpartition_templateContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subpartition_by_hashContext extends ParserRuleContext {
    SUBPARTITION(): TerminalNode;
    BY(): TerminalNode;
    HASH(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SUBPARTITIONS(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    subpartition_template(): Subpartition_templateContext | undefined;
    STORE(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subpartition_nameContext extends ParserRuleContext {
    partition_name(): Partition_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Range_subpartition_descContext extends ParserRuleContext {
    SUBPARTITION(): TerminalNode;
    range_values_clause(): Range_values_clauseContext;
    subpartition_name(): Subpartition_nameContext | undefined;
    partitioning_storage_clause(): Partitioning_storage_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class List_subpartition_descContext extends ParserRuleContext {
    SUBPARTITION(): TerminalNode;
    list_values_clause(): List_values_clauseContext;
    subpartition_name(): Subpartition_nameContext | undefined;
    partitioning_storage_clause(): Partitioning_storage_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Individual_hash_subpartsContext extends ParserRuleContext {
    SUBPARTITION(): TerminalNode;
    subpartition_name(): Subpartition_nameContext | undefined;
    partitioning_storage_clause(): Partitioning_storage_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Hash_subparts_by_quantityContext extends ParserRuleContext {
    SUBPARTITIONS(): TerminalNode;
    UNSIGNED_INTEGER(): TerminalNode;
    STORE(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Range_values_clauseContext extends ParserRuleContext {
    VALUES(): TerminalNode;
    LESS(): TerminalNode;
    THAN(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    literal(): LiteralContext[];
    literal(i: number): LiteralContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class List_values_clauseContext extends ParserRuleContext {
    VALUES(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    literal(): LiteralContext[];
    literal(i: number): LiteralContext;
    DEFAULT(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_partition_descriptionContext extends ParserRuleContext {
    deferred_segment_creation(): Deferred_segment_creationContext | undefined;
    segment_attributes_clause(): Segment_attributes_clauseContext[];
    segment_attributes_clause(i: number): Segment_attributes_clauseContext;
    table_compression(): Table_compressionContext | undefined;
    key_compression(): Key_compressionContext | undefined;
    OVERFLOW(): TerminalNode | undefined;
    lob_storage_clause(): Lob_storage_clauseContext | undefined;
    varray_col_properties(): Varray_col_propertiesContext | undefined;
    nested_table_col_properties(): Nested_table_col_propertiesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Partitioning_storage_clauseContext extends ParserRuleContext {
    TABLESPACE(): TerminalNode[];
    TABLESPACE(i: number): TerminalNode;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    OVERFLOW(): TerminalNode[];
    OVERFLOW(i: number): TerminalNode;
    table_compression(): Table_compressionContext[];
    table_compression(i: number): Table_compressionContext;
    key_compression(): Key_compressionContext[];
    key_compression(i: number): Key_compressionContext;
    lob_partitioning_storage(): Lob_partitioning_storageContext[];
    lob_partitioning_storage(i: number): Lob_partitioning_storageContext;
    VARRAY(): TerminalNode[];
    VARRAY(i: number): TerminalNode;
    varray_item(): Varray_itemContext[];
    varray_item(i: number): Varray_itemContext;
    STORE(): TerminalNode[];
    STORE(i: number): TerminalNode;
    AS(): TerminalNode[];
    AS(i: number): TerminalNode;
    LOB(): TerminalNode[];
    LOB(i: number): TerminalNode;
    lob_segname(): Lob_segnameContext[];
    lob_segname(i: number): Lob_segnameContext;
    BASICFILE(): TerminalNode[];
    BASICFILE(i: number): TerminalNode;
    SECUREFILE(): TerminalNode[];
    SECUREFILE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lob_partitioning_storageContext extends ParserRuleContext {
    LOB(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    lob_item(): Lob_itemContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    STORE(): TerminalNode;
    AS(): TerminalNode;
    lob_segname(): Lob_segnameContext | undefined;
    TABLESPACE(): TerminalNode | undefined;
    tablespace(): TablespaceContext | undefined;
    BASICFILE(): TerminalNode | undefined;
    SECUREFILE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Datatype_null_enableContext extends ParserRuleContext {
    column_name(): Column_nameContext;
    datatype(): DatatypeContext;
    SORT(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    ENCRYPT(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    NULL_(): TerminalNode | undefined;
    ENABLE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    CHAR_STRING(): TerminalNode[];
    CHAR_STRING(i: number): TerminalNode;
    IDENTIFIED(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    REGULAR_ID(): TerminalNode | undefined;
    SALT(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Size_clauseContext extends ParserRuleContext {
    UNSIGNED_INTEGER(): TerminalNode;
    REGULAR_ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_compressionContext extends ParserRuleContext {
    COMPRESS(): TerminalNode | undefined;
    BASIC(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    OLTP(): TerminalNode | undefined;
    QUERY(): TerminalNode | undefined;
    ARCHIVE(): TerminalNode | undefined;
    LOW(): TerminalNode | undefined;
    HIGH(): TerminalNode | undefined;
    NOCOMPRESS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Physical_attributes_clauseContext extends ParserRuleContext {
    _pctfree: Token;
    _pctused: Token;
    _inittrans: Token;
    PCTFREE(): TerminalNode[];
    PCTFREE(i: number): TerminalNode;
    PCTUSED(): TerminalNode[];
    PCTUSED(i: number): TerminalNode;
    INITRANS(): TerminalNode[];
    INITRANS(i: number): TerminalNode;
    storage_clause(): Storage_clauseContext[];
    storage_clause(i: number): Storage_clauseContext;
    UNSIGNED_INTEGER(): TerminalNode[];
    UNSIGNED_INTEGER(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Storage_clauseContext extends ParserRuleContext {
    _initial_size: Size_clauseContext;
    _next_size: Size_clauseContext;
    _minextents: Token;
    _pctincrease: Token;
    _freelists: Token;
    _freelist_groups: Token;
    STORAGE(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    INITIAL(): TerminalNode[];
    INITIAL(i: number): TerminalNode;
    NEXT(): TerminalNode[];
    NEXT(i: number): TerminalNode;
    MINEXTENTS(): TerminalNode[];
    MINEXTENTS(i: number): TerminalNode;
    MAXEXTENTS(): TerminalNode[];
    MAXEXTENTS(i: number): TerminalNode;
    PCTINCREASE(): TerminalNode[];
    PCTINCREASE(i: number): TerminalNode;
    FREELISTS(): TerminalNode[];
    FREELISTS(i: number): TerminalNode;
    FREELIST(): TerminalNode[];
    FREELIST(i: number): TerminalNode;
    GROUPS(): TerminalNode[];
    GROUPS(i: number): TerminalNode;
    OPTIMAL(): TerminalNode[];
    OPTIMAL(i: number): TerminalNode;
    BUFFER_POOL(): TerminalNode[];
    BUFFER_POOL(i: number): TerminalNode;
    FLASH_CACHE(): TerminalNode[];
    FLASH_CACHE(i: number): TerminalNode;
    ENCRYPT(): TerminalNode[];
    ENCRYPT(i: number): TerminalNode;
    size_clause(): Size_clauseContext[];
    size_clause(i: number): Size_clauseContext;
    UNSIGNED_INTEGER(): TerminalNode[];
    UNSIGNED_INTEGER(i: number): TerminalNode;
    KEEP(): TerminalNode[];
    KEEP(i: number): TerminalNode;
    RECYCLE(): TerminalNode[];
    RECYCLE(i: number): TerminalNode;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    NONE(): TerminalNode[];
    NONE(i: number): TerminalNode;
    UNLIMITED(): TerminalNode[];
    UNLIMITED(i: number): TerminalNode;
    NULL_(): TerminalNode[];
    NULL_(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Deferred_segment_creationContext extends ParserRuleContext {
    SEGMENT(): TerminalNode;
    CREATION(): TerminalNode;
    IMMEDIATE(): TerminalNode | undefined;
    DEFERRED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Segment_attributes_clauseContext extends ParserRuleContext {
    _tablespace_name: Id_expressionContext;
    physical_attributes_clause(): Physical_attributes_clauseContext[];
    physical_attributes_clause(i: number): Physical_attributes_clauseContext;
    TABLESPACE(): TerminalNode[];
    TABLESPACE(i: number): TerminalNode;
    logging_clause(): Logging_clauseContext[];
    logging_clause(i: number): Logging_clauseContext;
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Physical_propertiesContext extends ParserRuleContext {
    segment_attributes_clause(): Segment_attributes_clauseContext;
    deferred_segment_creation(): Deferred_segment_creationContext | undefined;
    table_compression(): Table_compressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Row_movement_clauseContext extends ParserRuleContext {
    ROW(): TerminalNode;
    MOVEMENT(): TerminalNode;
    ENABLE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Flashback_archive_clauseContext extends ParserRuleContext {
    _flashback_archive: Token;
    FLASHBACK(): TerminalNode;
    ARCHIVE(): TerminalNode;
    REGULAR_ID(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Log_grpContext extends ParserRuleContext {
    UNSIGNED_INTEGER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Supplemental_table_loggingContext extends ParserRuleContext {
    ADD(): TerminalNode | undefined;
    SUPPLEMENTAL(): TerminalNode[];
    SUPPLEMENTAL(i: number): TerminalNode;
    LOG(): TerminalNode[];
    LOG(i: number): TerminalNode;
    supplemental_log_grp_clause(): Supplemental_log_grp_clauseContext[];
    supplemental_log_grp_clause(i: number): Supplemental_log_grp_clauseContext;
    supplemental_id_key_clause(): Supplemental_id_key_clauseContext[];
    supplemental_id_key_clause(i: number): Supplemental_id_key_clauseContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    DROP(): TerminalNode | undefined;
    GROUP(): TerminalNode[];
    GROUP(i: number): TerminalNode;
    log_grp(): Log_grpContext[];
    log_grp(i: number): Log_grpContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Supplemental_log_grp_clauseContext extends ParserRuleContext {
    GROUP(): TerminalNode;
    log_grp(): Log_grpContext;
    LEFT_PAREN(): TerminalNode;
    regular_id(): Regular_idContext[];
    regular_id(i: number): Regular_idContext;
    RIGHT_PAREN(): TerminalNode;
    NO(): TerminalNode[];
    NO(i: number): TerminalNode;
    LOG(): TerminalNode[];
    LOG(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    ALWAYS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Supplemental_id_key_clauseContext extends ParserRuleContext {
    DATA(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    COLUMNS(): TerminalNode;
    ALL(): TerminalNode[];
    ALL(i: number): TerminalNode;
    PRIMARY(): TerminalNode[];
    PRIMARY(i: number): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    UNIQUE(): TerminalNode[];
    UNIQUE(i: number): TerminalNode;
    FOREIGN(): TerminalNode[];
    FOREIGN(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Allocate_extent_clauseContext extends ParserRuleContext {
    _datafile: Token;
    _inst_num: Token;
    ALLOCATE(): TerminalNode;
    EXTENT(): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    SIZE(): TerminalNode[];
    SIZE(i: number): TerminalNode;
    size_clause(): Size_clauseContext[];
    size_clause(i: number): Size_clauseContext;
    DATAFILE(): TerminalNode[];
    DATAFILE(i: number): TerminalNode;
    INSTANCE(): TerminalNode[];
    INSTANCE(i: number): TerminalNode;
    CHAR_STRING(): TerminalNode[];
    CHAR_STRING(i: number): TerminalNode;
    UNSIGNED_INTEGER(): TerminalNode[];
    UNSIGNED_INTEGER(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Deallocate_unused_clauseContext extends ParserRuleContext {
    DEALLOCATE(): TerminalNode;
    UNUSED(): TerminalNode;
    KEEP(): TerminalNode | undefined;
    size_clause(): Size_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Shrink_clauseContext extends ParserRuleContext {
    SHRINK(): TerminalNode;
    SPACE_KEYWORD(): TerminalNode;
    COMPACT(): TerminalNode | undefined;
    CASCADE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Records_per_block_clauseContext extends ParserRuleContext {
    RECORDS_PER_BLOCK(): TerminalNode;
    MINIMIZE(): TerminalNode | undefined;
    NOMINIMIZE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Upgrade_table_clauseContext extends ParserRuleContext {
    UPGRADE(): TerminalNode;
    column_properties(): Column_propertiesContext;
    INCLUDING(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Truncate_tableContext extends ParserRuleContext {
    TRUNCATE(): TerminalNode;
    TABLE(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    SEMICOLON(): TerminalNode;
    PURGE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_tableContext extends ParserRuleContext {
    DROP(): TerminalNode;
    TABLE(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    SEMICOLON(): TerminalNode;
    PURGE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_viewContext extends ParserRuleContext {
    DROP(): TerminalNode;
    VIEW(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    SEMICOLON(): TerminalNode;
    CASCADE(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Comment_on_columnContext extends ParserRuleContext {
    COMMENT(): TerminalNode;
    ON(): TerminalNode;
    COLUMN(): TerminalNode;
    column_name(): Column_nameContext;
    IS(): TerminalNode;
    quoted_string(): Quoted_stringContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Enable_or_disableContext extends ParserRuleContext {
    ENABLE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Allow_or_disallowContext extends ParserRuleContext {
    ALLOW(): TerminalNode | undefined;
    DISALLOW(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_synonymContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    PUBLIC(): TerminalNode | undefined;
    SYNONYM(): TerminalNode;
    synonym_name(): Synonym_nameContext;
    FOR(): TerminalNode;
    schema_object_name(): Schema_object_nameContext;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    schema_name(): Schema_nameContext[];
    schema_name(i: number): Schema_nameContext;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    AT_SIGN(): TerminalNode | undefined;
    link_name(): Link_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Comment_on_tableContext extends ParserRuleContext {
    COMMENT(): TerminalNode;
    ON(): TerminalNode;
    TABLE(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    IS(): TerminalNode;
    quoted_string(): Quoted_stringContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_clusterContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    CLUSTER(): TerminalNode;
    cluster_name(): Cluster_nameContext;
    SEMICOLON(): TerminalNode;
    physical_attributes_clause(): Physical_attributes_clauseContext[];
    physical_attributes_clause(i: number): Physical_attributes_clauseContext;
    SIZE(): TerminalNode[];
    SIZE(i: number): TerminalNode;
    size_clause(): Size_clauseContext[];
    size_clause(i: number): Size_clauseContext;
    allocate_extent_clause(): Allocate_extent_clauseContext[];
    allocate_extent_clause(i: number): Allocate_extent_clauseContext;
    deallocate_unused_clause(): Deallocate_unused_clauseContext[];
    deallocate_unused_clause(i: number): Deallocate_unused_clauseContext;
    cache_or_nocache(): Cache_or_nocacheContext[];
    cache_or_nocache(i: number): Cache_or_nocacheContext;
    parallel_clause(): Parallel_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cache_or_nocacheContext extends ParserRuleContext {
    CACHE(): TerminalNode | undefined;
    NOCACHE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Database_nameContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_databaseContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    DATABASE(): TerminalNode;
    SEMICOLON(): TerminalNode;
    startup_clauses(): Startup_clausesContext | undefined;
    recovery_clauses(): Recovery_clausesContext | undefined;
    database_file_clauses(): Database_file_clausesContext | undefined;
    logfile_clauses(): Logfile_clausesContext | undefined;
    controlfile_clauses(): Controlfile_clausesContext | undefined;
    standby_database_clauses(): Standby_database_clausesContext | undefined;
    default_settings_clause(): Default_settings_clauseContext | undefined;
    instance_clauses(): Instance_clausesContext | undefined;
    security_clause(): Security_clauseContext | undefined;
    database_name(): Database_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Startup_clausesContext extends ParserRuleContext {
    MOUNT(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    STANDBY(): TerminalNode | undefined;
    CLONE(): TerminalNode | undefined;
    OPEN(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    resetlogs_or_noresetlogs(): Resetlogs_or_noresetlogsContext | undefined;
    upgrade_or_downgrade(): Upgrade_or_downgradeContext | undefined;
    ONLY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Resetlogs_or_noresetlogsContext extends ParserRuleContext {
    RESETLOGS(): TerminalNode | undefined;
    NORESETLOGS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Upgrade_or_downgradeContext extends ParserRuleContext {
    UPGRADE(): TerminalNode | undefined;
    DOWNGRADE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Recovery_clausesContext extends ParserRuleContext {
    general_recovery(): General_recoveryContext | undefined;
    managed_standby_recovery(): Managed_standby_recoveryContext | undefined;
    begin_or_end(): Begin_or_endContext | undefined;
    BACKUP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Begin_or_endContext extends ParserRuleContext {
    BEGIN(): TerminalNode | undefined;
    END(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class General_recoveryContext extends ParserRuleContext {
    RECOVER(): TerminalNode;
    CONTINUE(): TerminalNode | undefined;
    CANCEL(): TerminalNode | undefined;
    AUTOMATIC(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    CHAR_STRING(): TerminalNode[];
    CHAR_STRING(i: number): TerminalNode;
    full_database_recovery(): Full_database_recoveryContext | undefined;
    partial_database_recovery(): Partial_database_recoveryContext | undefined;
    LOGFILE(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    TEST(): TerminalNode[];
    TEST(i: number): TerminalNode;
    ALLOW(): TerminalNode[];
    ALLOW(i: number): TerminalNode;
    UNSIGNED_INTEGER(): TerminalNode[];
    UNSIGNED_INTEGER(i: number): TerminalNode;
    CORRUPTION(): TerminalNode[];
    CORRUPTION(i: number): TerminalNode;
    parallel_clause(): Parallel_clauseContext[];
    parallel_clause(i: number): Parallel_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Full_database_recoveryContext extends ParserRuleContext {
    DATABASE(): TerminalNode;
    STANDBY(): TerminalNode | undefined;
    UNTIL(): TerminalNode[];
    UNTIL(i: number): TerminalNode;
    USING(): TerminalNode[];
    USING(i: number): TerminalNode;
    BACKUP(): TerminalNode[];
    BACKUP(i: number): TerminalNode;
    CONTROLFILE(): TerminalNode[];
    CONTROLFILE(i: number): TerminalNode;
    CANCEL(): TerminalNode[];
    CANCEL(i: number): TerminalNode;
    TIME(): TerminalNode[];
    TIME(i: number): TerminalNode;
    CHAR_STRING(): TerminalNode[];
    CHAR_STRING(i: number): TerminalNode;
    CHANGE(): TerminalNode[];
    CHANGE(i: number): TerminalNode;
    UNSIGNED_INTEGER(): TerminalNode[];
    UNSIGNED_INTEGER(i: number): TerminalNode;
    CONSISTENT(): TerminalNode[];
    CONSISTENT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Partial_database_recoveryContext extends ParserRuleContext {
    TABLESPACE(): TerminalNode | undefined;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    DATAFILE(): TerminalNode | undefined;
    CHAR_STRING(): TerminalNode[];
    CHAR_STRING(i: number): TerminalNode;
    filenumber(): FilenumberContext[];
    filenumber(i: number): FilenumberContext;
    partial_database_recovery_10g(): Partial_database_recovery_10gContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Partial_database_recovery_10gContext extends ParserRuleContext {
    STANDBY(): TerminalNode;
    UNTIL(): TerminalNode;
    CONTROLFILE(): TerminalNode;
    TABLESPACE(): TerminalNode | undefined;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    DATAFILE(): TerminalNode | undefined;
    CHAR_STRING(): TerminalNode[];
    CHAR_STRING(i: number): TerminalNode;
    filenumber(): FilenumberContext[];
    filenumber(i: number): FilenumberContext;
    CONSISTENT(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Managed_standby_recoveryContext extends ParserRuleContext {
    RECOVER(): TerminalNode;
    MANAGED(): TerminalNode | undefined;
    STANDBY(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    LOGICAL(): TerminalNode | undefined;
    db_name(): Db_nameContext | undefined;
    KEEP(): TerminalNode | undefined;
    IDENTITY(): TerminalNode | undefined;
    FINISH(): TerminalNode | undefined;
    CANCEL(): TerminalNode | undefined;
    USING(): TerminalNode[];
    USING(i: number): TerminalNode;
    CURRENT(): TerminalNode[];
    CURRENT(i: number): TerminalNode;
    LOGFILE(): TerminalNode[];
    LOGFILE(i: number): TerminalNode;
    DISCONNECT(): TerminalNode[];
    DISCONNECT(i: number): TerminalNode;
    NODELAY(): TerminalNode[];
    NODELAY(i: number): TerminalNode;
    UNTIL(): TerminalNode[];
    UNTIL(i: number): TerminalNode;
    CHANGE(): TerminalNode[];
    CHANGE(i: number): TerminalNode;
    UNSIGNED_INTEGER(): TerminalNode[];
    UNSIGNED_INTEGER(i: number): TerminalNode;
    CONSISTENT(): TerminalNode[];
    CONSISTENT(i: number): TerminalNode;
    parallel_clause(): Parallel_clauseContext[];
    parallel_clause(i: number): Parallel_clauseContext;
    FROM(): TerminalNode[];
    FROM(i: number): TerminalNode;
    SESSION(): TerminalNode[];
    SESSION(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Db_nameContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Database_file_clausesContext extends ParserRuleContext {
    RENAME(): TerminalNode | undefined;
    FILE(): TerminalNode | undefined;
    filename(): FilenameContext[];
    filename(i: number): FilenameContext;
    TO(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    create_datafile_clause(): Create_datafile_clauseContext | undefined;
    alter_datafile_clause(): Alter_datafile_clauseContext | undefined;
    alter_tempfile_clause(): Alter_tempfile_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Create_datafile_clauseContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    DATAFILE(): TerminalNode;
    filename(): FilenameContext[];
    filename(i: number): FilenameContext;
    filenumber(): FilenumberContext[];
    filenumber(i: number): FilenumberContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    AS(): TerminalNode | undefined;
    NEW(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_datafile_clauseContext extends ParserRuleContext {
    DATAFILE(): TerminalNode;
    filename(): FilenameContext[];
    filename(i: number): FilenameContext;
    filenumber(): FilenumberContext[];
    filenumber(i: number): FilenumberContext;
    ONLINE(): TerminalNode | undefined;
    OFFLINE(): TerminalNode | undefined;
    RESIZE(): TerminalNode | undefined;
    size_clause(): Size_clauseContext | undefined;
    autoextend_clause(): Autoextend_clauseContext | undefined;
    END(): TerminalNode | undefined;
    BACKUP(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    FOR(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_tempfile_clauseContext extends ParserRuleContext {
    TEMPFILE(): TerminalNode;
    filename(): FilenameContext[];
    filename(i: number): FilenameContext;
    filenumber(): FilenumberContext[];
    filenumber(i: number): FilenumberContext;
    RESIZE(): TerminalNode | undefined;
    size_clause(): Size_clauseContext | undefined;
    autoextend_clause(): Autoextend_clauseContext | undefined;
    DROP(): TerminalNode | undefined;
    ONLINE(): TerminalNode | undefined;
    OFFLINE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    INCLUDING(): TerminalNode | undefined;
    DATAFILES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Logfile_clausesContext extends ParserRuleContext {
    ARCHIVELOG(): TerminalNode | undefined;
    NOARCHIVELOG(): TerminalNode | undefined;
    MANUAL(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    LOGGING(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    RENAME(): TerminalNode | undefined;
    FILE(): TerminalNode | undefined;
    filename(): FilenameContext[];
    filename(i: number): FilenameContext;
    TO(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    CLEAR(): TerminalNode | undefined;
    LOGFILE(): TerminalNode | undefined;
    logfile_descriptor(): Logfile_descriptorContext[];
    logfile_descriptor(i: number): Logfile_descriptorContext;
    UNARCHIVED(): TerminalNode | undefined;
    UNRECOVERABLE(): TerminalNode | undefined;
    DATAFILE(): TerminalNode | undefined;
    add_logfile_clauses(): Add_logfile_clausesContext | undefined;
    drop_logfile_clauses(): Drop_logfile_clausesContext | undefined;
    switch_logfile_clause(): Switch_logfile_clauseContext | undefined;
    supplemental_db_logging(): Supplemental_db_loggingContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Add_logfile_clausesContext extends ParserRuleContext {
    ADD(): TerminalNode;
    LOGFILE(): TerminalNode;
    MEMBER(): TerminalNode | undefined;
    filename(): FilenameContext[];
    filename(i: number): FilenameContext;
    TO(): TerminalNode | undefined;
    logfile_descriptor(): Logfile_descriptorContext[];
    logfile_descriptor(i: number): Logfile_descriptorContext;
    STANDBY(): TerminalNode | undefined;
    log_file_group(): Log_file_groupContext[];
    log_file_group(i: number): Log_file_groupContext;
    redo_log_file_spec(): Redo_log_file_specContext[];
    redo_log_file_spec(i: number): Redo_log_file_specContext;
    REUSE(): TerminalNode[];
    REUSE(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Log_file_groupContext extends ParserRuleContext {
    GROUP(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode[];
    UNSIGNED_INTEGER(i: number): TerminalNode;
    COMMA(): TerminalNode | undefined;
    THREAD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_logfile_clausesContext extends ParserRuleContext {
    DROP(): TerminalNode;
    LOGFILE(): TerminalNode;
    logfile_descriptor(): Logfile_descriptorContext[];
    logfile_descriptor(i: number): Logfile_descriptorContext;
    MEMBER(): TerminalNode | undefined;
    filename(): FilenameContext[];
    filename(i: number): FilenameContext;
    STANDBY(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Switch_logfile_clauseContext extends ParserRuleContext {
    SWITCH(): TerminalNode;
    ALL(): TerminalNode;
    LOGFILES(): TerminalNode;
    TO(): TerminalNode;
    BLOCKSIZE(): TerminalNode;
    UNSIGNED_INTEGER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Supplemental_db_loggingContext extends ParserRuleContext {
    add_or_drop(): Add_or_dropContext;
    SUPPLEMENTAL(): TerminalNode;
    LOG(): TerminalNode;
    DATA(): TerminalNode | undefined;
    supplemental_id_key_clause(): Supplemental_id_key_clauseContext | undefined;
    supplemental_plsql_clause(): Supplemental_plsql_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Add_or_dropContext extends ParserRuleContext {
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Supplemental_plsql_clauseContext extends ParserRuleContext {
    DATA(): TerminalNode;
    FOR(): TerminalNode;
    PROCEDURAL(): TerminalNode;
    REPLICATION(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Logfile_descriptorContext extends ParserRuleContext {
    GROUP(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    filename(): FilenameContext[];
    filename(i: number): FilenameContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Controlfile_clausesContext extends ParserRuleContext {
    CREATE(): TerminalNode | undefined;
    STANDBY(): TerminalNode | undefined;
    CONTROLFILE(): TerminalNode;
    AS(): TerminalNode | undefined;
    filename(): FilenameContext | undefined;
    REUSE(): TerminalNode | undefined;
    LOGICAL(): TerminalNode | undefined;
    PHYSICAL(): TerminalNode | undefined;
    BACKUP(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    trace_file_clause(): Trace_file_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Trace_file_clauseContext extends ParserRuleContext {
    TRACE(): TerminalNode;
    AS(): TerminalNode | undefined;
    filename(): FilenameContext | undefined;
    RESETLOGS(): TerminalNode | undefined;
    NORESETLOGS(): TerminalNode | undefined;
    REUSE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Standby_database_clausesContext extends ParserRuleContext {
    activate_standby_db_clause(): Activate_standby_db_clauseContext | undefined;
    maximize_standby_db_clause(): Maximize_standby_db_clauseContext | undefined;
    register_logfile_clause(): Register_logfile_clauseContext | undefined;
    commit_switchover_clause(): Commit_switchover_clauseContext | undefined;
    start_standby_clause(): Start_standby_clauseContext | undefined;
    stop_standby_clause(): Stop_standby_clauseContext | undefined;
    convert_database_clause(): Convert_database_clauseContext | undefined;
    parallel_clause(): Parallel_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Activate_standby_db_clauseContext extends ParserRuleContext {
    ACTIVATE(): TerminalNode;
    STANDBY(): TerminalNode;
    DATABASE(): TerminalNode;
    FINISH(): TerminalNode | undefined;
    APPLY(): TerminalNode | undefined;
    PHYSICAL(): TerminalNode | undefined;
    LOGICAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Maximize_standby_db_clauseContext extends ParserRuleContext {
    SET(): TerminalNode;
    STANDBY(): TerminalNode;
    DATABASE(): TerminalNode;
    TO(): TerminalNode;
    MAXIMIZE(): TerminalNode;
    PROTECTION(): TerminalNode | undefined;
    AVAILABILITY(): TerminalNode | undefined;
    PERFORMANCE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Register_logfile_clauseContext extends ParserRuleContext {
    REGISTER(): TerminalNode;
    LOGFILE(): TerminalNode;
    PHYSICAL(): TerminalNode | undefined;
    LOGICAL(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Commit_switchover_clauseContext extends ParserRuleContext {
    TO(): TerminalNode[];
    TO(i: number): TerminalNode;
    SWITCHOVER(): TerminalNode;
    PREPARE(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    CANCEL(): TerminalNode | undefined;
    LOGICAL(): TerminalNode | undefined;
    STANDBY(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    SHUTDOWN(): TerminalNode | undefined;
    WAIT(): TerminalNode | undefined;
    NOWAIT(): TerminalNode | undefined;
    PHYSICAL(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Start_standby_clauseContext extends ParserRuleContext {
    _scn_value: Token;
    START(): TerminalNode;
    LOGICAL(): TerminalNode;
    STANDBY(): TerminalNode;
    APPLY(): TerminalNode;
    IMMEDIATE(): TerminalNode | undefined;
    NODELAY(): TerminalNode | undefined;
    NEW(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    regular_id(): Regular_idContext | undefined;
    INITIAL(): TerminalNode | undefined;
    SKIP_(): TerminalNode | undefined;
    FAILED(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    FINISH(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Stop_standby_clauseContext extends ParserRuleContext {
    LOGICAL(): TerminalNode;
    STANDBY(): TerminalNode;
    APPLY(): TerminalNode;
    STOP(): TerminalNode | undefined;
    ABORT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Convert_database_clauseContext extends ParserRuleContext {
    CONVERT(): TerminalNode;
    TO(): TerminalNode;
    STANDBY(): TerminalNode;
    PHYSICAL(): TerminalNode | undefined;
    SNAPSHOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Default_settings_clauseContext extends ParserRuleContext {
    DEFAULT(): TerminalNode | undefined;
    EDITION(): TerminalNode | undefined;
    EQUALS_OP(): TerminalNode | undefined;
    edition_name(): Edition_nameContext | undefined;
    SET(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    BIGFILE(): TerminalNode | undefined;
    SMALLFILE(): TerminalNode | undefined;
    tablespace(): TablespaceContext | undefined;
    TEMPORARY(): TerminalNode | undefined;
    tablespace_group_name(): Tablespace_group_nameContext | undefined;
    RENAME(): TerminalNode | undefined;
    GLOBAL_NAME(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    database(): DatabaseContext | undefined;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    domain(): DomainContext[];
    domain(i: number): DomainContext;
    ENABLE(): TerminalNode | undefined;
    BLOCK(): TerminalNode | undefined;
    CHANGE(): TerminalNode | undefined;
    TRACKING(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    FILE(): TerminalNode | undefined;
    filename(): FilenameContext | undefined;
    REUSE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    flashback_mode_clause(): Flashback_mode_clauseContext | undefined;
    set_time_zone_clause(): Set_time_zone_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Set_time_zone_clauseContext extends ParserRuleContext {
    SET(): TerminalNode;
    TIMEZONE(): TerminalNode;
    EQUALS_OP(): TerminalNode;
    CHAR_STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Instance_clausesContext extends ParserRuleContext {
    enable_or_disable(): Enable_or_disableContext;
    INSTANCE(): TerminalNode;
    CHAR_STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Security_clauseContext extends ParserRuleContext {
    GUARD(): TerminalNode;
    ALL(): TerminalNode | undefined;
    STANDBY(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class DomainContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class DatabaseContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Edition_nameContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class FilenumberContext extends ParserRuleContext {
    UNSIGNED_INTEGER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class FilenameContext extends ParserRuleContext {
    CHAR_STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_tableContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    TABLE(): TerminalNode[];
    TABLE(i: number): TerminalNode;
    tableview_name(): Tableview_nameContext;
    SEMICOLON(): TerminalNode;
    alter_table_properties(): Alter_table_propertiesContext | undefined;
    constraint_clauses(): Constraint_clausesContext | undefined;
    column_clauses(): Column_clausesContext | undefined;
    move_table_clause(): Move_table_clauseContext | undefined;
    enable_disable_clause(): Enable_disable_clauseContext[];
    enable_disable_clause(i: number): Enable_disable_clauseContext;
    enable_or_disable(): Enable_or_disableContext[];
    enable_or_disable(i: number): Enable_or_disableContext;
    LOCK(): TerminalNode[];
    LOCK(i: number): TerminalNode;
    ALL(): TerminalNode[];
    ALL(i: number): TerminalNode;
    TRIGGERS(): TerminalNode[];
    TRIGGERS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_table_propertiesContext extends ParserRuleContext {
    alter_table_properties_1(): Alter_table_properties_1Context | undefined;
    RENAME(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    tableview_name(): Tableview_nameContext | undefined;
    shrink_clause(): Shrink_clauseContext | undefined;
    READ(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    REKEY(): TerminalNode | undefined;
    CHAR_STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_table_properties_1Context extends ParserRuleContext {
    physical_attributes_clause(): Physical_attributes_clauseContext[];
    physical_attributes_clause(i: number): Physical_attributes_clauseContext;
    logging_clause(): Logging_clauseContext[];
    logging_clause(i: number): Logging_clauseContext;
    table_compression(): Table_compressionContext[];
    table_compression(i: number): Table_compressionContext;
    supplemental_table_logging(): Supplemental_table_loggingContext[];
    supplemental_table_logging(i: number): Supplemental_table_loggingContext;
    allocate_extent_clause(): Allocate_extent_clauseContext[];
    allocate_extent_clause(i: number): Allocate_extent_clauseContext;
    deallocate_unused_clause(): Deallocate_unused_clauseContext[];
    deallocate_unused_clause(i: number): Deallocate_unused_clauseContext;
    RESULT_CACHE(): TerminalNode[];
    RESULT_CACHE(i: number): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    MODE(): TerminalNode[];
    MODE(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    upgrade_table_clause(): Upgrade_table_clauseContext[];
    upgrade_table_clause(i: number): Upgrade_table_clauseContext;
    records_per_block_clause(): Records_per_block_clauseContext[];
    records_per_block_clause(i: number): Records_per_block_clauseContext;
    parallel_clause(): Parallel_clauseContext[];
    parallel_clause(i: number): Parallel_clauseContext;
    row_movement_clause(): Row_movement_clauseContext[];
    row_movement_clause(i: number): Row_movement_clauseContext;
    flashback_archive_clause(): Flashback_archive_clauseContext[];
    flashback_archive_clause(i: number): Flashback_archive_clauseContext;
    alter_iot_clauses(): Alter_iot_clausesContext | undefined;
    CACHE(): TerminalNode[];
    CACHE(i: number): TerminalNode;
    NOCACHE(): TerminalNode[];
    NOCACHE(i: number): TerminalNode;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    FORCE(): TerminalNode[];
    FORCE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_iot_clausesContext extends ParserRuleContext {
    index_org_table_clause(): Index_org_table_clauseContext | undefined;
    alter_overflow_clause(): Alter_overflow_clauseContext | undefined;
    alter_mapping_table_clause(): Alter_mapping_table_clauseContext | undefined;
    COALESCE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_mapping_table_clauseContext extends ParserRuleContext {
    MAPPING(): TerminalNode;
    TABLE(): TerminalNode;
    allocate_extent_clause(): Allocate_extent_clauseContext | undefined;
    deallocate_unused_clause(): Deallocate_unused_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_overflow_clauseContext extends ParserRuleContext {
    add_overflow_clause(): Add_overflow_clauseContext | undefined;
    OVERFLOW(): TerminalNode | undefined;
    segment_attributes_clause(): Segment_attributes_clauseContext[];
    segment_attributes_clause(i: number): Segment_attributes_clauseContext;
    allocate_extent_clause(): Allocate_extent_clauseContext[];
    allocate_extent_clause(i: number): Allocate_extent_clauseContext;
    shrink_clause(): Shrink_clauseContext[];
    shrink_clause(i: number): Shrink_clauseContext;
    deallocate_unused_clause(): Deallocate_unused_clauseContext[];
    deallocate_unused_clause(i: number): Deallocate_unused_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Add_overflow_clauseContext extends ParserRuleContext {
    ADD(): TerminalNode;
    OVERFLOW(): TerminalNode;
    segment_attributes_clause(): Segment_attributes_clauseContext[];
    segment_attributes_clause(i: number): Segment_attributes_clauseContext;
    LEFT_PAREN(): TerminalNode | undefined;
    PARTITION(): TerminalNode[];
    PARTITION(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Enable_disable_clauseContext extends ParserRuleContext {
    ENABLE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    constraint_name(): Constraint_nameContext | undefined;
    using_index_clause(): Using_index_clauseContext | undefined;
    exceptions_clause(): Exceptions_clauseContext | undefined;
    CASCADE(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    VALIDATE(): TerminalNode | undefined;
    NOVALIDATE(): TerminalNode | undefined;
    KEEP(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Using_index_clauseContext extends ParserRuleContext {
    USING(): TerminalNode;
    INDEX(): TerminalNode;
    index_name(): Index_nameContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    create_index(): Create_indexContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    index_attributes(): Index_attributesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Index_attributesContext extends ParserRuleContext {
    physical_attributes_clause(): Physical_attributes_clauseContext[];
    physical_attributes_clause(i: number): Physical_attributes_clauseContext;
    logging_clause(): Logging_clauseContext[];
    logging_clause(i: number): Logging_clauseContext;
    TABLESPACE(): TerminalNode[];
    TABLESPACE(i: number): TerminalNode;
    key_compression(): Key_compressionContext[];
    key_compression(i: number): Key_compressionContext;
    sort_or_nosort(): Sort_or_nosortContext[];
    sort_or_nosort(i: number): Sort_or_nosortContext;
    REVERSE(): TerminalNode[];
    REVERSE(i: number): TerminalNode;
    visible_or_invisible(): Visible_or_invisibleContext[];
    visible_or_invisible(i: number): Visible_or_invisibleContext;
    parallel_clause(): Parallel_clauseContext[];
    parallel_clause(i: number): Parallel_clauseContext;
    tablespace(): TablespaceContext[];
    tablespace(i: number): TablespaceContext;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Sort_or_nosortContext extends ParserRuleContext {
    SORT(): TerminalNode | undefined;
    NOSORT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Exceptions_clauseContext extends ParserRuleContext {
    EXCEPTIONS(): TerminalNode;
    INTO(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Move_table_clauseContext extends ParserRuleContext {
    MOVE(): TerminalNode;
    ONLINE(): TerminalNode | undefined;
    segment_attributes_clause(): Segment_attributes_clauseContext | undefined;
    table_compression(): Table_compressionContext | undefined;
    index_org_table_clause(): Index_org_table_clauseContext | undefined;
    parallel_clause(): Parallel_clauseContext | undefined;
    lob_storage_clause(): Lob_storage_clauseContext[];
    lob_storage_clause(i: number): Lob_storage_clauseContext;
    varray_col_properties(): Varray_col_propertiesContext[];
    varray_col_properties(i: number): Varray_col_propertiesContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Index_org_table_clauseContext extends ParserRuleContext {
    mapping_table_clause(): Mapping_table_clauseContext | undefined;
    PCTTHRESHOLD(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    key_compression(): Key_compressionContext | undefined;
    index_org_overflow_clause(): Index_org_overflow_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Mapping_table_clauseContext extends ParserRuleContext {
    MAPPING(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    NOMAPPING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Key_compressionContext extends ParserRuleContext {
    NOCOMPRESS(): TerminalNode | undefined;
    COMPRESS(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Index_org_overflow_clauseContext extends ParserRuleContext {
    OVERFLOW(): TerminalNode;
    INCLUDING(): TerminalNode | undefined;
    column_name(): Column_nameContext | undefined;
    segment_attributes_clause(): Segment_attributes_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Column_clausesContext extends ParserRuleContext {
    add_modify_drop_column_clauses(): Add_modify_drop_column_clausesContext | undefined;
    rename_column_clause(): Rename_column_clauseContext | undefined;
    modify_collection_retrieval(): Modify_collection_retrievalContext | undefined;
    modify_lob_storage_clause(): Modify_lob_storage_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Modify_collection_retrievalContext extends ParserRuleContext {
    MODIFY(): TerminalNode;
    NESTED(): TerminalNode;
    TABLE(): TerminalNode;
    collection_item(): Collection_itemContext;
    RETURN(): TerminalNode;
    AS(): TerminalNode;
    LOCATOR(): TerminalNode | undefined;
    VALUE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Collection_itemContext extends ParserRuleContext {
    tableview_name(): Tableview_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Rename_column_clauseContext extends ParserRuleContext {
    RENAME(): TerminalNode;
    COLUMN(): TerminalNode;
    old_column_name(): Old_column_nameContext;
    TO(): TerminalNode;
    new_column_name(): New_column_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Old_column_nameContext extends ParserRuleContext {
    column_name(): Column_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class New_column_nameContext extends ParserRuleContext {
    column_name(): Column_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Add_modify_drop_column_clausesContext extends ParserRuleContext {
    add_column_clause(): Add_column_clauseContext[];
    add_column_clause(i: number): Add_column_clauseContext;
    modify_column_clauses(): Modify_column_clausesContext[];
    modify_column_clauses(i: number): Modify_column_clausesContext;
    drop_column_clause(): Drop_column_clauseContext[];
    drop_column_clause(i: number): Drop_column_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_column_clauseContext extends ParserRuleContext {
    SET(): TerminalNode | undefined;
    UNUSED(): TerminalNode | undefined;
    COLUMN(): TerminalNode | undefined;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    CASCADE(): TerminalNode[];
    CASCADE(i: number): TerminalNode;
    CONSTRAINTS(): TerminalNode[];
    CONSTRAINTS(i: number): TerminalNode;
    INVALIDATE(): TerminalNode[];
    INVALIDATE(i: number): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    DROP(): TerminalNode | undefined;
    CHECKPOINT(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    COLUMNS(): TerminalNode | undefined;
    CONTINUE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Modify_column_clausesContext extends ParserRuleContext {
    MODIFY(): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    modify_col_properties(): Modify_col_propertiesContext[];
    modify_col_properties(i: number): Modify_col_propertiesContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    modify_col_substitutable(): Modify_col_substitutableContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Modify_col_propertiesContext extends ParserRuleContext {
    column_name(): Column_nameContext;
    datatype(): DatatypeContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    ENCRYPT(): TerminalNode | undefined;
    encryption_spec(): Encryption_specContext | undefined;
    DECRYPT(): TerminalNode | undefined;
    inline_constraint(): Inline_constraintContext[];
    inline_constraint(i: number): Inline_constraintContext;
    lob_storage_clause(): Lob_storage_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Modify_col_substitutableContext extends ParserRuleContext {
    COLUMN(): TerminalNode;
    column_name(): Column_nameContext;
    SUBSTITUTABLE(): TerminalNode;
    AT(): TerminalNode;
    ALL(): TerminalNode;
    LEVELS(): TerminalNode;
    NOT(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Add_column_clauseContext extends ParserRuleContext {
    ADD(): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    column_properties(): Column_propertiesContext | undefined;
    column_definition(): Column_definitionContext[];
    column_definition(i: number): Column_definitionContext;
    virtual_column_definition(): Virtual_column_definitionContext[];
    virtual_column_definition(i: number): Virtual_column_definitionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Alter_varray_col_propertiesContext extends ParserRuleContext {
    MODIFY(): TerminalNode;
    VARRAY(): TerminalNode;
    varray_item(): Varray_itemContext;
    LEFT_PAREN(): TerminalNode;
    modify_lob_parameters(): Modify_lob_parametersContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Varray_col_propertiesContext extends ParserRuleContext {
    VARRAY(): TerminalNode;
    varray_item(): Varray_itemContext;
    varray_storage_clause(): Varray_storage_clauseContext | undefined;
    substitutable_column_clause(): Substitutable_column_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Varray_storage_clauseContext extends ParserRuleContext {
    STORE(): TerminalNode;
    AS(): TerminalNode;
    LOB(): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    lob_storage_parameters(): Lob_storage_parametersContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    lob_segname(): Lob_segnameContext | undefined;
    SECUREFILE(): TerminalNode | undefined;
    BASICFILE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lob_segnameContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lob_itemContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lob_storage_parametersContext extends ParserRuleContext {
    TABLESPACE(): TerminalNode | undefined;
    tablespace(): TablespaceContext | undefined;
    lob_parameters(): Lob_parametersContext | undefined;
    storage_clause(): Storage_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lob_storage_clauseContext extends ParserRuleContext {
    LOB(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    lob_item(): Lob_itemContext[];
    lob_item(i: number): Lob_itemContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    STORE(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    lob_storage_parameters(): Lob_storage_parametersContext[];
    lob_storage_parameters(i: number): Lob_storage_parametersContext;
    lob_segname(): Lob_segnameContext[];
    lob_segname(i: number): Lob_segnameContext;
    SECUREFILE(): TerminalNode[];
    SECUREFILE(i: number): TerminalNode;
    BASICFILE(): TerminalNode[];
    BASICFILE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Modify_lob_storage_clauseContext extends ParserRuleContext {
    MODIFY(): TerminalNode;
    LOB(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    lob_item(): Lob_itemContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    modify_lob_parameters(): Modify_lob_parametersContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Modify_lob_parametersContext extends ParserRuleContext {
    storage_clause(): Storage_clauseContext[];
    storage_clause(i: number): Storage_clauseContext;
    UNSIGNED_INTEGER(): TerminalNode[];
    UNSIGNED_INTEGER(i: number): TerminalNode;
    REBUILD(): TerminalNode[];
    REBUILD(i: number): TerminalNode;
    FREEPOOLS(): TerminalNode[];
    FREEPOOLS(i: number): TerminalNode;
    lob_retention_clause(): Lob_retention_clauseContext[];
    lob_retention_clause(i: number): Lob_retention_clauseContext;
    lob_deduplicate_clause(): Lob_deduplicate_clauseContext[];
    lob_deduplicate_clause(i: number): Lob_deduplicate_clauseContext;
    lob_compression_clause(): Lob_compression_clauseContext[];
    lob_compression_clause(i: number): Lob_compression_clauseContext;
    ENCRYPT(): TerminalNode[];
    ENCRYPT(i: number): TerminalNode;
    encryption_spec(): Encryption_specContext[];
    encryption_spec(i: number): Encryption_specContext;
    DECRYPT(): TerminalNode[];
    DECRYPT(i: number): TerminalNode;
    CACHE(): TerminalNode[];
    CACHE(i: number): TerminalNode;
    allocate_extent_clause(): Allocate_extent_clauseContext[];
    allocate_extent_clause(i: number): Allocate_extent_clauseContext;
    shrink_clause(): Shrink_clauseContext[];
    shrink_clause(i: number): Shrink_clauseContext;
    deallocate_unused_clause(): Deallocate_unused_clauseContext[];
    deallocate_unused_clause(i: number): Deallocate_unused_clauseContext;
    PCTVERSION(): TerminalNode[];
    PCTVERSION(i: number): TerminalNode;
    NOCACHE(): TerminalNode[];
    NOCACHE(i: number): TerminalNode;
    READS(): TerminalNode[];
    READS(i: number): TerminalNode;
    logging_clause(): Logging_clauseContext[];
    logging_clause(i: number): Logging_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lob_parametersContext extends ParserRuleContext {
    STORAGE(): TerminalNode[];
    STORAGE(i: number): TerminalNode;
    IN(): TerminalNode[];
    IN(i: number): TerminalNode;
    ROW(): TerminalNode[];
    ROW(i: number): TerminalNode;
    CHUNK(): TerminalNode[];
    CHUNK(i: number): TerminalNode;
    UNSIGNED_INTEGER(): TerminalNode[];
    UNSIGNED_INTEGER(i: number): TerminalNode;
    PCTVERSION(): TerminalNode[];
    PCTVERSION(i: number): TerminalNode;
    FREEPOOLS(): TerminalNode[];
    FREEPOOLS(i: number): TerminalNode;
    lob_retention_clause(): Lob_retention_clauseContext[];
    lob_retention_clause(i: number): Lob_retention_clauseContext;
    lob_deduplicate_clause(): Lob_deduplicate_clauseContext[];
    lob_deduplicate_clause(i: number): Lob_deduplicate_clauseContext;
    lob_compression_clause(): Lob_compression_clauseContext[];
    lob_compression_clause(i: number): Lob_compression_clauseContext;
    ENCRYPT(): TerminalNode[];
    ENCRYPT(i: number): TerminalNode;
    encryption_spec(): Encryption_specContext[];
    encryption_spec(i: number): Encryption_specContext;
    DECRYPT(): TerminalNode[];
    DECRYPT(i: number): TerminalNode;
    ENABLE(): TerminalNode[];
    ENABLE(i: number): TerminalNode;
    DISABLE(): TerminalNode[];
    DISABLE(i: number): TerminalNode;
    CACHE(): TerminalNode[];
    CACHE(i: number): TerminalNode;
    NOCACHE(): TerminalNode[];
    NOCACHE(i: number): TerminalNode;
    READS(): TerminalNode[];
    READS(i: number): TerminalNode;
    logging_clause(): Logging_clauseContext[];
    logging_clause(i: number): Logging_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lob_deduplicate_clauseContext extends ParserRuleContext {
    DEDUPLICATE(): TerminalNode | undefined;
    KEEP_DUPLICATES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lob_compression_clauseContext extends ParserRuleContext {
    NOCOMPRESS(): TerminalNode | undefined;
    COMPRESS(): TerminalNode | undefined;
    HIGH(): TerminalNode | undefined;
    MEDIUM(): TerminalNode | undefined;
    LOW(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lob_retention_clauseContext extends ParserRuleContext {
    RETENTION(): TerminalNode;
    MAX(): TerminalNode | undefined;
    MIN(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    AUTO(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Encryption_specContext extends ParserRuleContext {
    USING(): TerminalNode | undefined;
    CHAR_STRING(): TerminalNode[];
    CHAR_STRING(i: number): TerminalNode;
    IDENTIFIED(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    REGULAR_ID(): TerminalNode | undefined;
    SALT(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class TablespaceContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Varray_itemContext extends ParserRuleContext {
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Column_propertiesContext extends ParserRuleContext {
    object_type_col_properties(): Object_type_col_propertiesContext | undefined;
    nested_table_col_properties(): Nested_table_col_propertiesContext | undefined;
    varray_col_properties(): Varray_col_propertiesContext | undefined;
    lob_storage_clause(): Lob_storage_clauseContext | undefined;
    xmltype_column_properties(): Xmltype_column_propertiesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Period_definitionContext extends ParserRuleContext {
    PERIOD(): TerminalNode;
    FOR(): TerminalNode;
    column_name(): Column_nameContext;
    LEFT_PAREN(): TerminalNode | undefined;
    start_time_column(): Start_time_columnContext | undefined;
    COMMA(): TerminalNode | undefined;
    end_time_column(): End_time_columnContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Start_time_columnContext extends ParserRuleContext {
    column_name(): Column_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class End_time_columnContext extends ParserRuleContext {
    column_name(): Column_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Column_definitionContext extends ParserRuleContext {
    column_name(): Column_nameContext;
    datatype(): DatatypeContext | undefined;
    type_name(): Type_nameContext | undefined;
    inline_ref_constraint(): Inline_ref_constraintContext | undefined;
    SORT(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    ENCRYPT(): TerminalNode | undefined;
    inline_constraint(): Inline_constraintContext[];
    inline_constraint(i: number): Inline_constraintContext;
    USING(): TerminalNode | undefined;
    CHAR_STRING(): TerminalNode[];
    CHAR_STRING(i: number): TerminalNode;
    IDENTIFIED(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    regular_id(): Regular_idContext | undefined;
    SALT(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Virtual_column_definitionContext extends ParserRuleContext {
    column_name(): Column_nameContext;
    datatype(): DatatypeContext | undefined;
    autogenerated_sequence_definition(): Autogenerated_sequence_definitionContext | undefined;
    VIRTUAL(): TerminalNode | undefined;
    inline_constraint(): Inline_constraintContext[];
    inline_constraint(i: number): Inline_constraintContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Autogenerated_sequence_definitionContext extends ParserRuleContext {
    GENERATED(): TerminalNode;
    AS(): TerminalNode;
    IDENTITY(): TerminalNode;
    ALWAYS(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    NULL_(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Out_of_line_part_storageContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    partition_name(): Partition_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Nested_table_col_propertiesContext extends ParserRuleContext {
    NESTED(): TerminalNode;
    TABLE(): TerminalNode;
    STORE(): TerminalNode;
    AS(): TerminalNode[];
    AS(i: number): TerminalNode;
    tableview_name(): Tableview_nameContext;
    nested_item(): Nested_itemContext | undefined;
    COLUMN_VALUE(): TerminalNode | undefined;
    substitutable_column_clause(): Substitutable_column_clauseContext | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    RETURN(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    LOCATOR(): TerminalNode | undefined;
    VALUE(): TerminalNode | undefined;
    object_properties(): Object_propertiesContext[];
    object_properties(i: number): Object_propertiesContext;
    physical_properties(): Physical_propertiesContext[];
    physical_properties(i: number): Physical_propertiesContext;
    column_properties(): Column_propertiesContext[];
    column_properties(i: number): Column_propertiesContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Nested_itemContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Substitutable_column_clauseContext extends ParserRuleContext {
    IS(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    type_name(): Type_nameContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    ELEMENT(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    SUBSTITUTABLE(): TerminalNode | undefined;
    AT(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    LEVELS(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Partition_nameContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Supplemental_logging_propsContext extends ParserRuleContext {
    SUPPLEMENTAL(): TerminalNode;
    LOG(): TerminalNode;
    supplemental_log_grp_clause(): Supplemental_log_grp_clauseContext | undefined;
    supplemental_id_key_clause(): Supplemental_id_key_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Column_or_attributeContext extends ParserRuleContext {
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Object_type_col_propertiesContext extends ParserRuleContext {
    _column: Regular_idContext;
    COLUMN(): TerminalNode;
    substitutable_column_clause(): Substitutable_column_clauseContext;
    regular_id(): Regular_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Constraint_clausesContext extends ParserRuleContext {
    ADD(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    out_of_line_ref_constraint(): Out_of_line_ref_constraintContext | undefined;
    out_of_line_constraint(): Out_of_line_constraintContext[];
    out_of_line_constraint(i: number): Out_of_line_constraintContext;
    MODIFY(): TerminalNode | undefined;
    constraint_state(): Constraint_stateContext | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    constraint_name(): Constraint_nameContext | undefined;
    PRIMARY(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    CASCADE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RENAME(): TerminalNode | undefined;
    old_constraint_name(): Old_constraint_nameContext | undefined;
    TO(): TerminalNode | undefined;
    new_constraint_name(): New_constraint_nameContext | undefined;
    drop_constraint_clause(): Drop_constraint_clauseContext[];
    drop_constraint_clause(i: number): Drop_constraint_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Old_constraint_nameContext extends ParserRuleContext {
    constraint_name(): Constraint_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class New_constraint_nameContext extends ParserRuleContext {
    constraint_name(): Constraint_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_constraint_clauseContext extends ParserRuleContext {
    DROP(): TerminalNode;
    drop_primary_key_or_unique_or_generic_clause(): Drop_primary_key_or_unique_or_generic_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_primary_key_or_unique_or_generic_clauseContext extends ParserRuleContext {
    PRIMARY(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    CASCADE(): TerminalNode | undefined;
    KEEP(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    CONSTRAINT(): TerminalNode | undefined;
    constraint_name(): Constraint_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Add_constraintContext extends ParserRuleContext {
    ADD(): TerminalNode;
    add_constraint_clause(): Add_constraint_clauseContext[];
    add_constraint_clause(i: number): Add_constraint_clauseContext;
    CONSTRAINT(): TerminalNode[];
    CONSTRAINT(i: number): TerminalNode;
    constraint_name(): Constraint_nameContext[];
    constraint_name(i: number): Constraint_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Add_constraint_clauseContext extends ParserRuleContext {
    primary_key_clause(): Primary_key_clauseContext | undefined;
    foreign_key_clause(): Foreign_key_clauseContext | undefined;
    unique_key_clause(): Unique_key_clauseContext | undefined;
    check_constraint(): Check_constraintContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Check_constraintContext extends ParserRuleContext {
    CHECK(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    condition(): ConditionContext;
    RIGHT_PAREN(): TerminalNode;
    DISABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Drop_constraintContext extends ParserRuleContext {
    DROP(): TerminalNode;
    CONSTRAINT(): TerminalNode;
    constraint_name(): Constraint_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Enable_constraintContext extends ParserRuleContext {
    ENABLE(): TerminalNode;
    CONSTRAINT(): TerminalNode;
    constraint_name(): Constraint_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Disable_constraintContext extends ParserRuleContext {
    DISABLE(): TerminalNode;
    CONSTRAINT(): TerminalNode;
    constraint_name(): Constraint_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Foreign_key_clauseContext extends ParserRuleContext {
    FOREIGN(): TerminalNode;
    KEY(): TerminalNode;
    paren_column_list(): Paren_column_listContext;
    references_clause(): References_clauseContext;
    on_delete_clause(): On_delete_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class References_clauseContext extends ParserRuleContext {
    REFERENCES(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    paren_column_list(): Paren_column_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class On_delete_clauseContext extends ParserRuleContext {
    ON(): TerminalNode;
    DELETE(): TerminalNode;
    CASCADE(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    NULL_(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Unique_key_clauseContext extends ParserRuleContext {
    UNIQUE(): TerminalNode;
    paren_column_list(): Paren_column_listContext;
    using_index_clause(): Using_index_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Primary_key_clauseContext extends ParserRuleContext {
    PRIMARY(): TerminalNode;
    KEY(): TerminalNode;
    paren_column_list(): Paren_column_listContext;
    using_index_clause(): Using_index_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Anonymous_blockContext extends ParserRuleContext {
    BEGIN(): TerminalNode;
    seq_of_statements(): Seq_of_statementsContext;
    END(): TerminalNode;
    SEMICOLON(): TerminalNode;
    DECLARE(): TerminalNode | undefined;
    seq_of_declare_specs(): Seq_of_declare_specsContext | undefined;
    EXCEPTION(): TerminalNode | undefined;
    exception_handler(): Exception_handlerContext[];
    exception_handler(i: number): Exception_handlerContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Invoker_rights_clauseContext extends ParserRuleContext {
    AUTHID(): TerminalNode;
    CURRENT_USER(): TerminalNode | undefined;
    DEFINER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Call_specContext extends ParserRuleContext {
    LANGUAGE(): TerminalNode;
    java_spec(): Java_specContext | undefined;
    c_spec(): C_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Java_specContext extends ParserRuleContext {
    JAVA(): TerminalNode;
    NAME(): TerminalNode;
    CHAR_STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class C_specContext extends ParserRuleContext {
    C_LETTER(): TerminalNode;
    LIBRARY(): TerminalNode;
    identifier(): IdentifierContext;
    NAME(): TerminalNode | undefined;
    CHAR_STRING(): TerminalNode | undefined;
    c_agent_in_clause(): C_agent_in_clauseContext | undefined;
    WITH(): TerminalNode | undefined;
    CONTEXT(): TerminalNode | undefined;
    c_parameters_clause(): C_parameters_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class C_agent_in_clauseContext extends ParserRuleContext {
    AGENT(): TerminalNode;
    IN(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    expressions(): ExpressionsContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class C_parameters_clauseContext extends ParserRuleContext {
    PARAMETERS(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    expressions(): ExpressionsContext | undefined;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class ParameterContext extends ParserRuleContext {
    parameter_name(): Parameter_nameContext;
    type_spec(): Type_specContext | undefined;
    default_value_part(): Default_value_partContext | undefined;
    IN(): TerminalNode[];
    IN(i: number): TerminalNode;
    OUT(): TerminalNode[];
    OUT(i: number): TerminalNode;
    INOUT(): TerminalNode[];
    INOUT(i: number): TerminalNode;
    NOCOPY(): TerminalNode[];
    NOCOPY(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Default_value_partContext extends ParserRuleContext {
    expression(): ExpressionContext;
    ASSIGN_OP(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Seq_of_declare_specsContext extends ParserRuleContext {
    declare_spec(): Declare_specContext[];
    declare_spec(i: number): Declare_specContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Declare_specContext extends ParserRuleContext {
    pragma_declaration(): Pragma_declarationContext | undefined;
    variable_declaration(): Variable_declarationContext | undefined;
    subtype_declaration(): Subtype_declarationContext | undefined;
    cursor_declaration(): Cursor_declarationContext | undefined;
    exception_declaration(): Exception_declarationContext | undefined;
    type_declaration(): Type_declarationContext | undefined;
    procedure_spec(): Procedure_specContext | undefined;
    function_spec(): Function_specContext | undefined;
    procedure_body(): Procedure_bodyContext | undefined;
    function_body(): Function_bodyContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Variable_declarationContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    type_spec(): Type_specContext;
    SEMICOLON(): TerminalNode;
    CONSTANT(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    NULL_(): TerminalNode | undefined;
    default_value_part(): Default_value_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subtype_declarationContext extends ParserRuleContext {
    SUBTYPE(): TerminalNode;
    identifier(): IdentifierContext;
    IS(): TerminalNode;
    type_spec(): Type_specContext;
    SEMICOLON(): TerminalNode;
    RANGE(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    DOUBLE_PERIOD(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    NULL_(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cursor_declarationContext extends ParserRuleContext {
    CURSOR(): TerminalNode;
    identifier(): IdentifierContext;
    SEMICOLON(): TerminalNode;
    LEFT_PAREN(): TerminalNode | undefined;
    parameter_spec(): Parameter_specContext[];
    parameter_spec(i: number): Parameter_specContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    RETURN(): TerminalNode | undefined;
    type_spec(): Type_specContext | undefined;
    IS(): TerminalNode | undefined;
    select_statement(): Select_statementContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Parameter_specContext extends ParserRuleContext {
    parameter_name(): Parameter_nameContext;
    type_spec(): Type_specContext | undefined;
    default_value_part(): Default_value_partContext | undefined;
    IN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Exception_declarationContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    EXCEPTION(): TerminalNode;
    SEMICOLON(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Pragma_declarationContext extends ParserRuleContext {
    _id1: IdentifierContext;
    PRAGMA(): TerminalNode;
    SEMICOLON(): TerminalNode;
    SERIALLY_REUSABLE(): TerminalNode | undefined;
    AUTONOMOUS_TRANSACTION(): TerminalNode | undefined;
    EXCEPTION_INIT(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    exception_name(): Exception_nameContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    numeric_negative(): Numeric_negativeContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    INLINE(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    RESTRICT_REFERENCES(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Record_type_defContext extends ParserRuleContext {
    RECORD(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    field_spec(): Field_specContext[];
    field_spec(i: number): Field_specContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Field_specContext extends ParserRuleContext {
    column_name(): Column_nameContext;
    type_spec(): Type_specContext | undefined;
    NOT(): TerminalNode | undefined;
    NULL_(): TerminalNode | undefined;
    default_value_part(): Default_value_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Ref_cursor_type_defContext extends ParserRuleContext {
    REF(): TerminalNode;
    CURSOR(): TerminalNode;
    RETURN(): TerminalNode | undefined;
    type_spec(): Type_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Type_declarationContext extends ParserRuleContext {
    TYPE(): TerminalNode;
    identifier(): IdentifierContext;
    IS(): TerminalNode;
    SEMICOLON(): TerminalNode;
    table_type_def(): Table_type_defContext | undefined;
    varray_type_def(): Varray_type_defContext | undefined;
    record_type_def(): Record_type_defContext | undefined;
    ref_cursor_type_def(): Ref_cursor_type_defContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_type_defContext extends ParserRuleContext {
    TABLE(): TerminalNode;
    OF(): TerminalNode;
    type_spec(): Type_specContext;
    table_indexed_by_part(): Table_indexed_by_partContext | undefined;
    NOT(): TerminalNode | undefined;
    NULL_(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_indexed_by_partContext extends ParserRuleContext {
    _idx1: Token;
    _idx2: Token;
    BY(): TerminalNode;
    type_spec(): Type_specContext;
    INDEXED(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Varray_type_defContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    expression(): ExpressionContext;
    RIGHT_PAREN(): TerminalNode;
    OF(): TerminalNode;
    type_spec(): Type_specContext;
    VARRAY(): TerminalNode | undefined;
    VARYING(): TerminalNode | undefined;
    ARRAY(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    NULL_(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Seq_of_statementsContext extends ParserRuleContext {
    statement(): StatementContext[];
    statement(i: number): StatementContext;
    label_declaration(): Label_declarationContext[];
    label_declaration(i: number): Label_declarationContext;
    SEMICOLON(): TerminalNode[];
    SEMICOLON(i: number): TerminalNode;
    EOF(): TerminalNode[];
    EOF(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Label_declarationContext extends ParserRuleContext {
    _ltp1: Token;
    LESS_THAN_OP(): TerminalNode[];
    LESS_THAN_OP(i: number): TerminalNode;
    label_name(): Label_nameContext;
    GREATER_THAN_OP(): TerminalNode[];
    GREATER_THAN_OP(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class StatementContext extends ParserRuleContext {
    body(): BodyContext | undefined;
    block(): BlockContext | undefined;
    assignment_statement(): Assignment_statementContext | undefined;
    continue_statement(): Continue_statementContext | undefined;
    exit_statement(): Exit_statementContext | undefined;
    goto_statement(): Goto_statementContext | undefined;
    if_statement(): If_statementContext | undefined;
    loop_statement(): Loop_statementContext | undefined;
    forall_statement(): Forall_statementContext | undefined;
    null_statement(): Null_statementContext | undefined;
    raise_statement(): Raise_statementContext | undefined;
    return_statement(): Return_statementContext | undefined;
    case_statement(): Case_statementContext | undefined;
    sql_statement(): Sql_statementContext | undefined;
    function_call(): Function_callContext | undefined;
    pipe_row_statement(): Pipe_row_statementContext | undefined;
    procedure_call(): Procedure_callContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Swallow_to_semiContext extends ParserRuleContext {
    SEMICOLON(): TerminalNode[];
    SEMICOLON(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Assignment_statementContext extends ParserRuleContext {
    ASSIGN_OP(): TerminalNode;
    expression(): ExpressionContext;
    general_element(): General_elementContext | undefined;
    bind_variable(): Bind_variableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Continue_statementContext extends ParserRuleContext {
    CONTINUE(): TerminalNode;
    label_name(): Label_nameContext | undefined;
    WHEN(): TerminalNode | undefined;
    condition(): ConditionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Exit_statementContext extends ParserRuleContext {
    EXIT(): TerminalNode;
    label_name(): Label_nameContext | undefined;
    WHEN(): TerminalNode | undefined;
    condition(): ConditionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Goto_statementContext extends ParserRuleContext {
    GOTO(): TerminalNode;
    label_name(): Label_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class If_statementContext extends ParserRuleContext {
    IF(): TerminalNode[];
    IF(i: number): TerminalNode;
    condition(): ConditionContext;
    THEN(): TerminalNode;
    seq_of_statements(): Seq_of_statementsContext;
    END(): TerminalNode;
    elsif_part(): Elsif_partContext[];
    elsif_part(i: number): Elsif_partContext;
    else_part(): Else_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Elsif_partContext extends ParserRuleContext {
    ELSIF(): TerminalNode;
    condition(): ConditionContext;
    THEN(): TerminalNode;
    seq_of_statements(): Seq_of_statementsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Else_partContext extends ParserRuleContext {
    ELSE(): TerminalNode;
    seq_of_statements(): Seq_of_statementsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Loop_statementContext extends ParserRuleContext {
    LOOP(): TerminalNode[];
    LOOP(i: number): TerminalNode;
    seq_of_statements(): Seq_of_statementsContext;
    END(): TerminalNode;
    label_declaration(): Label_declarationContext | undefined;
    WHILE(): TerminalNode | undefined;
    condition(): ConditionContext | undefined;
    FOR(): TerminalNode | undefined;
    cursor_loop_param(): Cursor_loop_paramContext | undefined;
    label_name(): Label_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cursor_loop_paramContext extends ParserRuleContext {
    _range_separator: Token;
    index_name(): Index_nameContext | undefined;
    IN(): TerminalNode;
    lower_bound(): Lower_boundContext | undefined;
    upper_bound(): Upper_boundContext | undefined;
    DOUBLE_PERIOD(): TerminalNode | undefined;
    REVERSE(): TerminalNode | undefined;
    record_name(): Record_nameContext | undefined;
    cursor_name(): Cursor_nameContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    select_statement(): Select_statementContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    expressions(): ExpressionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Forall_statementContext extends ParserRuleContext {
    FORALL(): TerminalNode;
    index_name(): Index_nameContext;
    IN(): TerminalNode;
    bounds_clause(): Bounds_clauseContext;
    sql_statement(): Sql_statementContext;
    SAVE(): TerminalNode | undefined;
    EXCEPTIONS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Bounds_clauseContext extends ParserRuleContext {
    lower_bound(): Lower_boundContext | undefined;
    DOUBLE_PERIOD(): TerminalNode | undefined;
    upper_bound(): Upper_boundContext | undefined;
    INDICES(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    collection_name(): Collection_nameContext | undefined;
    between_bound(): Between_boundContext | undefined;
    VALUES(): TerminalNode | undefined;
    index_name(): Index_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Between_boundContext extends ParserRuleContext {
    BETWEEN(): TerminalNode;
    lower_bound(): Lower_boundContext;
    AND(): TerminalNode;
    upper_bound(): Upper_boundContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lower_boundContext extends ParserRuleContext {
    concatenation(): ConcatenationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Upper_boundContext extends ParserRuleContext {
    concatenation(): ConcatenationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Null_statementContext extends ParserRuleContext {
    NULL_(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Raise_statementContext extends ParserRuleContext {
    RAISE(): TerminalNode;
    exception_name(): Exception_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Return_statementContext extends ParserRuleContext {
    RETURN(): TerminalNode;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Function_callContext extends ParserRuleContext {
    routine_name(): Routine_nameContext;
    CALL(): TerminalNode | undefined;
    function_argument(): Function_argumentContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Procedure_callContext extends ParserRuleContext {
    routine_name(): Routine_nameContext;
    function_argument(): Function_argumentContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Pipe_row_statementContext extends ParserRuleContext {
    PIPE(): TerminalNode;
    ROW(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    expression(): ExpressionContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class BodyContext extends ParserRuleContext {
    BEGIN(): TerminalNode;
    seq_of_statements(): Seq_of_statementsContext;
    END(): TerminalNode;
    EXCEPTION(): TerminalNode | undefined;
    label_name(): Label_nameContext | undefined;
    exception_handler(): Exception_handlerContext[];
    exception_handler(i: number): Exception_handlerContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Exception_handlerContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    exception_name(): Exception_nameContext[];
    exception_name(i: number): Exception_nameContext;
    THEN(): TerminalNode;
    seq_of_statements(): Seq_of_statementsContext;
    OR(): TerminalNode[];
    OR(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Trigger_blockContext extends ParserRuleContext {
    body(): BodyContext;
    DECLARE(): TerminalNode | undefined;
    declare_spec(): Declare_specContext[];
    declare_spec(i: number): Declare_specContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class BlockContext extends ParserRuleContext {
    body(): BodyContext;
    DECLARE(): TerminalNode | undefined;
    declare_spec(): Declare_specContext[];
    declare_spec(i: number): Declare_specContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Sql_statementContext extends ParserRuleContext {
    execute_immediate(): Execute_immediateContext | undefined;
    data_manipulation_language_statements(): Data_manipulation_language_statementsContext | undefined;
    cursor_manipulation_statements(): Cursor_manipulation_statementsContext | undefined;
    transaction_control_statements(): Transaction_control_statementsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Execute_immediateContext extends ParserRuleContext {
    EXECUTE(): TerminalNode;
    IMMEDIATE(): TerminalNode;
    expression(): ExpressionContext;
    into_clause(): Into_clauseContext | undefined;
    using_clause(): Using_clauseContext | undefined;
    dynamic_returning_clause(): Dynamic_returning_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Dynamic_returning_clauseContext extends ParserRuleContext {
    into_clause(): Into_clauseContext;
    RETURNING(): TerminalNode | undefined;
    RETURN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Data_manipulation_language_statementsContext extends ParserRuleContext {
    merge_statement(): Merge_statementContext | undefined;
    lock_table_statement(): Lock_table_statementContext | undefined;
    select_statement(): Select_statementContext | undefined;
    update_statement(): Update_statementContext | undefined;
    delete_statement(): Delete_statementContext | undefined;
    insert_statement(): Insert_statementContext | undefined;
    explain_statement(): Explain_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cursor_manipulation_statementsContext extends ParserRuleContext {
    close_statement(): Close_statementContext | undefined;
    open_statement(): Open_statementContext | undefined;
    fetch_statement(): Fetch_statementContext | undefined;
    open_for_statement(): Open_for_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Close_statementContext extends ParserRuleContext {
    CLOSE(): TerminalNode;
    cursor_name(): Cursor_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Open_statementContext extends ParserRuleContext {
    OPEN(): TerminalNode;
    cursor_name(): Cursor_nameContext;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    expressions(): ExpressionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Fetch_statementContext extends ParserRuleContext {
    _it1: Token;
    FETCH(): TerminalNode;
    cursor_name(): Cursor_nameContext;
    variable_name(): Variable_nameContext[];
    variable_name(i: number): Variable_nameContext;
    BULK(): TerminalNode | undefined;
    COLLECT(): TerminalNode | undefined;
    INTO(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    LIMIT(): TerminalNode | undefined;
    numeric(): NumericContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Open_for_statementContext extends ParserRuleContext {
    OPEN(): TerminalNode;
    variable_name(): Variable_nameContext;
    FOR(): TerminalNode;
    select_statement(): Select_statementContext | undefined;
    expression(): ExpressionContext | undefined;
    using_clause(): Using_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Transaction_control_statementsContext extends ParserRuleContext {
    set_transaction_command(): Set_transaction_commandContext | undefined;
    set_constraint_command(): Set_constraint_commandContext | undefined;
    commit_statement(): Commit_statementContext | undefined;
    rollback_statement(): Rollback_statementContext | undefined;
    savepoint_statement(): Savepoint_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Set_transaction_commandContext extends ParserRuleContext {
    SET(): TerminalNode;
    TRANSACTION(): TerminalNode;
    READ(): TerminalNode | undefined;
    ISOLATION(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    USE(): TerminalNode | undefined;
    ROLLBACK(): TerminalNode | undefined;
    SEGMENT(): TerminalNode | undefined;
    rollback_segment_name(): Rollback_segment_nameContext | undefined;
    NAME(): TerminalNode | undefined;
    quoted_string(): Quoted_stringContext | undefined;
    ONLY(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    SERIALIZABLE(): TerminalNode | undefined;
    COMMITTED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Set_constraint_commandContext extends ParserRuleContext {
    SET(): TerminalNode;
    CONSTRAINT(): TerminalNode | undefined;
    CONSTRAINTS(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    DEFERRED(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constraint_name(): Constraint_nameContext[];
    constraint_name(i: number): Constraint_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Commit_statementContext extends ParserRuleContext {
    COMMIT(): TerminalNode;
    WORK(): TerminalNode | undefined;
    COMMENT(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    FORCE(): TerminalNode | undefined;
    write_clause(): Write_clauseContext | undefined;
    CORRUPT_XID(): TerminalNode | undefined;
    CORRUPT_XID_ALL(): TerminalNode | undefined;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Write_clauseContext extends ParserRuleContext {
    WRITE(): TerminalNode;
    WAIT(): TerminalNode | undefined;
    NOWAIT(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    BATCH(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Rollback_statementContext extends ParserRuleContext {
    ROLLBACK(): TerminalNode;
    WORK(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    savepoint_name(): Savepoint_nameContext | undefined;
    FORCE(): TerminalNode | undefined;
    quoted_string(): Quoted_stringContext | undefined;
    SAVEPOINT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Savepoint_statementContext extends ParserRuleContext {
    SAVEPOINT(): TerminalNode;
    savepoint_name(): Savepoint_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Explain_statementContext extends ParserRuleContext {
    EXPLAIN(): TerminalNode;
    PLAN(): TerminalNode;
    FOR(): TerminalNode;
    select_statement(): Select_statementContext | undefined;
    update_statement(): Update_statementContext | undefined;
    delete_statement(): Delete_statementContext | undefined;
    insert_statement(): Insert_statementContext | undefined;
    merge_statement(): Merge_statementContext | undefined;
    SET(): TerminalNode | undefined;
    STATEMENT_ID(): TerminalNode | undefined;
    EQUALS_OP(): TerminalNode | undefined;
    quoted_string(): Quoted_stringContext | undefined;
    INTO(): TerminalNode | undefined;
    tableview_name(): Tableview_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Select_only_statementContext extends ParserRuleContext {
    subquery(): SubqueryContext;
    subquery_factoring_clause(): Subquery_factoring_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Select_statementContext extends ParserRuleContext {
    select_only_statement(): Select_only_statementContext;
    for_update_clause(): For_update_clauseContext[];
    for_update_clause(i: number): For_update_clauseContext;
    order_by_clause(): Order_by_clauseContext[];
    order_by_clause(i: number): Order_by_clauseContext;
    offset_clause(): Offset_clauseContext[];
    offset_clause(i: number): Offset_clauseContext;
    fetch_clause(): Fetch_clauseContext[];
    fetch_clause(i: number): Fetch_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subquery_factoring_clauseContext extends ParserRuleContext {
    WITH(): TerminalNode;
    factoring_element(): Factoring_elementContext[];
    factoring_element(i: number): Factoring_elementContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Factoring_elementContext extends ParserRuleContext {
    query_name(): Query_nameContext;
    AS(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    subquery(): SubqueryContext;
    RIGHT_PAREN(): TerminalNode;
    paren_column_list(): Paren_column_listContext | undefined;
    order_by_clause(): Order_by_clauseContext | undefined;
    search_clause(): Search_clauseContext | undefined;
    cycle_clause(): Cycle_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Search_clauseContext extends ParserRuleContext {
    SEARCH(): TerminalNode;
    FIRST(): TerminalNode[];
    FIRST(i: number): TerminalNode;
    BY(): TerminalNode;
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    SET(): TerminalNode;
    DEPTH(): TerminalNode | undefined;
    BREADTH(): TerminalNode | undefined;
    ASC(): TerminalNode[];
    ASC(i: number): TerminalNode;
    DESC(): TerminalNode[];
    DESC(i: number): TerminalNode;
    NULLS(): TerminalNode[];
    NULLS(i: number): TerminalNode;
    LAST(): TerminalNode[];
    LAST(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cycle_clauseContext extends ParserRuleContext {
    CYCLE(): TerminalNode;
    column_list(): Column_listContext;
    SET(): TerminalNode;
    column_name(): Column_nameContext;
    TO(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    DEFAULT(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class SubqueryContext extends ParserRuleContext {
    subquery_basic_elements(): Subquery_basic_elementsContext;
    subquery_operation_part(): Subquery_operation_partContext[];
    subquery_operation_part(i: number): Subquery_operation_partContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subquery_basic_elementsContext extends ParserRuleContext {
    query_block(): Query_blockContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    subquery(): SubqueryContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subquery_operation_partContext extends ParserRuleContext {
    subquery_basic_elements(): Subquery_basic_elementsContext;
    UNION(): TerminalNode | undefined;
    INTERSECT(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Query_blockContext extends ParserRuleContext {
    SELECT(): TerminalNode;
    selected_list(): Selected_listContext;
    from_clause(): From_clauseContext;
    into_clause(): Into_clauseContext | undefined;
    where_clause(): Where_clauseContext | undefined;
    hierarchical_query_clause(): Hierarchical_query_clauseContext | undefined;
    group_by_clause(): Group_by_clauseContext | undefined;
    model_clause(): Model_clauseContext | undefined;
    order_by_clause(): Order_by_clauseContext | undefined;
    fetch_clause(): Fetch_clauseContext | undefined;
    DISTINCT(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Selected_listContext extends ParserRuleContext {
    ASTERISK(): TerminalNode | undefined;
    select_list_elements(): Select_list_elementsContext[];
    select_list_elements(i: number): Select_list_elementsContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class From_clauseContext extends ParserRuleContext {
    FROM(): TerminalNode;
    table_ref_list(): Table_ref_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Select_list_elementsContext extends ParserRuleContext {
    tableview_name(): Tableview_nameContext | undefined;
    PERIOD(): TerminalNode | undefined;
    ASTERISK(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    column_alias(): Column_aliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_ref_listContext extends ParserRuleContext {
    table_ref(): Table_refContext[];
    table_ref(i: number): Table_refContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_refContext extends ParserRuleContext {
    table_ref_aux(): Table_ref_auxContext;
    join_clause(): Join_clauseContext[];
    join_clause(i: number): Join_clauseContext;
    pivot_clause(): Pivot_clauseContext | undefined;
    unpivot_clause(): Unpivot_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_ref_auxContext extends ParserRuleContext {
    table_ref_aux_internal(): Table_ref_aux_internalContext;
    flashback_query_clause(): Flashback_query_clauseContext[];
    flashback_query_clause(i: number): Flashback_query_clauseContext;
    table_alias(): Table_aliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_ref_aux_internalContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: Table_ref_aux_internalContext): void;
}
export declare class Table_ref_aux_internal_oneContext extends Table_ref_aux_internalContext {
    dml_table_expression_clause(): Dml_table_expression_clauseContext;
    pivot_clause(): Pivot_clauseContext | undefined;
    unpivot_clause(): Unpivot_clauseContext | undefined;
    constructor(ctx: Table_ref_aux_internalContext);
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_ref_aux_internal_twoContext extends Table_ref_aux_internalContext {
    LEFT_PAREN(): TerminalNode;
    table_ref(): Table_refContext;
    RIGHT_PAREN(): TerminalNode;
    subquery_operation_part(): Subquery_operation_partContext[];
    subquery_operation_part(i: number): Subquery_operation_partContext;
    pivot_clause(): Pivot_clauseContext | undefined;
    unpivot_clause(): Unpivot_clauseContext | undefined;
    constructor(ctx: Table_ref_aux_internalContext);
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_ref_aux_internal_threeContext extends Table_ref_aux_internalContext {
    ONLY(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    dml_table_expression_clause(): Dml_table_expression_clauseContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(ctx: Table_ref_aux_internalContext);
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Join_clauseContext extends ParserRuleContext {
    JOIN(): TerminalNode;
    table_ref_aux(): Table_ref_auxContext;
    query_partition_clause(): Query_partition_clauseContext[];
    query_partition_clause(i: number): Query_partition_clauseContext;
    INNER(): TerminalNode | undefined;
    outer_join_type(): Outer_join_typeContext | undefined;
    join_on_part(): Join_on_partContext[];
    join_on_part(i: number): Join_on_partContext;
    join_using_part(): Join_using_partContext[];
    join_using_part(i: number): Join_using_partContext;
    CROSS(): TerminalNode | undefined;
    NATURAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Join_on_partContext extends ParserRuleContext {
    ON(): TerminalNode;
    condition(): ConditionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Join_using_partContext extends ParserRuleContext {
    USING(): TerminalNode;
    paren_column_list(): Paren_column_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Outer_join_typeContext extends ParserRuleContext {
    FULL(): TerminalNode | undefined;
    LEFT(): TerminalNode | undefined;
    RIGHT(): TerminalNode | undefined;
    OUTER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Query_partition_clauseContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    expressions(): ExpressionsContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    subquery(): SubqueryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Flashback_query_clauseContext extends ParserRuleContext {
    VERSIONS(): TerminalNode | undefined;
    BETWEEN(): TerminalNode | undefined;
    expression(): ExpressionContext;
    SCN(): TerminalNode | undefined;
    TIMESTAMP(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    SNAPSHOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Pivot_clauseContext extends ParserRuleContext {
    PIVOT(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    pivot_element(): Pivot_elementContext[];
    pivot_element(i: number): Pivot_elementContext;
    pivot_for_clause(): Pivot_for_clauseContext;
    pivot_in_clause(): Pivot_in_clauseContext;
    RIGHT_PAREN(): TerminalNode;
    XML(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Pivot_elementContext extends ParserRuleContext {
    aggregate_function_name(): Aggregate_function_nameContext;
    LEFT_PAREN(): TerminalNode;
    expression(): ExpressionContext;
    RIGHT_PAREN(): TerminalNode;
    column_alias(): Column_aliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Pivot_for_clauseContext extends ParserRuleContext {
    FOR(): TerminalNode;
    column_name(): Column_nameContext | undefined;
    paren_column_list(): Paren_column_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Pivot_in_clauseContext extends ParserRuleContext {
    IN(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    subquery(): SubqueryContext | undefined;
    ANY(): TerminalNode[];
    ANY(i: number): TerminalNode;
    pivot_in_clause_element(): Pivot_in_clause_elementContext[];
    pivot_in_clause_element(i: number): Pivot_in_clause_elementContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Pivot_in_clause_elementContext extends ParserRuleContext {
    pivot_in_clause_elements(): Pivot_in_clause_elementsContext;
    column_alias(): Column_aliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Pivot_in_clause_elementsContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    expressions(): ExpressionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Unpivot_clauseContext extends ParserRuleContext {
    UNPIVOT(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    pivot_for_clause(): Pivot_for_clauseContext;
    unpivot_in_clause(): Unpivot_in_clauseContext;
    RIGHT_PAREN(): TerminalNode;
    column_name(): Column_nameContext | undefined;
    paren_column_list(): Paren_column_listContext | undefined;
    NULLS(): TerminalNode | undefined;
    INCLUDE(): TerminalNode | undefined;
    EXCLUDE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Unpivot_in_clauseContext extends ParserRuleContext {
    IN(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    unpivot_in_elements(): Unpivot_in_elementsContext[];
    unpivot_in_elements(i: number): Unpivot_in_elementsContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Unpivot_in_elementsContext extends ParserRuleContext {
    column_name(): Column_nameContext | undefined;
    paren_column_list(): Paren_column_listContext | undefined;
    AS(): TerminalNode | undefined;
    constant(): ConstantContext[];
    constant(i: number): ConstantContext;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Hierarchical_query_clauseContext extends ParserRuleContext {
    CONNECT(): TerminalNode;
    BY(): TerminalNode;
    condition(): ConditionContext;
    NOCYCLE(): TerminalNode | undefined;
    start_part(): Start_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Start_partContext extends ParserRuleContext {
    START(): TerminalNode;
    WITH(): TerminalNode;
    condition(): ConditionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Group_by_clauseContext extends ParserRuleContext {
    GROUP(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    group_by_elements(): Group_by_elementsContext[];
    group_by_elements(i: number): Group_by_elementsContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    having_clause(): Having_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Group_by_elementsContext extends ParserRuleContext {
    grouping_sets_clause(): Grouping_sets_clauseContext | undefined;
    rollup_cube_clause(): Rollup_cube_clauseContext | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Rollup_cube_clauseContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    grouping_sets_elements(): Grouping_sets_elementsContext[];
    grouping_sets_elements(i: number): Grouping_sets_elementsContext;
    RIGHT_PAREN(): TerminalNode;
    ROLLUP(): TerminalNode | undefined;
    CUBE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Grouping_sets_clauseContext extends ParserRuleContext {
    GROUPING(): TerminalNode;
    SETS(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    grouping_sets_elements(): Grouping_sets_elementsContext[];
    grouping_sets_elements(i: number): Grouping_sets_elementsContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Grouping_sets_elementsContext extends ParserRuleContext {
    rollup_cube_clause(): Rollup_cube_clauseContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    expressions(): ExpressionsContext | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Having_clauseContext extends ParserRuleContext {
    HAVING(): TerminalNode;
    condition(): ConditionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Model_clauseContext extends ParserRuleContext {
    MODEL(): TerminalNode;
    main_model(): Main_modelContext;
    cell_reference_options(): Cell_reference_optionsContext[];
    cell_reference_options(i: number): Cell_reference_optionsContext;
    return_rows_clause(): Return_rows_clauseContext | undefined;
    reference_model(): Reference_modelContext[];
    reference_model(i: number): Reference_modelContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cell_reference_optionsContext extends ParserRuleContext {
    NAV(): TerminalNode | undefined;
    IGNORE(): TerminalNode | undefined;
    KEEP(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    DIMENSION(): TerminalNode | undefined;
    SINGLE(): TerminalNode | undefined;
    REFERENCE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Return_rows_clauseContext extends ParserRuleContext {
    RETURN(): TerminalNode;
    ROWS(): TerminalNode;
    UPDATED(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Reference_modelContext extends ParserRuleContext {
    REFERENCE(): TerminalNode;
    reference_model_name(): Reference_model_nameContext;
    ON(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    subquery(): SubqueryContext;
    RIGHT_PAREN(): TerminalNode;
    model_column_clauses(): Model_column_clausesContext;
    cell_reference_options(): Cell_reference_optionsContext[];
    cell_reference_options(i: number): Cell_reference_optionsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Main_modelContext extends ParserRuleContext {
    model_column_clauses(): Model_column_clausesContext;
    model_rules_clause(): Model_rules_clauseContext;
    MAIN(): TerminalNode | undefined;
    main_model_name(): Main_model_nameContext | undefined;
    cell_reference_options(): Cell_reference_optionsContext[];
    cell_reference_options(i: number): Cell_reference_optionsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Model_column_clausesContext extends ParserRuleContext {
    DIMENSION(): TerminalNode;
    BY(): TerminalNode;
    model_column_list(): Model_column_listContext[];
    model_column_list(i: number): Model_column_listContext;
    MEASURES(): TerminalNode;
    model_column_partition_part(): Model_column_partition_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Model_column_partition_partContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    model_column_list(): Model_column_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Model_column_listContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    model_column(): Model_columnContext[];
    model_column(i: number): Model_columnContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Model_columnContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    query_block(): Query_blockContext | undefined;
    column_alias(): Column_aliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Model_rules_clauseContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    model_rules_part(): Model_rules_partContext | undefined;
    model_rules_element(): Model_rules_elementContext[];
    model_rules_element(i: number): Model_rules_elementContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Model_rules_partContext extends ParserRuleContext {
    RULES(): TerminalNode;
    UPDATE(): TerminalNode | undefined;
    UPSERT(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    model_iterate_clause(): Model_iterate_clauseContext | undefined;
    AUTOMATIC(): TerminalNode | undefined;
    SEQUENTIAL(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Model_rules_elementContext extends ParserRuleContext {
    cell_assignment(): Cell_assignmentContext;
    EQUALS_OP(): TerminalNode;
    expression(): ExpressionContext;
    UPDATE(): TerminalNode | undefined;
    UPSERT(): TerminalNode | undefined;
    order_by_clause(): Order_by_clauseContext | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cell_assignmentContext extends ParserRuleContext {
    model_expression(): Model_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Model_iterate_clauseContext extends ParserRuleContext {
    ITERATE(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    expression(): ExpressionContext;
    RIGHT_PAREN(): TerminalNode;
    until_part(): Until_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Until_partContext extends ParserRuleContext {
    UNTIL(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    condition(): ConditionContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Order_by_clauseContext extends ParserRuleContext {
    ORDER(): TerminalNode;
    BY(): TerminalNode;
    order_by_elements(): Order_by_elementsContext[];
    order_by_elements(i: number): Order_by_elementsContext;
    SIBLINGS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Order_by_elementsContext extends ParserRuleContext {
    expression(): ExpressionContext;
    NULLS(): TerminalNode | undefined;
    ASC(): TerminalNode | undefined;
    DESC(): TerminalNode | undefined;
    FIRST(): TerminalNode | undefined;
    LAST(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Offset_clauseContext extends ParserRuleContext {
    OFFSET(): TerminalNode;
    expression(): ExpressionContext;
    ROW(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Fetch_clauseContext extends ParserRuleContext {
    FETCH(): TerminalNode;
    FIRST(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    TIES(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    PERCENT_KEYWORD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class For_update_clauseContext extends ParserRuleContext {
    FOR(): TerminalNode;
    UPDATE(): TerminalNode;
    for_update_of_part(): For_update_of_partContext | undefined;
    for_update_options(): For_update_optionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class For_update_of_partContext extends ParserRuleContext {
    OF(): TerminalNode;
    column_list(): Column_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class For_update_optionsContext extends ParserRuleContext {
    SKIP_(): TerminalNode | undefined;
    LOCKED(): TerminalNode | undefined;
    NOWAIT(): TerminalNode | undefined;
    WAIT(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Update_statementContext extends ParserRuleContext {
    UPDATE(): TerminalNode;
    general_table_ref(): General_table_refContext;
    update_set_clause(): Update_set_clauseContext;
    where_clause(): Where_clauseContext | undefined;
    static_returning_clause(): Static_returning_clauseContext | undefined;
    error_logging_clause(): Error_logging_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Update_set_clauseContext extends ParserRuleContext {
    SET(): TerminalNode;
    column_based_update_set_clause(): Column_based_update_set_clauseContext[];
    column_based_update_set_clause(i: number): Column_based_update_set_clauseContext;
    VALUE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    EQUALS_OP(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Column_based_update_set_clauseContext extends ParserRuleContext {
    column_name(): Column_nameContext | undefined;
    EQUALS_OP(): TerminalNode;
    expression(): ExpressionContext | undefined;
    paren_column_list(): Paren_column_listContext | undefined;
    subquery(): SubqueryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Delete_statementContext extends ParserRuleContext {
    DELETE(): TerminalNode;
    general_table_ref(): General_table_refContext;
    FROM(): TerminalNode | undefined;
    where_clause(): Where_clauseContext | undefined;
    static_returning_clause(): Static_returning_clauseContext | undefined;
    error_logging_clause(): Error_logging_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Insert_statementContext extends ParserRuleContext {
    INSERT(): TerminalNode;
    single_table_insert(): Single_table_insertContext | undefined;
    multi_table_insert(): Multi_table_insertContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Single_table_insertContext extends ParserRuleContext {
    insert_into_clause(): Insert_into_clauseContext;
    values_clause(): Values_clauseContext | undefined;
    select_statement(): Select_statementContext | undefined;
    error_logging_clause(): Error_logging_clauseContext | undefined;
    static_returning_clause(): Static_returning_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Multi_table_insertContext extends ParserRuleContext {
    select_statement(): Select_statementContext;
    ALL(): TerminalNode | undefined;
    conditional_insert_clause(): Conditional_insert_clauseContext | undefined;
    multi_table_element(): Multi_table_elementContext[];
    multi_table_element(i: number): Multi_table_elementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Multi_table_elementContext extends ParserRuleContext {
    insert_into_clause(): Insert_into_clauseContext;
    values_clause(): Values_clauseContext | undefined;
    error_logging_clause(): Error_logging_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Conditional_insert_clauseContext extends ParserRuleContext {
    conditional_insert_when_part(): Conditional_insert_when_partContext[];
    conditional_insert_when_part(i: number): Conditional_insert_when_partContext;
    conditional_insert_else_part(): Conditional_insert_else_partContext | undefined;
    ALL(): TerminalNode | undefined;
    FIRST(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Conditional_insert_when_partContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    condition(): ConditionContext;
    THEN(): TerminalNode;
    multi_table_element(): Multi_table_elementContext[];
    multi_table_element(i: number): Multi_table_elementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Conditional_insert_else_partContext extends ParserRuleContext {
    ELSE(): TerminalNode;
    multi_table_element(): Multi_table_elementContext[];
    multi_table_element(i: number): Multi_table_elementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Insert_into_clauseContext extends ParserRuleContext {
    INTO(): TerminalNode;
    general_table_ref(): General_table_refContext;
    paren_column_list(): Paren_column_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Values_clauseContext extends ParserRuleContext {
    VALUES(): TerminalNode;
    REGULAR_ID(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    expressions(): ExpressionsContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Merge_statementContext extends ParserRuleContext {
    MERGE(): TerminalNode;
    INTO(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    USING(): TerminalNode;
    selected_tableview(): Selected_tableviewContext;
    ON(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    condition(): ConditionContext;
    RIGHT_PAREN(): TerminalNode;
    table_alias(): Table_aliasContext | undefined;
    merge_update_clause(): Merge_update_clauseContext | undefined;
    merge_insert_clause(): Merge_insert_clauseContext | undefined;
    error_logging_clause(): Error_logging_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Merge_update_clauseContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    MATCHED(): TerminalNode;
    THEN(): TerminalNode;
    UPDATE(): TerminalNode;
    SET(): TerminalNode;
    merge_element(): Merge_elementContext[];
    merge_element(i: number): Merge_elementContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    where_clause(): Where_clauseContext | undefined;
    merge_update_delete_part(): Merge_update_delete_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Merge_elementContext extends ParserRuleContext {
    column_name(): Column_nameContext;
    EQUALS_OP(): TerminalNode;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Merge_update_delete_partContext extends ParserRuleContext {
    DELETE(): TerminalNode;
    where_clause(): Where_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Merge_insert_clauseContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    NOT(): TerminalNode;
    MATCHED(): TerminalNode;
    THEN(): TerminalNode;
    INSERT(): TerminalNode;
    values_clause(): Values_clauseContext;
    paren_column_list(): Paren_column_listContext | undefined;
    where_clause(): Where_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Selected_tableviewContext extends ParserRuleContext {
    tableview_name(): Tableview_nameContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    select_statement(): Select_statementContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    table_alias(): Table_aliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lock_table_statementContext extends ParserRuleContext {
    LOCK(): TerminalNode;
    TABLE(): TerminalNode;
    lock_table_element(): Lock_table_elementContext[];
    lock_table_element(i: number): Lock_table_elementContext;
    IN(): TerminalNode;
    lock_mode(): Lock_modeContext;
    MODE(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    wait_nowait_part(): Wait_nowait_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Wait_nowait_partContext extends ParserRuleContext {
    WAIT(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    NOWAIT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lock_table_elementContext extends ParserRuleContext {
    tableview_name(): Tableview_nameContext;
    partition_extension_clause(): Partition_extension_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Lock_modeContext extends ParserRuleContext {
    ROW(): TerminalNode | undefined;
    SHARE(): TerminalNode | undefined;
    EXCLUSIVE(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class General_table_refContext extends ParserRuleContext {
    dml_table_expression_clause(): Dml_table_expression_clauseContext | undefined;
    ONLY(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    table_alias(): Table_aliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Static_returning_clauseContext extends ParserRuleContext {
    expressions(): ExpressionsContext;
    into_clause(): Into_clauseContext;
    RETURNING(): TerminalNode | undefined;
    RETURN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Error_logging_clauseContext extends ParserRuleContext {
    LOG(): TerminalNode;
    ERRORS(): TerminalNode;
    error_logging_into_part(): Error_logging_into_partContext | undefined;
    expression(): ExpressionContext | undefined;
    error_logging_reject_part(): Error_logging_reject_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Error_logging_into_partContext extends ParserRuleContext {
    INTO(): TerminalNode;
    tableview_name(): Tableview_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Error_logging_reject_partContext extends ParserRuleContext {
    REJECT(): TerminalNode;
    LIMIT(): TerminalNode;
    UNLIMITED(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Dml_table_expression_clauseContext extends ParserRuleContext {
    table_collection_expression(): Table_collection_expressionContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    select_statement(): Select_statementContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    subquery_restriction_clause(): Subquery_restriction_clauseContext | undefined;
    tableview_name(): Tableview_nameContext | undefined;
    sample_clause(): Sample_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_collection_expressionContext extends ParserRuleContext {
    TABLE(): TerminalNode | undefined;
    THE(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    subquery(): SubqueryContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    outer_join_sign(): Outer_join_signContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Subquery_restriction_clauseContext extends ParserRuleContext {
    WITH(): TerminalNode;
    READ(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    CHECK(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    constraint_name(): Constraint_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Sample_clauseContext extends ParserRuleContext {
    SAMPLE(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    RIGHT_PAREN(): TerminalNode;
    BLOCK(): TerminalNode | undefined;
    COMMA(): TerminalNode | undefined;
    seed_part(): Seed_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Seed_partContext extends ParserRuleContext {
    SEED(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    expression(): ExpressionContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class ConditionContext extends ParserRuleContext {
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class ExpressionsContext extends ParserRuleContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class ExpressionContext extends ParserRuleContext {
    cursor_expression(): Cursor_expressionContext | undefined;
    logical_expression(): Logical_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cursor_expressionContext extends ParserRuleContext {
    CURSOR(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    subquery(): SubqueryContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Logical_expressionContext extends ParserRuleContext {
    unary_logical_expression(): Unary_logical_expressionContext | undefined;
    logical_expression(): Logical_expressionContext[];
    logical_expression(i: number): Logical_expressionContext;
    AND(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Unary_logical_expressionContext extends ParserRuleContext {
    multiset_expression(): Multiset_expressionContext;
    NOT(): TerminalNode[];
    NOT(i: number): TerminalNode;
    IS(): TerminalNode[];
    IS(i: number): TerminalNode;
    logical_operation(): Logical_operationContext[];
    logical_operation(i: number): Logical_operationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Logical_operationContext extends ParserRuleContext {
    NULL_(): TerminalNode | undefined;
    NAN(): TerminalNode | undefined;
    PRESENT(): TerminalNode | undefined;
    INFINITE(): TerminalNode | undefined;
    A_LETTER(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    EMPTY(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    type_spec(): Type_specContext[];
    type_spec(i: number): Type_specContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Multiset_expressionContext extends ParserRuleContext {
    _multiset_type: Token;
    relational_expression(): Relational_expressionContext;
    concatenation(): ConcatenationContext | undefined;
    MEMBER(): TerminalNode | undefined;
    SUBMULTISET(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Relational_expressionContext extends ParserRuleContext {
    relational_expression(): Relational_expressionContext[];
    relational_expression(i: number): Relational_expressionContext;
    relational_operator(): Relational_operatorContext | undefined;
    compound_expression(): Compound_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Compound_expressionContext extends ParserRuleContext {
    _like_type: Token;
    concatenation(): ConcatenationContext[];
    concatenation(i: number): ConcatenationContext;
    IN(): TerminalNode | undefined;
    in_elements(): In_elementsContext | undefined;
    BETWEEN(): TerminalNode | undefined;
    between_elements(): Between_elementsContext | undefined;
    NOT(): TerminalNode | undefined;
    LIKE(): TerminalNode | undefined;
    LIKEC(): TerminalNode | undefined;
    LIKE2(): TerminalNode | undefined;
    LIKE4(): TerminalNode | undefined;
    ESCAPE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Relational_operatorContext extends ParserRuleContext {
    EQUALS_OP(): TerminalNode | undefined;
    NOT_EQUAL_OP(): TerminalNode | undefined;
    LESS_THAN_OP(): TerminalNode | undefined;
    GREATER_THAN_OP(): TerminalNode | undefined;
    EXCLAMATION_OPERATOR_PART(): TerminalNode | undefined;
    CARRET_OPERATOR_PART(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class In_elementsContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode | undefined;
    subquery(): SubqueryContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    concatenation(): ConcatenationContext[];
    concatenation(i: number): ConcatenationContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constant(): ConstantContext | undefined;
    bind_variable(): Bind_variableContext | undefined;
    general_element(): General_elementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Between_elementsContext extends ParserRuleContext {
    concatenation(): ConcatenationContext[];
    concatenation(i: number): ConcatenationContext;
    AND(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class ConcatenationContext extends ParserRuleContext {
    _op: Token;
    model_expression(): Model_expressionContext | undefined;
    AT(): TerminalNode | undefined;
    interval_expression(): Interval_expressionContext | undefined;
    ON(): TerminalNode | undefined;
    OVERFLOW(): TerminalNode | undefined;
    TRUNCATE(): TerminalNode | undefined;
    ERROR(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    concatenation(): ConcatenationContext[];
    concatenation(i: number): ConcatenationContext;
    ASTERISK(): TerminalNode | undefined;
    SOLIDUS(): TerminalNode | undefined;
    PLUS_SIGN(): TerminalNode | undefined;
    MINUS_SIGN(): TerminalNode | undefined;
    BAR(): TerminalNode[];
    BAR(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Interval_expressionContext extends ParserRuleContext {
    DAY(): TerminalNode | undefined;
    TO(): TerminalNode;
    SECOND(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    concatenation(): ConcatenationContext[];
    concatenation(i: number): ConcatenationContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    YEAR(): TerminalNode | undefined;
    MONTH(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Model_expressionContext extends ParserRuleContext {
    unary_expression(): Unary_expressionContext;
    LEFT_BRACKET(): TerminalNode | undefined;
    model_expression_element(): Model_expression_elementContext | undefined;
    RIGHT_BRACKET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Model_expression_elementContext extends ParserRuleContext {
    ANY(): TerminalNode[];
    ANY(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    single_column_for_loop(): Single_column_for_loopContext[];
    single_column_for_loop(i: number): Single_column_for_loopContext;
    multi_column_for_loop(): Multi_column_for_loopContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Single_column_for_loopContext extends ParserRuleContext {
    _fromExpr: ExpressionContext;
    _toExpr: ExpressionContext;
    _action_type: Token;
    _action_expr: ExpressionContext;
    FOR(): TerminalNode;
    column_name(): Column_nameContext;
    IN(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    INCREMENT(): TerminalNode | undefined;
    DECREMENT(): TerminalNode | undefined;
    expressions(): ExpressionsContext | undefined;
    LIKE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Multi_column_for_loopContext extends ParserRuleContext {
    FOR(): TerminalNode;
    paren_column_list(): Paren_column_listContext;
    IN(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    subquery(): SubqueryContext | undefined;
    expressions(): ExpressionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Unary_expressionContext extends ParserRuleContext {
    unary_expression(): Unary_expressionContext | undefined;
    MINUS_SIGN(): TerminalNode | undefined;
    PLUS_SIGN(): TerminalNode | undefined;
    PRIOR(): TerminalNode | undefined;
    CONNECT_BY_ROOT(): TerminalNode | undefined;
    NEW(): TerminalNode | undefined;
    DISTINCT(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    case_statement(): Case_statementContext | undefined;
    quantified_expression(): Quantified_expressionContext | undefined;
    standard_function(): Standard_functionContext | undefined;
    atom(): AtomContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Case_statementContext extends ParserRuleContext {
    searched_case_statement(): Searched_case_statementContext | undefined;
    simple_case_statement(): Simple_case_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Simple_case_statementContext extends ParserRuleContext {
    _ck1: Token;
    expression(): ExpressionContext;
    END(): TerminalNode;
    CASE(): TerminalNode[];
    CASE(i: number): TerminalNode;
    label_name(): Label_nameContext[];
    label_name(i: number): Label_nameContext;
    simple_case_when_part(): Simple_case_when_partContext[];
    simple_case_when_part(i: number): Simple_case_when_partContext;
    case_else_part(): Case_else_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Simple_case_when_partContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    THEN(): TerminalNode;
    seq_of_statements(): Seq_of_statementsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Searched_case_statementContext extends ParserRuleContext {
    _ck1: Token;
    END(): TerminalNode;
    CASE(): TerminalNode[];
    CASE(i: number): TerminalNode;
    label_name(): Label_nameContext[];
    label_name(i: number): Label_nameContext;
    searched_case_when_part(): Searched_case_when_partContext[];
    searched_case_when_part(i: number): Searched_case_when_partContext;
    case_else_part(): Case_else_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Searched_case_when_partContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    THEN(): TerminalNode;
    seq_of_statements(): Seq_of_statementsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Case_else_partContext extends ParserRuleContext {
    ELSE(): TerminalNode;
    seq_of_statements(): Seq_of_statementsContext | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class AtomContext extends ParserRuleContext {
    table_element(): Table_elementContext | undefined;
    outer_join_sign(): Outer_join_signContext | undefined;
    bind_variable(): Bind_variableContext | undefined;
    constant(): ConstantContext | undefined;
    general_element(): General_elementContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    subquery(): SubqueryContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    subquery_operation_part(): Subquery_operation_partContext[];
    subquery_operation_part(i: number): Subquery_operation_partContext;
    expressions(): ExpressionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Quantified_expressionContext extends ParserRuleContext {
    SOME(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    ANY(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    select_only_statement(): Select_only_statementContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class String_functionContext extends ParserRuleContext {
    SUBSTR(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    TO_CHAR(): TerminalNode | undefined;
    table_element(): Table_elementContext | undefined;
    standard_function(): Standard_functionContext | undefined;
    quoted_string(): Quoted_stringContext[];
    quoted_string(i: number): Quoted_stringContext;
    DECODE(): TerminalNode | undefined;
    expressions(): ExpressionsContext | undefined;
    CHR(): TerminalNode | undefined;
    concatenation(): ConcatenationContext | undefined;
    USING(): TerminalNode | undefined;
    NCHAR_CS(): TerminalNode | undefined;
    NVL(): TerminalNode | undefined;
    TRIM(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    LEADING(): TerminalNode | undefined;
    TRAILING(): TerminalNode | undefined;
    BOTH(): TerminalNode | undefined;
    TO_DATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Standard_functionContext extends ParserRuleContext {
    string_function(): String_functionContext | undefined;
    numeric_function_wrapper(): Numeric_function_wrapperContext | undefined;
    other_function(): Other_functionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class LiteralContext extends ParserRuleContext {
    CHAR_STRING(): TerminalNode | undefined;
    string_function(): String_functionContext | undefined;
    numeric(): NumericContext | undefined;
    MAXVALUE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Numeric_function_wrapperContext extends ParserRuleContext {
    numeric_function(): Numeric_functionContext;
    single_column_for_loop(): Single_column_for_loopContext | undefined;
    multi_column_for_loop(): Multi_column_for_loopContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Numeric_functionContext extends ParserRuleContext {
    SUM(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode;
    expression(): ExpressionContext | undefined;
    RIGHT_PAREN(): TerminalNode;
    DISTINCT(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    COUNT(): TerminalNode | undefined;
    ASTERISK(): TerminalNode | undefined;
    over_clause(): Over_clauseContext | undefined;
    concatenation(): ConcatenationContext | undefined;
    UNIQUE(): TerminalNode | undefined;
    ROUND(): TerminalNode | undefined;
    COMMA(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    AVG(): TerminalNode | undefined;
    MAX(): TerminalNode | undefined;
    LEAST(): TerminalNode | undefined;
    expressions(): ExpressionsContext | undefined;
    GREATEST(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Other_functionContext extends ParserRuleContext {
    over_clause_keyword(): Over_clause_keywordContext | undefined;
    function_argument_analytic(): Function_argument_analyticContext | undefined;
    over_clause(): Over_clauseContext | undefined;
    regular_id(): Regular_idContext | undefined;
    function_argument_modeling(): Function_argument_modelingContext | undefined;
    using_clause(): Using_clauseContext | undefined;
    COUNT(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    ASTERISK(): TerminalNode | undefined;
    concatenation(): ConcatenationContext[];
    concatenation(i: number): ConcatenationContext;
    DISTINCT(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    type_spec(): Type_specContext | undefined;
    CAST(): TerminalNode | undefined;
    XMLCAST(): TerminalNode | undefined;
    MULTISET(): TerminalNode | undefined;
    subquery(): SubqueryContext | undefined;
    COALESCE(): TerminalNode | undefined;
    table_element(): Table_elementContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    numeric(): NumericContext | undefined;
    quoted_string(): Quoted_stringContext | undefined;
    COLLECT(): TerminalNode | undefined;
    collect_order_by_part(): Collect_order_by_partContext | undefined;
    within_or_over_clause_keyword(): Within_or_over_clause_keywordContext | undefined;
    function_argument(): Function_argumentContext | undefined;
    within_or_over_part(): Within_or_over_partContext[];
    within_or_over_part(i: number): Within_or_over_partContext;
    cursor_name(): Cursor_nameContext | undefined;
    PERCENT_ISOPEN(): TerminalNode | undefined;
    PERCENT_FOUND(): TerminalNode | undefined;
    PERCENT_NOTFOUND(): TerminalNode | undefined;
    PERCENT_ROWCOUNT(): TerminalNode | undefined;
    DECOMPOSE(): TerminalNode | undefined;
    CANONICAL(): TerminalNode | undefined;
    COMPATIBILITY(): TerminalNode | undefined;
    EXTRACT(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    FIRST_VALUE(): TerminalNode | undefined;
    LAST_VALUE(): TerminalNode | undefined;
    respect_or_ignore_nulls(): Respect_or_ignore_nullsContext | undefined;
    standard_prediction_function_keyword(): Standard_prediction_function_keywordContext | undefined;
    expressions(): ExpressionsContext | undefined;
    cost_matrix_clause(): Cost_matrix_clauseContext | undefined;
    TRANSLATE(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    USING(): TerminalNode | undefined;
    CHAR_CS(): TerminalNode | undefined;
    NCHAR_CS(): TerminalNode | undefined;
    TREAT(): TerminalNode | undefined;
    REF(): TerminalNode | undefined;
    TRIM(): TerminalNode | undefined;
    LEADING(): TerminalNode | undefined;
    TRAILING(): TerminalNode | undefined;
    BOTH(): TerminalNode | undefined;
    XMLAGG(): TerminalNode | undefined;
    order_by_clause(): Order_by_clauseContext | undefined;
    PERIOD(): TerminalNode | undefined;
    general_element_part(): General_element_partContext | undefined;
    xml_multiuse_expression_element(): Xml_multiuse_expression_elementContext[];
    xml_multiuse_expression_element(i: number): Xml_multiuse_expression_elementContext;
    XMLCOLATTVAL(): TerminalNode | undefined;
    XMLFOREST(): TerminalNode | undefined;
    XMLELEMENT(): TerminalNode | undefined;
    xml_attributes_clause(): Xml_attributes_clauseContext | undefined;
    ENTITYESCAPING(): TerminalNode | undefined;
    NOENTITYESCAPING(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    EVALNAME(): TerminalNode | undefined;
    column_alias(): Column_aliasContext[];
    column_alias(i: number): Column_aliasContext;
    XMLEXISTS(): TerminalNode | undefined;
    xml_passing_clause(): Xml_passing_clauseContext | undefined;
    XMLPARSE(): TerminalNode | undefined;
    DOCUMENT(): TerminalNode | undefined;
    CONTENT(): TerminalNode | undefined;
    WELLFORMED(): TerminalNode | undefined;
    XMLPI(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    XMLQUERY(): TerminalNode | undefined;
    RETURNING(): TerminalNode | undefined;
    NULL_(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    EMPTY(): TerminalNode | undefined;
    XMLROOT(): TerminalNode | undefined;
    xmlroot_param_version_part(): Xmlroot_param_version_partContext | undefined;
    xmlroot_param_standalone_part(): Xmlroot_param_standalone_partContext | undefined;
    XMLSERIALIZE(): TerminalNode | undefined;
    xmlserialize_param_enconding_part(): Xmlserialize_param_enconding_partContext | undefined;
    xmlserialize_param_version_part(): Xmlserialize_param_version_partContext | undefined;
    xmlserialize_param_ident_part(): Xmlserialize_param_ident_partContext | undefined;
    DEFAULTS(): TerminalNode | undefined;
    HIDE(): TerminalNode | undefined;
    SHOW(): TerminalNode | undefined;
    xmltable(): XmltableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Over_clause_keywordContext extends ParserRuleContext {
    AVG(): TerminalNode | undefined;
    CORR(): TerminalNode | undefined;
    LAG(): TerminalNode | undefined;
    LEAD(): TerminalNode | undefined;
    MAX(): TerminalNode | undefined;
    MEDIAN(): TerminalNode | undefined;
    MIN(): TerminalNode | undefined;
    NTILE(): TerminalNode | undefined;
    RATIO_TO_REPORT(): TerminalNode | undefined;
    ROW_NUMBER(): TerminalNode | undefined;
    SUM(): TerminalNode | undefined;
    VARIANCE(): TerminalNode | undefined;
    REGR_(): TerminalNode | undefined;
    STDDEV(): TerminalNode | undefined;
    VAR_(): TerminalNode | undefined;
    COVAR_(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Within_or_over_clause_keywordContext extends ParserRuleContext {
    CUME_DIST(): TerminalNode | undefined;
    DENSE_RANK(): TerminalNode | undefined;
    LISTAGG(): TerminalNode | undefined;
    PERCENT_RANK(): TerminalNode | undefined;
    PERCENTILE_CONT(): TerminalNode | undefined;
    PERCENTILE_DISC(): TerminalNode | undefined;
    RANK(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Standard_prediction_function_keywordContext extends ParserRuleContext {
    PREDICTION(): TerminalNode | undefined;
    PREDICTION_BOUNDS(): TerminalNode | undefined;
    PREDICTION_COST(): TerminalNode | undefined;
    PREDICTION_DETAILS(): TerminalNode | undefined;
    PREDICTION_PROBABILITY(): TerminalNode | undefined;
    PREDICTION_SET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Over_clauseContext extends ParserRuleContext {
    OVER(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    query_partition_clause(): Query_partition_clauseContext | undefined;
    order_by_clause(): Order_by_clauseContext | undefined;
    windowing_clause(): Windowing_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Windowing_clauseContext extends ParserRuleContext {
    windowing_type(): Windowing_typeContext;
    BETWEEN(): TerminalNode | undefined;
    windowing_elements(): Windowing_elementsContext[];
    windowing_elements(i: number): Windowing_elementsContext;
    AND(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Windowing_typeContext extends ParserRuleContext {
    ROWS(): TerminalNode | undefined;
    RANGE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Windowing_elementsContext extends ParserRuleContext {
    UNBOUNDED(): TerminalNode | undefined;
    PRECEDING(): TerminalNode | undefined;
    CURRENT(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    concatenation(): ConcatenationContext | undefined;
    FOLLOWING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Using_clauseContext extends ParserRuleContext {
    USING(): TerminalNode;
    ASTERISK(): TerminalNode | undefined;
    using_element(): Using_elementContext[];
    using_element(i: number): Using_elementContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Using_elementContext extends ParserRuleContext {
    select_list_elements(): Select_list_elementsContext;
    IN(): TerminalNode | undefined;
    OUT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Collect_order_by_partContext extends ParserRuleContext {
    ORDER(): TerminalNode;
    BY(): TerminalNode;
    concatenation(): ConcatenationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Within_or_over_partContext extends ParserRuleContext {
    WITHIN(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    order_by_clause(): Order_by_clauseContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    over_clause(): Over_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cost_matrix_clauseContext extends ParserRuleContext {
    COST(): TerminalNode;
    MODEL(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    cost_class_name(): Cost_class_nameContext[];
    cost_class_name(i: number): Cost_class_nameContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    VALUES(): TerminalNode | undefined;
    AUTO(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    expressions(): ExpressionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xml_passing_clauseContext extends ParserRuleContext {
    PASSING(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    BY(): TerminalNode | undefined;
    VALUE(): TerminalNode | undefined;
    column_alias(): Column_aliasContext[];
    column_alias(i: number): Column_aliasContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xml_attributes_clauseContext extends ParserRuleContext {
    XMLATTRIBUTES(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    xml_multiuse_expression_element(): Xml_multiuse_expression_elementContext[];
    xml_multiuse_expression_element(i: number): Xml_multiuse_expression_elementContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    ENTITYESCAPING(): TerminalNode | undefined;
    NOENTITYESCAPING(): TerminalNode | undefined;
    SCHEMACHECK(): TerminalNode | undefined;
    NOSCHEMACHECK(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xml_namespaces_clauseContext extends ParserRuleContext {
    XMLNAMESPACES(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    concatenation(): ConcatenationContext[];
    concatenation(i: number): ConcatenationContext;
    column_alias(): Column_aliasContext[];
    column_alias(i: number): Column_aliasContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    xml_general_default_part(): Xml_general_default_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xml_table_columnContext extends ParserRuleContext {
    xml_column_name(): Xml_column_nameContext;
    FOR(): TerminalNode | undefined;
    ORDINALITY(): TerminalNode | undefined;
    type_spec(): Type_specContext | undefined;
    PATH(): TerminalNode | undefined;
    concatenation(): ConcatenationContext | undefined;
    xml_general_default_part(): Xml_general_default_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xml_general_default_partContext extends ParserRuleContext {
    DEFAULT(): TerminalNode;
    concatenation(): ConcatenationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xml_multiuse_expression_elementContext extends ParserRuleContext {
    expression(): ExpressionContext;
    AS(): TerminalNode | undefined;
    id_expression(): Id_expressionContext | undefined;
    EVALNAME(): TerminalNode | undefined;
    concatenation(): ConcatenationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xmlroot_param_version_partContext extends ParserRuleContext {
    VERSION(): TerminalNode;
    NO(): TerminalNode | undefined;
    VALUE(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xmlroot_param_standalone_partContext extends ParserRuleContext {
    STANDALONE(): TerminalNode;
    YES(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    VALUE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
    ENCODING(): TerminalNode;
    concatenation(): ConcatenationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xmlserialize_param_version_partContext extends ParserRuleContext {
    VERSION(): TerminalNode;
    concatenation(): ConcatenationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xmlserialize_param_ident_partContext extends ParserRuleContext {
    NO(): TerminalNode | undefined;
    INDENT(): TerminalNode;
    SIZE(): TerminalNode | undefined;
    EQUALS_OP(): TerminalNode | undefined;
    concatenation(): ConcatenationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Sql_plus_commandContext extends ParserRuleContext {
    SOLIDUS(): TerminalNode | undefined;
    EXIT(): TerminalNode | undefined;
    PROMPT_MESSAGE(): TerminalNode | undefined;
    SHOW(): TerminalNode | undefined;
    ERR(): TerminalNode | undefined;
    ERRORS(): TerminalNode | undefined;
    START_CMD(): TerminalNode | undefined;
    whenever_command(): Whenever_commandContext | undefined;
    set_command(): Set_commandContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Whenever_commandContext extends ParserRuleContext {
    WHENEVER(): TerminalNode;
    SQLERROR(): TerminalNode | undefined;
    OSERROR(): TerminalNode | undefined;
    EXIT(): TerminalNode | undefined;
    CONTINUE(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    ROLLBACK(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    SUCCESS(): TerminalNode | undefined;
    FAILURE(): TerminalNode | undefined;
    WARNING(): TerminalNode | undefined;
    variable_name(): Variable_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Set_commandContext extends ParserRuleContext {
    SET(): TerminalNode;
    regular_id(): Regular_idContext[];
    regular_id(i: number): Regular_idContext;
    CHAR_STRING(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    numeric(): NumericContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Partition_extension_clauseContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    SUBPARTITION(): TerminalNode | undefined;
    PARTITION(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    expressions(): ExpressionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Column_aliasContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    quoted_string(): Quoted_stringContext | undefined;
    AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_aliasContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    quoted_string(): Quoted_stringContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Where_clauseContext extends ParserRuleContext {
    WHERE(): TerminalNode;
    CURRENT(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    cursor_name(): Cursor_nameContext | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Into_clauseContext extends ParserRuleContext {
    INTO(): TerminalNode;
    variable_name(): Variable_nameContext[];
    variable_name(i: number): Variable_nameContext;
    BULK(): TerminalNode | undefined;
    COLLECT(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Xml_column_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    quoted_string(): Quoted_stringContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cost_class_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Attribute_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Savepoint_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Rollback_segment_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_var_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Schema_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Routine_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    AT_SIGN(): TerminalNode | undefined;
    link_name(): Link_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Package_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Implementation_type_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    PERIOD(): TerminalNode | undefined;
    id_expression(): Id_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Parameter_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Reference_model_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Main_model_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Container_tableview_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    PERIOD(): TerminalNode | undefined;
    id_expression(): Id_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Aggregate_function_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Query_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Grantee_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext;
    identified_by(): Identified_byContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Role_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext | undefined;
    CONNECT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Constraint_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    AT_SIGN(): TerminalNode | undefined;
    link_name(): Link_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Label_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Type_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Sequence_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Exception_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Function_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    PERIOD(): TerminalNode | undefined;
    id_expression(): Id_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Procedure_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    PERIOD(): TerminalNode | undefined;
    id_expression(): Id_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Trigger_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    PERIOD(): TerminalNode | undefined;
    id_expression(): Id_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Variable_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    INTRODUCER(): TerminalNode | undefined;
    char_set_name(): Char_set_nameContext | undefined;
    PERIOD(): TerminalNode | undefined;
    bind_variable(): Bind_variableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Index_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    PERIOD(): TerminalNode | undefined;
    id_expression(): Id_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Cursor_nameContext extends ParserRuleContext {
    general_element(): General_elementContext | undefined;
    bind_variable(): Bind_variableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Record_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    bind_variable(): Bind_variableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Collection_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    PERIOD(): TerminalNode | undefined;
    id_expression(): Id_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Link_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Column_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Tableview_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    id_expression(): Id_expressionContext | undefined;
    AT_SIGN(): TerminalNode | undefined;
    link_name(): Link_nameContext[];
    link_name(i: number): Link_nameContext;
    partition_extension_clause(): Partition_extension_clauseContext | undefined;
    xmltable(): XmltableContext | undefined;
    outer_join_sign(): Outer_join_signContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class XmltableContext extends ParserRuleContext {
    XMLTABLE(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    concatenation(): ConcatenationContext;
    RIGHT_PAREN(): TerminalNode;
    xml_namespaces_clause(): Xml_namespaces_clauseContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    xml_passing_clause(): Xml_passing_clauseContext | undefined;
    COLUMNS(): TerminalNode | undefined;
    xml_table_column(): Xml_table_columnContext[];
    xml_table_column(i: number): Xml_table_columnContext;
    PERIOD(): TerminalNode | undefined;
    general_element_part(): General_element_partContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Char_set_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Synonym_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Schema_object_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Dir_object_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class User_object_nameContext extends ParserRuleContext {
    id_expression(): Id_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Grant_object_nameContext extends ParserRuleContext {
    tableview_name(): Tableview_nameContext | undefined;
    USER(): TerminalNode | undefined;
    user_object_name(): User_object_nameContext[];
    user_object_name(i: number): User_object_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    DIRECTORY(): TerminalNode | undefined;
    dir_object_name(): Dir_object_nameContext | undefined;
    EDITION(): TerminalNode | undefined;
    schema_object_name(): Schema_object_nameContext | undefined;
    MINING(): TerminalNode | undefined;
    MODEL(): TerminalNode | undefined;
    JAVA(): TerminalNode | undefined;
    SOURCE(): TerminalNode | undefined;
    RESOURCE(): TerminalNode | undefined;
    SQL(): TerminalNode | undefined;
    TRANSLATION(): TerminalNode | undefined;
    PROFILE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Column_listContext extends ParserRuleContext {
    column_name(): Column_nameContext[];
    column_name(i: number): Column_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Paren_column_listContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    column_list(): Column_listContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Keep_clauseContext extends ParserRuleContext {
    KEEP(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    DENSE_RANK(): TerminalNode;
    order_by_clause(): Order_by_clauseContext;
    RIGHT_PAREN(): TerminalNode;
    FIRST(): TerminalNode | undefined;
    LAST(): TerminalNode | undefined;
    over_clause(): Over_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Function_argumentContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    argument(): ArgumentContext[];
    argument(i: number): ArgumentContext;
    keep_clause(): Keep_clauseContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Function_argument_analyticContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    argument(): ArgumentContext[];
    argument(i: number): ArgumentContext;
    keep_clause(): Keep_clauseContext | undefined;
    respect_or_ignore_nulls(): Respect_or_ignore_nullsContext[];
    respect_or_ignore_nulls(i: number): Respect_or_ignore_nullsContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Function_argument_modelingContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    column_name(): Column_nameContext;
    USING(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    tableview_name(): Tableview_nameContext | undefined;
    PERIOD(): TerminalNode | undefined;
    ASTERISK(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    keep_clause(): Keep_clauseContext | undefined;
    numeric(): NumericContext[];
    numeric(i: number): NumericContext;
    NULL_(): TerminalNode[];
    NULL_(i: number): TerminalNode;
    column_alias(): Column_aliasContext[];
    column_alias(i: number): Column_aliasContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Respect_or_ignore_nullsContext extends ParserRuleContext {
    NULLS(): TerminalNode;
    RESPECT(): TerminalNode | undefined;
    IGNORE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class ArgumentContext extends ParserRuleContext {
    expression(): ExpressionContext;
    identifier(): IdentifierContext | undefined;
    EQUALS_OP(): TerminalNode | undefined;
    GREATER_THAN_OP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Type_specContext extends ParserRuleContext {
    datatype(): DatatypeContext | undefined;
    type_name(): Type_nameContext | undefined;
    REF(): TerminalNode | undefined;
    PERCENT_ROWTYPE(): TerminalNode | undefined;
    PERCENT_TYPE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class DatatypeContext extends ParserRuleContext {
    native_datatype_element(): Native_datatype_elementContext | undefined;
    precision_part(): Precision_partContext | undefined;
    WITH(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    CHARACTER(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    char_set_name(): Char_set_nameContext | undefined;
    LOCAL(): TerminalNode | undefined;
    INTERVAL(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    YEAR(): TerminalNode | undefined;
    DAY(): TerminalNode | undefined;
    MONTH(): TerminalNode | undefined;
    SECOND(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Precision_partContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    numeric(): NumericContext[];
    numeric(i: number): NumericContext;
    ASTERISK(): TerminalNode | undefined;
    COMMA(): TerminalNode | undefined;
    CHAR(): TerminalNode | undefined;
    BYTE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Native_datatype_elementContext extends ParserRuleContext {
    BINARY_INTEGER(): TerminalNode | undefined;
    PLS_INTEGER(): TerminalNode | undefined;
    NATURAL(): TerminalNode | undefined;
    BINARY_FLOAT(): TerminalNode | undefined;
    BINARY_DOUBLE(): TerminalNode | undefined;
    NATURALN(): TerminalNode | undefined;
    POSITIVE(): TerminalNode | undefined;
    POSITIVEN(): TerminalNode | undefined;
    SIGNTYPE(): TerminalNode | undefined;
    SIMPLE_INTEGER(): TerminalNode | undefined;
    NVARCHAR2(): TerminalNode | undefined;
    DEC(): TerminalNode | undefined;
    INTEGER(): TerminalNode | undefined;
    INT(): TerminalNode | undefined;
    NUMERIC(): TerminalNode | undefined;
    SMALLINT(): TerminalNode | undefined;
    NUMBER(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    DOUBLE(): TerminalNode | undefined;
    PRECISION(): TerminalNode | undefined;
    FLOAT(): TerminalNode | undefined;
    REAL(): TerminalNode | undefined;
    NCHAR(): TerminalNode | undefined;
    LONG(): TerminalNode | undefined;
    RAW(): TerminalNode | undefined;
    CHAR(): TerminalNode | undefined;
    CHARACTER(): TerminalNode | undefined;
    VARCHAR2(): TerminalNode | undefined;
    VARCHAR(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    BOOLEAN(): TerminalNode | undefined;
    DATE(): TerminalNode | undefined;
    ROWID(): TerminalNode | undefined;
    UROWID(): TerminalNode | undefined;
    YEAR(): TerminalNode | undefined;
    MONTH(): TerminalNode | undefined;
    DAY(): TerminalNode | undefined;
    HOUR(): TerminalNode | undefined;
    MINUTE(): TerminalNode | undefined;
    SECOND(): TerminalNode | undefined;
    TIMEZONE_HOUR(): TerminalNode | undefined;
    TIMEZONE_MINUTE(): TerminalNode | undefined;
    TIMEZONE_REGION(): TerminalNode | undefined;
    TIMEZONE_ABBR(): TerminalNode | undefined;
    TIMESTAMP(): TerminalNode | undefined;
    TIMESTAMP_UNCONSTRAINED(): TerminalNode | undefined;
    TIMESTAMP_TZ_UNCONSTRAINED(): TerminalNode | undefined;
    TIMESTAMP_LTZ_UNCONSTRAINED(): TerminalNode | undefined;
    YMINTERVAL_UNCONSTRAINED(): TerminalNode | undefined;
    DSINTERVAL_UNCONSTRAINED(): TerminalNode | undefined;
    BFILE(): TerminalNode | undefined;
    BLOB(): TerminalNode | undefined;
    CLOB(): TerminalNode | undefined;
    NCLOB(): TerminalNode | undefined;
    MLSLABEL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Bind_variableContext extends ParserRuleContext {
    BINDVAR(): TerminalNode[];
    BINDVAR(i: number): TerminalNode;
    COLON(): TerminalNode[];
    COLON(i: number): TerminalNode;
    UNSIGNED_INTEGER(): TerminalNode[];
    UNSIGNED_INTEGER(i: number): TerminalNode;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    general_element_part(): General_element_partContext[];
    general_element_part(i: number): General_element_partContext;
    INDICATOR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class General_elementContext extends ParserRuleContext {
    general_element_part(): General_element_partContext[];
    general_element_part(i: number): General_element_partContext;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class General_element_partContext extends ParserRuleContext {
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    INTRODUCER(): TerminalNode | undefined;
    char_set_name(): Char_set_nameContext | undefined;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    AT_SIGN(): TerminalNode | undefined;
    link_name(): Link_nameContext | undefined;
    function_argument(): Function_argumentContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Table_elementContext extends ParserRuleContext {
    id_expression(): Id_expressionContext[];
    id_expression(i: number): Id_expressionContext;
    INTRODUCER(): TerminalNode | undefined;
    char_set_name(): Char_set_nameContext | undefined;
    PERIOD(): TerminalNode[];
    PERIOD(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Object_privilegeContext extends ParserRuleContext {
    ALL(): TerminalNode | undefined;
    PRIVILEGES(): TerminalNode | undefined;
    ALTER(): TerminalNode | undefined;
    DEBUG(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    EXECUTE(): TerminalNode | undefined;
    FLASHBACK(): TerminalNode | undefined;
    ARCHIVE(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    INHERIT(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    KEEP(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    MERGE(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    REFRESH(): TerminalNode | undefined;
    QUERY(): TerminalNode | undefined;
    REWRITE(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    TRANSLATE(): TerminalNode | undefined;
    SQL(): TerminalNode | undefined;
    UNDER(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    USE(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class System_privilegeContext extends ParserRuleContext {
    ALL(): TerminalNode | undefined;
    PRIVILEGES(): TerminalNode | undefined;
    ADVISOR(): TerminalNode | undefined;
    ADMINISTER(): TerminalNode | undefined;
    SQL(): TerminalNode | undefined;
    TUNING(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    ANY(): TerminalNode | undefined;
    PROFILE(): TerminalNode | undefined;
    ALTER(): TerminalNode | undefined;
    CREATE(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    MANAGEMENT(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    CLUSTER(): TerminalNode | undefined;
    CONTEXT(): TerminalNode | undefined;
    EXEMPT(): TerminalNode | undefined;
    REDACTION(): TerminalNode | undefined;
    POLICY(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    LINK(): TerminalNode | undefined;
    PUBLIC(): TerminalNode | undefined;
    DEBUG(): TerminalNode | undefined;
    CONNECT(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    ANALYZE(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    DIMENSION(): TerminalNode | undefined;
    DIRECTORY(): TerminalNode | undefined;
    EDITION(): TerminalNode | undefined;
    FLASHBACK(): TerminalNode | undefined;
    ARCHIVE(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    INDEXTYPE(): TerminalNode | undefined;
    EXECUTE(): TerminalNode | undefined;
    JOB(): TerminalNode | undefined;
    EXTERNAL(): TerminalNode | undefined;
    CLASS(): TerminalNode | undefined;
    PROGRAM(): TerminalNode | undefined;
    MANAGE(): TerminalNode | undefined;
    SCHEDULER(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    LIBRARY(): TerminalNode | undefined;
    LOGMINING(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    QUERY(): TerminalNode | undefined;
    REWRITE(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    REFRESH(): TerminalNode | undefined;
    MINING(): TerminalNode | undefined;
    MODEL(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    COMMENT(): TerminalNode | undefined;
    CUBE(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    MEASURE(): TerminalNode | undefined;
    FOLDER(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    BUILD(): TerminalNode | undefined;
    PROCESS(): TerminalNode | undefined;
    OPERATOR(): TerminalNode | undefined;
    OUTLINE(): TerminalNode | undefined;
    PLUGGABLE(): TerminalNode | undefined;
    CONTAINER(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    GRANT(): TerminalNode | undefined;
    ROLLBACK(): TerminalNode | undefined;
    SEGMENT(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    RESTRICTED(): TerminalNode | undefined;
    RESOURCE(): TerminalNode | undefined;
    COST(): TerminalNode | undefined;
    TRANSLATION(): TerminalNode | undefined;
    USE(): TerminalNode | undefined;
    TRANSLATE(): TerminalNode | undefined;
    SYNONYM(): TerminalNode | undefined;
    BACKUP(): TerminalNode | undefined;
    LOCK(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    UNLIMITED(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    UNDER(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    MERGE(): TerminalNode | undefined;
    AUDIT(): TerminalNode | undefined;
    BECOME(): TerminalNode | undefined;
    CHANGE(): TerminalNode | undefined;
    NOTIFICATION(): TerminalNode | undefined;
    ACCESS(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    PRIVILEGE(): TerminalNode | undefined;
    INHERIT(): TerminalNode | undefined;
    KEEP(): TerminalNode | undefined;
    DATE(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    SYSGUID(): TerminalNode | undefined;
    PURGE(): TerminalNode | undefined;
    DBA_RECYCLEBIN(): TerminalNode | undefined;
    RESUMABLE(): TerminalNode | undefined;
    SYSBACKUP(): TerminalNode | undefined;
    SYSDBA(): TerminalNode | undefined;
    SYSDG(): TerminalNode | undefined;
    SYSKM(): TerminalNode | undefined;
    SYSOPER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class ConstantContext extends ParserRuleContext {
    TIMESTAMP(): TerminalNode | undefined;
    quoted_string(): Quoted_stringContext[];
    quoted_string(i: number): Quoted_stringContext;
    bind_variable(): Bind_variableContext[];
    bind_variable(i: number): Bind_variableContext;
    AT(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    INTERVAL(): TerminalNode | undefined;
    YEAR(): TerminalNode | undefined;
    MONTH(): TerminalNode | undefined;
    DAY(): TerminalNode[];
    DAY(i: number): TerminalNode;
    HOUR(): TerminalNode[];
    HOUR(i: number): TerminalNode;
    MINUTE(): TerminalNode[];
    MINUTE(i: number): TerminalNode;
    SECOND(): TerminalNode[];
    SECOND(i: number): TerminalNode;
    general_element_part(): General_element_partContext | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    TO(): TerminalNode | undefined;
    UNSIGNED_INTEGER(): TerminalNode[];
    UNSIGNED_INTEGER(i: number): TerminalNode;
    COMMA(): TerminalNode | undefined;
    numeric(): NumericContext | undefined;
    DATE(): TerminalNode | undefined;
    NULL_(): TerminalNode | undefined;
    TRUE(): TerminalNode | undefined;
    FALSE(): TerminalNode | undefined;
    DBTIMEZONE(): TerminalNode | undefined;
    SESSIONTIMEZONE(): TerminalNode | undefined;
    MINVALUE(): TerminalNode | undefined;
    MAXVALUE(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class NumericContext extends ParserRuleContext {
    UNSIGNED_INTEGER(): TerminalNode | undefined;
    APPROXIMATE_NUM_LIT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Numeric_negativeContext extends ParserRuleContext {
    MINUS_SIGN(): TerminalNode;
    numeric(): NumericContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Quoted_stringContext extends ParserRuleContext {
    variable_name(): Variable_nameContext | undefined;
    CHAR_STRING(): TerminalNode | undefined;
    NATIONAL_CHAR_STRING_LIT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class IdentifierContext extends ParserRuleContext {
    id_expression(): Id_expressionContext;
    INTRODUCER(): TerminalNode | undefined;
    char_set_name(): Char_set_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Id_expressionContext extends ParserRuleContext {
    regular_id(): Regular_idContext | undefined;
    DELIMITED_ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Outer_join_signContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    PLUS_SIGN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Regular_idContext extends ParserRuleContext {
    non_reserved_keywords_pre12c(): Non_reserved_keywords_pre12cContext | undefined;
    non_reserved_keywords_in_12c(): Non_reserved_keywords_in_12cContext | undefined;
    REGULAR_ID(): TerminalNode | undefined;
    A_LETTER(): TerminalNode | undefined;
    AGENT(): TerminalNode | undefined;
    AGGREGATE(): TerminalNode | undefined;
    ANALYZE(): TerminalNode | undefined;
    AUTONOMOUS_TRANSACTION(): TerminalNode | undefined;
    BATCH(): TerminalNode | undefined;
    BINARY_INTEGER(): TerminalNode | undefined;
    BOOLEAN(): TerminalNode | undefined;
    C_LETTER(): TerminalNode | undefined;
    CHAR(): TerminalNode | undefined;
    CLUSTER(): TerminalNode | undefined;
    CONSTRUCTOR(): TerminalNode | undefined;
    CUSTOMDATUM(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    DETERMINISTIC(): TerminalNode | undefined;
    DSINTERVAL_UNCONSTRAINED(): TerminalNode | undefined;
    ERR(): TerminalNode | undefined;
    EXCEPTION(): TerminalNode | undefined;
    EXCEPTION_INIT(): TerminalNode | undefined;
    EXCEPTIONS(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    EXIT(): TerminalNode | undefined;
    FLOAT(): TerminalNode | undefined;
    FORALL(): TerminalNode | undefined;
    INDICES(): TerminalNode | undefined;
    INOUT(): TerminalNode | undefined;
    INTEGER(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    LONG(): TerminalNode | undefined;
    LOOP(): TerminalNode | undefined;
    NUMBER(): TerminalNode | undefined;
    ORADATA(): TerminalNode | undefined;
    OSERROR(): TerminalNode | undefined;
    OUT(): TerminalNode | undefined;
    OVERRIDING(): TerminalNode | undefined;
    PARALLEL_ENABLE(): TerminalNode | undefined;
    PIPELINED(): TerminalNode | undefined;
    PLS_INTEGER(): TerminalNode | undefined;
    POSITIVE(): TerminalNode | undefined;
    POSITIVEN(): TerminalNode | undefined;
    PRAGMA(): TerminalNode | undefined;
    RAISE(): TerminalNode | undefined;
    RAW(): TerminalNode | undefined;
    RECORD(): TerminalNode | undefined;
    REF(): TerminalNode | undefined;
    RENAME(): TerminalNode | undefined;
    RESTRICT_REFERENCES(): TerminalNode | undefined;
    RESULT(): TerminalNode | undefined;
    SELF(): TerminalNode | undefined;
    SERIALLY_REUSABLE(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    SIGNTYPE(): TerminalNode | undefined;
    SIMPLE_INTEGER(): TerminalNode | undefined;
    SMALLINT(): TerminalNode | undefined;
    SQLDATA(): TerminalNode | undefined;
    SQLERROR(): TerminalNode | undefined;
    SUBTYPE(): TerminalNode | undefined;
    TIMESTAMP_LTZ_UNCONSTRAINED(): TerminalNode | undefined;
    TIMESTAMP_TZ_UNCONSTRAINED(): TerminalNode | undefined;
    TIMESTAMP_UNCONSTRAINED(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    VARCHAR(): TerminalNode | undefined;
    VARCHAR2(): TerminalNode | undefined;
    VARIABLE(): TerminalNode | undefined;
    WARNING(): TerminalNode | undefined;
    WHILE(): TerminalNode | undefined;
    XMLAGG(): TerminalNode | undefined;
    YMINTERVAL_UNCONSTRAINED(): TerminalNode | undefined;
    REGR_(): TerminalNode | undefined;
    VAR_(): TerminalNode | undefined;
    COVAR_(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Non_reserved_keywords_in_12cContext extends ParserRuleContext {
    ACL(): TerminalNode | undefined;
    ACTION(): TerminalNode | undefined;
    ACTIONS(): TerminalNode | undefined;
    ACTIVE(): TerminalNode | undefined;
    ACTIVE_DATA(): TerminalNode | undefined;
    ACTIVITY(): TerminalNode | undefined;
    ADAPTIVE_PLAN(): TerminalNode | undefined;
    ADVANCED(): TerminalNode | undefined;
    AFD_DISKSTRING(): TerminalNode | undefined;
    ANOMALY(): TerminalNode | undefined;
    ANSI_REARCH(): TerminalNode | undefined;
    APPLICATION(): TerminalNode | undefined;
    APPROX_COUNT_DISTINCT(): TerminalNode | undefined;
    ARCHIVAL(): TerminalNode | undefined;
    ARCHIVED(): TerminalNode | undefined;
    ASIS(): TerminalNode | undefined;
    ASSIGN(): TerminalNode | undefined;
    AUTO_LOGIN(): TerminalNode | undefined;
    AUTO_REOPTIMIZE(): TerminalNode | undefined;
    AVRO(): TerminalNode | undefined;
    BACKGROUND(): TerminalNode | undefined;
    BATCHSIZE(): TerminalNode | undefined;
    BATCH_TABLE_ACCESS_BY_ROWID(): TerminalNode | undefined;
    BEGINNING(): TerminalNode | undefined;
    BEQUEATH(): TerminalNode | undefined;
    BITMAP_AND(): TerminalNode | undefined;
    BSON(): TerminalNode | undefined;
    CACHING(): TerminalNode | undefined;
    CALCULATED(): TerminalNode | undefined;
    CALLBACK(): TerminalNode | undefined;
    CAPACITY(): TerminalNode | undefined;
    CDBDEFAULT(): TerminalNode | undefined;
    CLASSIFIER(): TerminalNode | undefined;
    CLEANUP(): TerminalNode | undefined;
    CLIENT(): TerminalNode | undefined;
    CLUSTER_DETAILS(): TerminalNode | undefined;
    CLUSTER_DISTANCE(): TerminalNode | undefined;
    CLUSTERING(): TerminalNode | undefined;
    COMMON_DATA(): TerminalNode | undefined;
    COMPONENT(): TerminalNode | undefined;
    COMPONENTS(): TerminalNode | undefined;
    CON_DBID_TO_ID(): TerminalNode | undefined;
    CONDITION(): TerminalNode | undefined;
    CONDITIONAL(): TerminalNode | undefined;
    CON_GUID_TO_ID(): TerminalNode | undefined;
    CON_ID(): TerminalNode | undefined;
    CON_NAME_TO_ID(): TerminalNode | undefined;
    CONTAINER_DATA(): TerminalNode | undefined;
    CONTAINERS(): TerminalNode | undefined;
    CON_UID_TO_ID(): TerminalNode | undefined;
    COOKIE(): TerminalNode | undefined;
    COPY(): TerminalNode | undefined;
    CREATE_FILE_DEST(): TerminalNode | undefined;
    CREDENTIAL(): TerminalNode | undefined;
    CRITICAL(): TerminalNode | undefined;
    CUBE_AJ(): TerminalNode | undefined;
    CUBE_SJ(): TerminalNode | undefined;
    DATAMOVEMENT(): TerminalNode | undefined;
    DATAOBJ_TO_MAT_PARTITION(): TerminalNode | undefined;
    DATAPUMP(): TerminalNode | undefined;
    DATA_SECURITY_REWRITE_LIMIT(): TerminalNode | undefined;
    DAYS(): TerminalNode | undefined;
    DB_UNIQUE_NAME(): TerminalNode | undefined;
    DECORRELATE(): TerminalNode | undefined;
    DEFINE(): TerminalNode | undefined;
    DELEGATE(): TerminalNode | undefined;
    DELETE_ALL(): TerminalNode | undefined;
    DESTROY(): TerminalNode | undefined;
    DIMENSIONS(): TerminalNode | undefined;
    DISABLE_ALL(): TerminalNode | undefined;
    DISABLE_PARALLEL_DML(): TerminalNode | undefined;
    DISCARD(): TerminalNode | undefined;
    DISTRIBUTE(): TerminalNode | undefined;
    DUPLICATE(): TerminalNode | undefined;
    DV(): TerminalNode | undefined;
    EDITIONABLE(): TerminalNode | undefined;
    ELIM_GROUPBY(): TerminalNode | undefined;
    EM(): TerminalNode | undefined;
    ENABLE_ALL(): TerminalNode | undefined;
    ENABLE_PARALLEL_DML(): TerminalNode | undefined;
    EQUIPART(): TerminalNode | undefined;
    EVAL(): TerminalNode | undefined;
    EVALUATE(): TerminalNode | undefined;
    EXISTING(): TerminalNode | undefined;
    EXPRESS(): TerminalNode | undefined;
    EXTRACTCLOBXML(): TerminalNode | undefined;
    FACTOR(): TerminalNode | undefined;
    FAILOVER(): TerminalNode | undefined;
    FAILURE(): TerminalNode | undefined;
    FAMILY(): TerminalNode | undefined;
    FAR(): TerminalNode | undefined;
    FASTSTART(): TerminalNode | undefined;
    FEATURE_DETAILS(): TerminalNode | undefined;
    FETCH(): TerminalNode | undefined;
    FILE_NAME_CONVERT(): TerminalNode | undefined;
    FIXED_VIEW_DATA(): TerminalNode | undefined;
    FORMAT(): TerminalNode | undefined;
    GATHER_OPTIMIZER_STATISTICS(): TerminalNode | undefined;
    GET(): TerminalNode | undefined;
    ILM(): TerminalNode | undefined;
    INACTIVE(): TerminalNode | undefined;
    INDEXING(): TerminalNode | undefined;
    INHERIT(): TerminalNode | undefined;
    INMEMORY(): TerminalNode | undefined;
    INMEMORY_PRUNING(): TerminalNode | undefined;
    INPLACE(): TerminalNode | undefined;
    INTERLEAVED(): TerminalNode | undefined;
    JSON(): TerminalNode | undefined;
    JSON_ARRAY(): TerminalNode | undefined;
    JSON_ARRAYAGG(): TerminalNode | undefined;
    JSON_EQUAL(): TerminalNode | undefined;
    JSON_EXISTS(): TerminalNode | undefined;
    JSON_EXISTS2(): TerminalNode | undefined;
    JSONGET(): TerminalNode | undefined;
    JSON_OBJECT(): TerminalNode | undefined;
    JSON_OBJECTAGG(): TerminalNode | undefined;
    JSONPARSE(): TerminalNode | undefined;
    JSON_QUERY(): TerminalNode | undefined;
    JSON_SERIALIZE(): TerminalNode | undefined;
    JSON_TABLE(): TerminalNode | undefined;
    JSON_TEXTCONTAINS(): TerminalNode | undefined;
    JSON_TEXTCONTAINS2(): TerminalNode | undefined;
    JSON_VALUE(): TerminalNode | undefined;
    KEYSTORE(): TerminalNode | undefined;
    LABEL(): TerminalNode | undefined;
    LAX(): TerminalNode | undefined;
    LIFECYCLE(): TerminalNode | undefined;
    LINEAR(): TerminalNode | undefined;
    LOCKING(): TerminalNode | undefined;
    LOGMINING(): TerminalNode | undefined;
    MAP(): TerminalNode | undefined;
    MATCH(): TerminalNode | undefined;
    MATCHES(): TerminalNode | undefined;
    MATCH_NUMBER(): TerminalNode | undefined;
    MATCH_RECOGNIZE(): TerminalNode | undefined;
    MAX_SHARED_TEMP_SIZE(): TerminalNode | undefined;
    MEMCOMPRESS(): TerminalNode | undefined;
    METADATA(): TerminalNode | undefined;
    MODEL_NB(): TerminalNode | undefined;
    MODEL_SV(): TerminalNode | undefined;
    MODIFICATION(): TerminalNode | undefined;
    MODULE(): TerminalNode | undefined;
    MONTHS(): TerminalNode | undefined;
    MULTIDIMENSIONAL(): TerminalNode | undefined;
    NEG(): TerminalNode | undefined;
    NO_ADAPTIVE_PLAN(): TerminalNode | undefined;
    NO_ANSI_REARCH(): TerminalNode | undefined;
    NO_AUTO_REOPTIMIZE(): TerminalNode | undefined;
    NO_BATCH_TABLE_ACCESS_BY_ROWID(): TerminalNode | undefined;
    NO_CLUSTERING(): TerminalNode | undefined;
    NO_COMMON_DATA(): TerminalNode | undefined;
    NOCOPY(): TerminalNode | undefined;
    NO_DATA_SECURITY_REWRITE(): TerminalNode | undefined;
    NO_DECORRELATE(): TerminalNode | undefined;
    NO_ELIM_GROUPBY(): TerminalNode | undefined;
    NO_GATHER_OPTIMIZER_STATISTICS(): TerminalNode | undefined;
    NO_INMEMORY(): TerminalNode | undefined;
    NO_INMEMORY_PRUNING(): TerminalNode | undefined;
    NOKEEP(): TerminalNode | undefined;
    NONEDITIONABLE(): TerminalNode | undefined;
    NO_OBJECT_LINK(): TerminalNode | undefined;
    NO_PARTIAL_JOIN(): TerminalNode | undefined;
    NO_PARTIAL_ROLLUP_PUSHDOWN(): TerminalNode | undefined;
    NOPARTITION(): TerminalNode | undefined;
    NO_PQ_CONCURRENT_UNION(): TerminalNode | undefined;
    NO_PQ_REPLICATE(): TerminalNode | undefined;
    NO_PQ_SKEW(): TerminalNode | undefined;
    NO_PX_FAULT_TOLERANCE(): TerminalNode | undefined;
    NORELOCATE(): TerminalNode | undefined;
    NOREPLAY(): TerminalNode | undefined;
    NO_ROOT_SW_FOR_LOCAL(): TerminalNode | undefined;
    NO_SQL_TRANSLATION(): TerminalNode | undefined;
    NO_USE_CUBE(): TerminalNode | undefined;
    NO_USE_VECTOR_AGGREGATION(): TerminalNode | undefined;
    NO_VECTOR_TRANSFORM(): TerminalNode | undefined;
    NO_VECTOR_TRANSFORM_DIMS(): TerminalNode | undefined;
    NO_VECTOR_TRANSFORM_FACT(): TerminalNode | undefined;
    NO_ZONEMAP(): TerminalNode | undefined;
    OBJ_ID(): TerminalNode | undefined;
    OFFSET(): TerminalNode | undefined;
    OLS(): TerminalNode | undefined;
    OMIT(): TerminalNode | undefined;
    ONE(): TerminalNode | undefined;
    ORA_CHECK_ACL(): TerminalNode | undefined;
    ORA_CHECK_PRIVILEGE(): TerminalNode | undefined;
    ORA_CLUSTERING(): TerminalNode | undefined;
    ORA_INVOKING_USER(): TerminalNode | undefined;
    ORA_INVOKING_USERID(): TerminalNode | undefined;
    ORA_INVOKING_XS_USER(): TerminalNode | undefined;
    ORA_INVOKING_XS_USER_GUID(): TerminalNode | undefined;
    ORA_RAWCOMPARE(): TerminalNode | undefined;
    ORA_RAWCONCAT(): TerminalNode | undefined;
    ORA_WRITE_TIME(): TerminalNode | undefined;
    PARTIAL(): TerminalNode | undefined;
    PARTIAL_JOIN(): TerminalNode | undefined;
    PARTIAL_ROLLUP_PUSHDOWN(): TerminalNode | undefined;
    PAST(): TerminalNode | undefined;
    PATCH(): TerminalNode | undefined;
    PATH_PREFIX(): TerminalNode | undefined;
    PATTERN(): TerminalNode | undefined;
    PER(): TerminalNode | undefined;
    PERIOD(): TerminalNode | undefined;
    PERIOD_KEYWORD(): TerminalNode | undefined;
    PERMUTE(): TerminalNode | undefined;
    PLUGGABLE(): TerminalNode | undefined;
    POOL_16K(): TerminalNode | undefined;
    POOL_2K(): TerminalNode | undefined;
    POOL_32K(): TerminalNode | undefined;
    POOL_4K(): TerminalNode | undefined;
    POOL_8K(): TerminalNode | undefined;
    PQ_CONCURRENT_UNION(): TerminalNode | undefined;
    PQ_DISTRIBUTE_WINDOW(): TerminalNode | undefined;
    PQ_FILTER(): TerminalNode | undefined;
    PQ_REPLICATE(): TerminalNode | undefined;
    PQ_SKEW(): TerminalNode | undefined;
    PRELOAD(): TerminalNode | undefined;
    PRETTY(): TerminalNode | undefined;
    PREV(): TerminalNode | undefined;
    PRINTBLOBTOCLOB(): TerminalNode | undefined;
    PRIORITY(): TerminalNode | undefined;
    PRIVILEGED(): TerminalNode | undefined;
    PROXY(): TerminalNode | undefined;
    PRUNING(): TerminalNode | undefined;
    PX_FAULT_TOLERANCE(): TerminalNode | undefined;
    REALM(): TerminalNode | undefined;
    REDEFINE(): TerminalNode | undefined;
    RELOCATE(): TerminalNode | undefined;
    RESTART(): TerminalNode | undefined;
    ROLESET(): TerminalNode | undefined;
    ROWID_MAPPING_TABLE(): TerminalNode | undefined;
    RUNNING(): TerminalNode | undefined;
    SAVE(): TerminalNode | undefined;
    SCRUB(): TerminalNode | undefined;
    SDO_GEOM_MBR(): TerminalNode | undefined;
    SECRET(): TerminalNode | undefined;
    SERIAL(): TerminalNode | undefined;
    SERVICE_NAME_CONVERT(): TerminalNode | undefined;
    SERVICES(): TerminalNode | undefined;
    SHARING(): TerminalNode | undefined;
    SHELFLIFE(): TerminalNode | undefined;
    SOURCE_FILE_DIRECTORY(): TerminalNode | undefined;
    SOURCE_FILE_NAME_CONVERT(): TerminalNode | undefined;
    SQL_TRANSLATION_PROFILE(): TerminalNode | undefined;
    STANDARD_HASH(): TerminalNode | undefined;
    STANDBYS(): TerminalNode | undefined;
    STATE(): TerminalNode | undefined;
    STATEMENT(): TerminalNode | undefined;
    STREAM(): TerminalNode | undefined;
    SUBSCRIBE(): TerminalNode | undefined;
    SUBSET(): TerminalNode | undefined;
    SUCCESS(): TerminalNode | undefined;
    SYSBACKUP(): TerminalNode | undefined;
    SYS_CHECK_PRIVILEGE(): TerminalNode | undefined;
    SYSDG(): TerminalNode | undefined;
    SYS_GET_COL_ACLIDS(): TerminalNode | undefined;
    SYSGUID(): TerminalNode | undefined;
    SYSKM(): TerminalNode | undefined;
    SYS_MKXTI(): TerminalNode | undefined;
    SYSOBJ(): TerminalNode | undefined;
    SYS_OP_CYCLED_SEQ(): TerminalNode | undefined;
    SYS_OP_HASH(): TerminalNode | undefined;
    SYS_OP_KEY_VECTOR_CREATE(): TerminalNode | undefined;
    SYS_OP_KEY_VECTOR_FILTER(): TerminalNode | undefined;
    SYS_OP_KEY_VECTOR_FILTER_LIST(): TerminalNode | undefined;
    SYS_OP_KEY_VECTOR_SUCCEEDED(): TerminalNode | undefined;
    SYS_OP_KEY_VECTOR_USE(): TerminalNode | undefined;
    SYS_OP_PART_ID(): TerminalNode | undefined;
    SYS_OP_ZONE_ID(): TerminalNode | undefined;
    SYS_RAW_TO_XSID(): TerminalNode | undefined;
    SYS_XSID_TO_RAW(): TerminalNode | undefined;
    SYS_ZMAP_FILTER(): TerminalNode | undefined;
    SYS_ZMAP_REFRESH(): TerminalNode | undefined;
    TAG(): TerminalNode | undefined;
    TEXT(): TerminalNode | undefined;
    TIER(): TerminalNode | undefined;
    TIES(): TerminalNode | undefined;
    TO_ACLID(): TerminalNode | undefined;
    TRANSLATION(): TerminalNode | undefined;
    TRUST(): TerminalNode | undefined;
    UCS2(): TerminalNode | undefined;
    UNCONDITIONAL(): TerminalNode | undefined;
    UNMATCHED(): TerminalNode | undefined;
    UNPLUG(): TerminalNode | undefined;
    UNSUBSCRIBE(): TerminalNode | undefined;
    USABLE(): TerminalNode | undefined;
    USE_CUBE(): TerminalNode | undefined;
    USE_HIDDEN_PARTITIONS(): TerminalNode | undefined;
    USER_DATA(): TerminalNode | undefined;
    USER_TABLESPACES(): TerminalNode | undefined;
    USE_VECTOR_AGGREGATION(): TerminalNode | undefined;
    USING_NO_EXPAND(): TerminalNode | undefined;
    UTF16BE(): TerminalNode | undefined;
    UTF16LE(): TerminalNode | undefined;
    UTF32(): TerminalNode | undefined;
    UTF8(): TerminalNode | undefined;
    V1(): TerminalNode | undefined;
    V2(): TerminalNode | undefined;
    VALID_TIME_END(): TerminalNode | undefined;
    VECTOR_TRANSFORM(): TerminalNode | undefined;
    VECTOR_TRANSFORM_DIMS(): TerminalNode | undefined;
    VECTOR_TRANSFORM_FACT(): TerminalNode | undefined;
    VERIFIER(): TerminalNode | undefined;
    VIOLATION(): TerminalNode | undefined;
    VISIBILITY(): TerminalNode | undefined;
    WEEK(): TerminalNode | undefined;
    WEEKS(): TerminalNode | undefined;
    WITH_PLSQL(): TerminalNode | undefined;
    WRAPPER(): TerminalNode | undefined;
    XS(): TerminalNode | undefined;
    YEARS(): TerminalNode | undefined;
    ZONEMAP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Non_reserved_keywords_pre12cContext extends ParserRuleContext {
    ABORT(): TerminalNode | undefined;
    ABS(): TerminalNode | undefined;
    ACCESSED(): TerminalNode | undefined;
    ACCESS(): TerminalNode | undefined;
    ACCOUNT(): TerminalNode | undefined;
    ACOS(): TerminalNode | undefined;
    ACTIVATE(): TerminalNode | undefined;
    ACTIVE_COMPONENT(): TerminalNode | undefined;
    ACTIVE_FUNCTION(): TerminalNode | undefined;
    ACTIVE_TAG(): TerminalNode | undefined;
    ADD_COLUMN(): TerminalNode | undefined;
    ADD_GROUP(): TerminalNode | undefined;
    ADD_MONTHS(): TerminalNode | undefined;
    ADD(): TerminalNode | undefined;
    ADJ_DATE(): TerminalNode | undefined;
    ADMINISTER(): TerminalNode | undefined;
    ADMINISTRATOR(): TerminalNode | undefined;
    ADMIN(): TerminalNode | undefined;
    ADVISE(): TerminalNode | undefined;
    ADVISOR(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    ALIAS(): TerminalNode | undefined;
    ALLOCATE(): TerminalNode | undefined;
    ALLOW(): TerminalNode | undefined;
    ALL_ROWS(): TerminalNode | undefined;
    ALWAYS(): TerminalNode | undefined;
    ANALYZE(): TerminalNode | undefined;
    ANCILLARY(): TerminalNode | undefined;
    AND_EQUAL(): TerminalNode | undefined;
    ANTIJOIN(): TerminalNode | undefined;
    ANYSCHEMA(): TerminalNode | undefined;
    APPENDCHILDXML(): TerminalNode | undefined;
    APPEND(): TerminalNode | undefined;
    APPEND_VALUES(): TerminalNode | undefined;
    APPLY(): TerminalNode | undefined;
    ARCHIVELOG(): TerminalNode | undefined;
    ARCHIVE(): TerminalNode | undefined;
    ARRAY(): TerminalNode | undefined;
    ASCII(): TerminalNode | undefined;
    ASCIISTR(): TerminalNode | undefined;
    ASIN(): TerminalNode | undefined;
    ASSEMBLY(): TerminalNode | undefined;
    ASSOCIATE(): TerminalNode | undefined;
    ASYNCHRONOUS(): TerminalNode | undefined;
    ASYNC(): TerminalNode | undefined;
    ATAN2(): TerminalNode | undefined;
    ATAN(): TerminalNode | undefined;
    AT(): TerminalNode | undefined;
    ATTRIBUTE(): TerminalNode | undefined;
    ATTRIBUTES(): TerminalNode | undefined;
    AUTHENTICATED(): TerminalNode | undefined;
    AUTHENTICATION(): TerminalNode | undefined;
    AUTHID(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    AUTOALLOCATE(): TerminalNode | undefined;
    AUTOEXTEND(): TerminalNode | undefined;
    AUTOMATIC(): TerminalNode | undefined;
    AUTO(): TerminalNode | undefined;
    AVAILABILITY(): TerminalNode | undefined;
    AVG(): TerminalNode | undefined;
    BACKUP(): TerminalNode | undefined;
    BASICFILE(): TerminalNode | undefined;
    BASIC(): TerminalNode | undefined;
    BATCH(): TerminalNode | undefined;
    BECOME(): TerminalNode | undefined;
    BEFORE(): TerminalNode | undefined;
    BEGIN(): TerminalNode | undefined;
    BEGIN_OUTLINE_DATA(): TerminalNode | undefined;
    BEHALF(): TerminalNode | undefined;
    BFILE(): TerminalNode | undefined;
    BFILENAME(): TerminalNode | undefined;
    BIGFILE(): TerminalNode | undefined;
    BINARY_DOUBLE_INFINITY(): TerminalNode | undefined;
    BINARY_DOUBLE(): TerminalNode | undefined;
    BINARY_DOUBLE_NAN(): TerminalNode | undefined;
    BINARY_FLOAT_INFINITY(): TerminalNode | undefined;
    BINARY_FLOAT(): TerminalNode | undefined;
    BINARY_FLOAT_NAN(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    BIND_AWARE(): TerminalNode | undefined;
    BINDING(): TerminalNode | undefined;
    BIN_TO_NUM(): TerminalNode | undefined;
    BITAND(): TerminalNode | undefined;
    BITMAP(): TerminalNode | undefined;
    BITMAPS(): TerminalNode | undefined;
    BITMAP_TREE(): TerminalNode | undefined;
    BITS(): TerminalNode | undefined;
    BLOB(): TerminalNode | undefined;
    BLOCK(): TerminalNode | undefined;
    BLOCK_RANGE(): TerminalNode | undefined;
    BLOCKSIZE(): TerminalNode | undefined;
    BLOCKS(): TerminalNode | undefined;
    BODY(): TerminalNode | undefined;
    BOTH(): TerminalNode | undefined;
    BOUND(): TerminalNode | undefined;
    BRANCH(): TerminalNode | undefined;
    BREADTH(): TerminalNode | undefined;
    BROADCAST(): TerminalNode | undefined;
    BUFFER_CACHE(): TerminalNode | undefined;
    BUFFER(): TerminalNode | undefined;
    BUFFER_POOL(): TerminalNode | undefined;
    BUILD(): TerminalNode | undefined;
    BULK(): TerminalNode | undefined;
    BYPASS_RECURSIVE_CHECK(): TerminalNode | undefined;
    BYPASS_UJVC(): TerminalNode | undefined;
    BYTE(): TerminalNode | undefined;
    CACHE_CB(): TerminalNode | undefined;
    CACHE_INSTANCES(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    CACHE_TEMP_TABLE(): TerminalNode | undefined;
    CALL(): TerminalNode | undefined;
    CANCEL(): TerminalNode | undefined;
    CARDINALITY(): TerminalNode | undefined;
    CASCADE(): TerminalNode | undefined;
    CASE(): TerminalNode | undefined;
    CAST(): TerminalNode | undefined;
    CATEGORY(): TerminalNode | undefined;
    CEIL(): TerminalNode | undefined;
    CELL_FLASH_CACHE(): TerminalNode | undefined;
    CERTIFICATE(): TerminalNode | undefined;
    CFILE(): TerminalNode | undefined;
    CHAINED(): TerminalNode | undefined;
    CHANGE_DUPKEY_ERROR_INDEX(): TerminalNode | undefined;
    CHANGE(): TerminalNode | undefined;
    CHARACTER(): TerminalNode | undefined;
    CHAR_CS(): TerminalNode | undefined;
    CHARTOROWID(): TerminalNode | undefined;
    CHECK_ACL_REWRITE(): TerminalNode | undefined;
    CHECKPOINT(): TerminalNode | undefined;
    CHILD(): TerminalNode | undefined;
    CHOOSE(): TerminalNode | undefined;
    CHR(): TerminalNode | undefined;
    CHUNK(): TerminalNode | undefined;
    CLASS(): TerminalNode | undefined;
    CLEAR(): TerminalNode | undefined;
    CLOB(): TerminalNode | undefined;
    CLONE(): TerminalNode | undefined;
    CLOSE_CACHED_OPEN_CURSORS(): TerminalNode | undefined;
    CLOSE(): TerminalNode | undefined;
    CLUSTER_BY_ROWID(): TerminalNode | undefined;
    CLUSTER_ID(): TerminalNode | undefined;
    CLUSTERING_FACTOR(): TerminalNode | undefined;
    CLUSTER_PROBABILITY(): TerminalNode | undefined;
    CLUSTER_SET(): TerminalNode | undefined;
    COALESCE(): TerminalNode | undefined;
    COALESCE_SQ(): TerminalNode | undefined;
    COARSE(): TerminalNode | undefined;
    CO_AUTH_IND(): TerminalNode | undefined;
    COLD(): TerminalNode | undefined;
    COLLECT(): TerminalNode | undefined;
    COLUMNAR(): TerminalNode | undefined;
    COLUMN_AUTH_INDICATOR(): TerminalNode | undefined;
    COLUMN(): TerminalNode | undefined;
    COLUMNS(): TerminalNode | undefined;
    COLUMN_STATS(): TerminalNode | undefined;
    COLUMN_VALUE(): TerminalNode | undefined;
    COMMENT(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    COMMITTED(): TerminalNode | undefined;
    COMPACT(): TerminalNode | undefined;
    COMPATIBILITY(): TerminalNode | undefined;
    COMPILE(): TerminalNode | undefined;
    COMPLETE(): TerminalNode | undefined;
    COMPLIANCE(): TerminalNode | undefined;
    COMPOSE(): TerminalNode | undefined;
    COMPOSITE_LIMIT(): TerminalNode | undefined;
    COMPOSITE(): TerminalNode | undefined;
    COMPOUND(): TerminalNode | undefined;
    COMPUTE(): TerminalNode | undefined;
    CONCAT(): TerminalNode | undefined;
    CONFIRM(): TerminalNode | undefined;
    CONFORMING(): TerminalNode | undefined;
    CONNECT_BY_CB_WHR_ONLY(): TerminalNode | undefined;
    CONNECT_BY_COMBINE_SW(): TerminalNode | undefined;
    CONNECT_BY_COST_BASED(): TerminalNode | undefined;
    CONNECT_BY_ELIM_DUPS(): TerminalNode | undefined;
    CONNECT_BY_FILTERING(): TerminalNode | undefined;
    CONNECT_BY_ISCYCLE(): TerminalNode | undefined;
    CONNECT_BY_ISLEAF(): TerminalNode | undefined;
    CONNECT_BY_ROOT(): TerminalNode | undefined;
    CONNECT_TIME(): TerminalNode | undefined;
    CONSIDER(): TerminalNode | undefined;
    CONSISTENT(): TerminalNode | undefined;
    CONSTANT(): TerminalNode | undefined;
    CONST(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    CONSTRAINTS(): TerminalNode | undefined;
    CONTAINER(): TerminalNode | undefined;
    CONTENT(): TerminalNode | undefined;
    CONTENTS(): TerminalNode | undefined;
    CONTEXT(): TerminalNode | undefined;
    CONTINUE(): TerminalNode | undefined;
    CONTROLFILE(): TerminalNode | undefined;
    CONVERT(): TerminalNode | undefined;
    CORR_K(): TerminalNode | undefined;
    CORR(): TerminalNode | undefined;
    CORR_S(): TerminalNode | undefined;
    CORRUPTION(): TerminalNode | undefined;
    CORRUPT_XID_ALL(): TerminalNode | undefined;
    CORRUPT_XID(): TerminalNode | undefined;
    COSH(): TerminalNode | undefined;
    COS(): TerminalNode | undefined;
    COST(): TerminalNode | undefined;
    COST_XML_QUERY_REWRITE(): TerminalNode | undefined;
    COUNT(): TerminalNode | undefined;
    COVAR_POP(): TerminalNode | undefined;
    COVAR_SAMP(): TerminalNode | undefined;
    CPU_COSTING(): TerminalNode | undefined;
    CPU_PER_CALL(): TerminalNode | undefined;
    CPU_PER_SESSION(): TerminalNode | undefined;
    CRASH(): TerminalNode | undefined;
    CREATE_STORED_OUTLINES(): TerminalNode | undefined;
    CREATION(): TerminalNode | undefined;
    CROSSEDITION(): TerminalNode | undefined;
    CROSS(): TerminalNode | undefined;
    CSCONVERT(): TerminalNode | undefined;
    CUBE_GB(): TerminalNode | undefined;
    CUBE(): TerminalNode | undefined;
    CUME_DISTM(): TerminalNode | undefined;
    CUME_DIST(): TerminalNode | undefined;
    CURRENT_DATE(): TerminalNode | undefined;
    CURRENT(): TerminalNode | undefined;
    CURRENT_SCHEMA(): TerminalNode | undefined;
    CURRENT_TIME(): TerminalNode | undefined;
    CURRENT_TIMESTAMP(): TerminalNode | undefined;
    CURRENT_USER(): TerminalNode | undefined;
    CURRENTV(): TerminalNode | undefined;
    CURSOR(): TerminalNode | undefined;
    CURSOR_SHARING_EXACT(): TerminalNode | undefined;
    CURSOR_SPECIFIC_SEGMENT(): TerminalNode | undefined;
    CV(): TerminalNode | undefined;
    CYCLE(): TerminalNode | undefined;
    DANGLING(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    DATAFILE(): TerminalNode | undefined;
    DATAFILES(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    DATAOBJNO(): TerminalNode | undefined;
    DATAOBJ_TO_PARTITION(): TerminalNode | undefined;
    DATE_MODE(): TerminalNode | undefined;
    DAY(): TerminalNode | undefined;
    DBA(): TerminalNode | undefined;
    DBA_RECYCLEBIN(): TerminalNode | undefined;
    DBMS_STATS(): TerminalNode | undefined;
    DB_ROLE_CHANGE(): TerminalNode | undefined;
    DBTIMEZONE(): TerminalNode | undefined;
    DB_VERSION(): TerminalNode | undefined;
    DDL(): TerminalNode | undefined;
    DEALLOCATE(): TerminalNode | undefined;
    DEBUGGER(): TerminalNode | undefined;
    DEBUG(): TerminalNode | undefined;
    DECLARE(): TerminalNode | undefined;
    DEC(): TerminalNode | undefined;
    DECOMPOSE(): TerminalNode | undefined;
    DECREMENT(): TerminalNode | undefined;
    DECR(): TerminalNode | undefined;
    DECRYPT(): TerminalNode | undefined;
    DEDUPLICATE(): TerminalNode | undefined;
    DEFAULTS(): TerminalNode | undefined;
    DEFERRABLE(): TerminalNode | undefined;
    DEFERRED(): TerminalNode | undefined;
    DEFINED(): TerminalNode | undefined;
    DEFINER(): TerminalNode | undefined;
    DEGREE(): TerminalNode | undefined;
    DELAY(): TerminalNode | undefined;
    DELETEXML(): TerminalNode | undefined;
    DEMAND(): TerminalNode | undefined;
    DENSE_RANKM(): TerminalNode | undefined;
    DENSE_RANK(): TerminalNode | undefined;
    DEPENDENT(): TerminalNode | undefined;
    DEPTH(): TerminalNode | undefined;
    DEQUEUE(): TerminalNode | undefined;
    DEREF(): TerminalNode | undefined;
    DEREF_NO_REWRITE(): TerminalNode | undefined;
    DETACHED(): TerminalNode | undefined;
    DETERMINES(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    DIMENSION(): TerminalNode | undefined;
    DIRECT_LOAD(): TerminalNode | undefined;
    DIRECTORY(): TerminalNode | undefined;
    DIRECT_PATH(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    DISABLE_PRESET(): TerminalNode | undefined;
    DISABLE_RPKE(): TerminalNode | undefined;
    DISALLOW(): TerminalNode | undefined;
    DISASSOCIATE(): TerminalNode | undefined;
    DISCONNECT(): TerminalNode | undefined;
    DISKGROUP(): TerminalNode | undefined;
    DISK(): TerminalNode | undefined;
    DISKS(): TerminalNode | undefined;
    DISMOUNT(): TerminalNode | undefined;
    DISTINGUISHED(): TerminalNode | undefined;
    DISTRIBUTED(): TerminalNode | undefined;
    DML(): TerminalNode | undefined;
    DML_UPDATE(): TerminalNode | undefined;
    DOCFIDELITY(): TerminalNode | undefined;
    DOCUMENT(): TerminalNode | undefined;
    DOMAIN_INDEX_FILTER(): TerminalNode | undefined;
    DOMAIN_INDEX_NO_SORT(): TerminalNode | undefined;
    DOMAIN_INDEX_SORT(): TerminalNode | undefined;
    DOUBLE(): TerminalNode | undefined;
    DOWNGRADE(): TerminalNode | undefined;
    DRIVING_SITE(): TerminalNode | undefined;
    DROP_COLUMN(): TerminalNode | undefined;
    DROP_GROUP(): TerminalNode | undefined;
    DST_UPGRADE_INSERT_CONV(): TerminalNode | undefined;
    DUMP(): TerminalNode | undefined;
    DYNAMIC(): TerminalNode | undefined;
    DYNAMIC_SAMPLING_EST_CDN(): TerminalNode | undefined;
    DYNAMIC_SAMPLING(): TerminalNode | undefined;
    EACH(): TerminalNode | undefined;
    EDITIONING(): TerminalNode | undefined;
    EDITION(): TerminalNode | undefined;
    EDITIONS(): TerminalNode | undefined;
    ELEMENT(): TerminalNode | undefined;
    ELIMINATE_JOIN(): TerminalNode | undefined;
    ELIMINATE_OBY(): TerminalNode | undefined;
    ELIMINATE_OUTER_JOIN(): TerminalNode | undefined;
    EMPTY_BLOB(): TerminalNode | undefined;
    EMPTY_CLOB(): TerminalNode | undefined;
    EMPTY(): TerminalNode | undefined;
    ENABLE(): TerminalNode | undefined;
    ENABLE_PRESET(): TerminalNode | undefined;
    ENCODING(): TerminalNode | undefined;
    ENCRYPTION(): TerminalNode | undefined;
    ENCRYPT(): TerminalNode | undefined;
    END_OUTLINE_DATA(): TerminalNode | undefined;
    ENFORCED(): TerminalNode | undefined;
    ENFORCE(): TerminalNode | undefined;
    ENQUEUE(): TerminalNode | undefined;
    ENTERPRISE(): TerminalNode | undefined;
    ENTITYESCAPING(): TerminalNode | undefined;
    ENTRY(): TerminalNode | undefined;
    ERROR_ARGUMENT(): TerminalNode | undefined;
    ERROR(): TerminalNode | undefined;
    ERROR_ON_OVERLAP_TIME(): TerminalNode | undefined;
    ERRORS(): TerminalNode | undefined;
    ESCAPE(): TerminalNode | undefined;
    ESTIMATE(): TerminalNode | undefined;
    EVALNAME(): TerminalNode | undefined;
    EVALUATION(): TerminalNode | undefined;
    EVENTS(): TerminalNode | undefined;
    EVERY(): TerminalNode | undefined;
    EXCEPTIONS(): TerminalNode | undefined;
    EXCEPT(): TerminalNode | undefined;
    EXCHANGE(): TerminalNode | undefined;
    EXCLUDE(): TerminalNode | undefined;
    EXCLUDING(): TerminalNode | undefined;
    EXECUTE(): TerminalNode | undefined;
    EXEMPT(): TerminalNode | undefined;
    EXISTSNODE(): TerminalNode | undefined;
    EXPAND_GSET_TO_UNION(): TerminalNode | undefined;
    EXPAND_TABLE(): TerminalNode | undefined;
    EXPIRE(): TerminalNode | undefined;
    EXPLAIN(): TerminalNode | undefined;
    EXPLOSION(): TerminalNode | undefined;
    EXP(): TerminalNode | undefined;
    EXPORT(): TerminalNode | undefined;
    EXPR_CORR_CHECK(): TerminalNode | undefined;
    EXTENDS(): TerminalNode | undefined;
    EXTENT(): TerminalNode | undefined;
    EXTENTS(): TerminalNode | undefined;
    EXTERNALLY(): TerminalNode | undefined;
    EXTERNAL(): TerminalNode | undefined;
    EXTRACT(): TerminalNode | undefined;
    EXTRACTVALUE(): TerminalNode | undefined;
    EXTRA(): TerminalNode | undefined;
    FACILITY(): TerminalNode | undefined;
    FACT(): TerminalNode | undefined;
    FACTORIZE_JOIN(): TerminalNode | undefined;
    FAILED_LOGIN_ATTEMPTS(): TerminalNode | undefined;
    FAILED(): TerminalNode | undefined;
    FAILGROUP(): TerminalNode | undefined;
    FALSE(): TerminalNode | undefined;
    FAST(): TerminalNode | undefined;
    FBTSCAN(): TerminalNode | undefined;
    FEATURE_ID(): TerminalNode | undefined;
    FEATURE_SET(): TerminalNode | undefined;
    FEATURE_VALUE(): TerminalNode | undefined;
    FILE(): TerminalNode | undefined;
    FILESYSTEM_LIKE_LOGGING(): TerminalNode | undefined;
    FILTER(): TerminalNode | undefined;
    FINAL(): TerminalNode | undefined;
    FINE(): TerminalNode | undefined;
    FINISH(): TerminalNode | undefined;
    FIRSTM(): TerminalNode | undefined;
    FIRST(): TerminalNode | undefined;
    FIRST_ROWS(): TerminalNode | undefined;
    FIRST_VALUE(): TerminalNode | undefined;
    FLAGGER(): TerminalNode | undefined;
    FLASHBACK(): TerminalNode | undefined;
    FLASH_CACHE(): TerminalNode | undefined;
    FLOB(): TerminalNode | undefined;
    FLOOR(): TerminalNode | undefined;
    FLUSH(): TerminalNode | undefined;
    FOLDER(): TerminalNode | undefined;
    FOLLOWING(): TerminalNode | undefined;
    FOLLOWS(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    FORCE_XML_QUERY_REWRITE(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    FOREVER(): TerminalNode | undefined;
    FORWARD(): TerminalNode | undefined;
    FRAGMENT_NUMBER(): TerminalNode | undefined;
    FREELIST(): TerminalNode | undefined;
    FREELISTS(): TerminalNode | undefined;
    FREEPOOLS(): TerminalNode | undefined;
    FRESH(): TerminalNode | undefined;
    FROM_TZ(): TerminalNode | undefined;
    FULL(): TerminalNode | undefined;
    FULL_OUTER_JOIN_TO_OUTER(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    FUNCTIONS(): TerminalNode | undefined;
    GATHER_PLAN_STATISTICS(): TerminalNode | undefined;
    GBY_CONC_ROLLUP(): TerminalNode | undefined;
    GBY_PUSHDOWN(): TerminalNode | undefined;
    GENERATED(): TerminalNode | undefined;
    GLOBALLY(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    GLOBAL_NAME(): TerminalNode | undefined;
    GLOBAL_TOPIC_ENABLED(): TerminalNode | undefined;
    GREATEST(): TerminalNode | undefined;
    GROUP_BY(): TerminalNode | undefined;
    GROUP_ID(): TerminalNode | undefined;
    GROUPING_ID(): TerminalNode | undefined;
    GROUPING(): TerminalNode | undefined;
    GROUPS(): TerminalNode | undefined;
    GUARANTEED(): TerminalNode | undefined;
    GUARANTEE(): TerminalNode | undefined;
    GUARD(): TerminalNode | undefined;
    HASH_AJ(): TerminalNode | undefined;
    HASHKEYS(): TerminalNode | undefined;
    HASH(): TerminalNode | undefined;
    HASH_SJ(): TerminalNode | undefined;
    HEADER(): TerminalNode | undefined;
    HEAP(): TerminalNode | undefined;
    HELP(): TerminalNode | undefined;
    HEXTORAW(): TerminalNode | undefined;
    HEXTOREF(): TerminalNode | undefined;
    HIDDEN_KEYWORD(): TerminalNode | undefined;
    HIDE(): TerminalNode | undefined;
    HIERARCHY(): TerminalNode | undefined;
    HIGH(): TerminalNode | undefined;
    HINTSET_BEGIN(): TerminalNode | undefined;
    HINTSET_END(): TerminalNode | undefined;
    HOT(): TerminalNode | undefined;
    HOUR(): TerminalNode | undefined;
    HWM_BROKERED(): TerminalNode | undefined;
    HYBRID(): TerminalNode | undefined;
    IDENTIFIER(): TerminalNode | undefined;
    IDENTITY(): TerminalNode | undefined;
    IDGENERATORS(): TerminalNode | undefined;
    IDLE_TIME(): TerminalNode | undefined;
    ID(): TerminalNode | undefined;
    IF(): TerminalNode | undefined;
    IGNORE(): TerminalNode | undefined;
    IGNORE_OPTIM_EMBEDDED_HINTS(): TerminalNode | undefined;
    IGNORE_ROW_ON_DUPKEY_INDEX(): TerminalNode | undefined;
    IGNORE_WHERE_CLAUSE(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    IMPACT(): TerminalNode | undefined;
    IMPORT(): TerminalNode | undefined;
    INCLUDE(): TerminalNode | undefined;
    INCLUDE_VERSION(): TerminalNode | undefined;
    INCLUDING(): TerminalNode | undefined;
    INCREMENTAL(): TerminalNode | undefined;
    INCREMENT(): TerminalNode | undefined;
    INCR(): TerminalNode | undefined;
    INDENT(): TerminalNode | undefined;
    INDEX_ASC(): TerminalNode | undefined;
    INDEX_COMBINE(): TerminalNode | undefined;
    INDEX_DESC(): TerminalNode | undefined;
    INDEXED(): TerminalNode | undefined;
    INDEXES(): TerminalNode | undefined;
    INDEX_FFS(): TerminalNode | undefined;
    INDEX_FILTER(): TerminalNode | undefined;
    INDEX_JOIN(): TerminalNode | undefined;
    INDEX_ROWS(): TerminalNode | undefined;
    INDEX_RRS(): TerminalNode | undefined;
    INDEX_RS_ASC(): TerminalNode | undefined;
    INDEX_RS_DESC(): TerminalNode | undefined;
    INDEX_RS(): TerminalNode | undefined;
    INDEX_SCAN(): TerminalNode | undefined;
    INDEX_SKIP_SCAN(): TerminalNode | undefined;
    INDEX_SS_ASC(): TerminalNode | undefined;
    INDEX_SS_DESC(): TerminalNode | undefined;
    INDEX_SS(): TerminalNode | undefined;
    INDEX_STATS(): TerminalNode | undefined;
    INDEXTYPE(): TerminalNode | undefined;
    INDEXTYPES(): TerminalNode | undefined;
    INDICATOR(): TerminalNode | undefined;
    INFINITE(): TerminalNode | undefined;
    INFORMATIONAL(): TerminalNode | undefined;
    INITCAP(): TerminalNode | undefined;
    INITIALIZED(): TerminalNode | undefined;
    INITIALLY(): TerminalNode | undefined;
    INITIAL(): TerminalNode | undefined;
    INITRANS(): TerminalNode | undefined;
    INLINE(): TerminalNode | undefined;
    INLINE_XMLTYPE_NT(): TerminalNode | undefined;
    IN_MEMORY_METADATA(): TerminalNode | undefined;
    INNER(): TerminalNode | undefined;
    INSERTCHILDXMLAFTER(): TerminalNode | undefined;
    INSERTCHILDXMLBEFORE(): TerminalNode | undefined;
    INSERTCHILDXML(): TerminalNode | undefined;
    INSERTXMLAFTER(): TerminalNode | undefined;
    INSERTXMLBEFORE(): TerminalNode | undefined;
    INSTANCE(): TerminalNode | undefined;
    INSTANCES(): TerminalNode | undefined;
    INSTANTIABLE(): TerminalNode | undefined;
    INSTANTLY(): TerminalNode | undefined;
    INSTEAD(): TerminalNode | undefined;
    INSTR2(): TerminalNode | undefined;
    INSTR4(): TerminalNode | undefined;
    INSTRB(): TerminalNode | undefined;
    INSTRC(): TerminalNode | undefined;
    INSTR(): TerminalNode | undefined;
    INTERMEDIATE(): TerminalNode | undefined;
    INTERNAL_CONVERT(): TerminalNode | undefined;
    INTERNAL_USE(): TerminalNode | undefined;
    INTERPRETED(): TerminalNode | undefined;
    INTERVAL(): TerminalNode | undefined;
    INT(): TerminalNode | undefined;
    INVALIDATE(): TerminalNode | undefined;
    INVISIBLE(): TerminalNode | undefined;
    IN_XQUERY(): TerminalNode | undefined;
    ISOLATION_LEVEL(): TerminalNode | undefined;
    ISOLATION(): TerminalNode | undefined;
    ITERATE(): TerminalNode | undefined;
    ITERATION_NUMBER(): TerminalNode | undefined;
    JAVA(): TerminalNode | undefined;
    JOB(): TerminalNode | undefined;
    JOIN(): TerminalNode | undefined;
    KEEP_DUPLICATES(): TerminalNode | undefined;
    KEEP(): TerminalNode | undefined;
    KERBEROS(): TerminalNode | undefined;
    KEY_LENGTH(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    KEYSIZE(): TerminalNode | undefined;
    KEYS(): TerminalNode | undefined;
    KILL(): TerminalNode | undefined;
    LAG(): TerminalNode | undefined;
    LAST_DAY(): TerminalNode | undefined;
    LAST(): TerminalNode | undefined;
    LAST_VALUE(): TerminalNode | undefined;
    LATERAL(): TerminalNode | undefined;
    LAYER(): TerminalNode | undefined;
    LDAP_REGISTRATION_ENABLED(): TerminalNode | undefined;
    LDAP_REGISTRATION(): TerminalNode | undefined;
    LDAP_REG_SYNC_INTERVAL(): TerminalNode | undefined;
    LEADING(): TerminalNode | undefined;
    LEAD(): TerminalNode | undefined;
    LEAST(): TerminalNode | undefined;
    LEFT(): TerminalNode | undefined;
    LENGTH2(): TerminalNode | undefined;
    LENGTH4(): TerminalNode | undefined;
    LENGTHB(): TerminalNode | undefined;
    LENGTHC(): TerminalNode | undefined;
    LENGTH(): TerminalNode | undefined;
    LESS(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    LEVELS(): TerminalNode | undefined;
    LIBRARY(): TerminalNode | undefined;
    LIFE(): TerminalNode | undefined;
    LIFETIME(): TerminalNode | undefined;
    LIKE2(): TerminalNode | undefined;
    LIKE4(): TerminalNode | undefined;
    LIKEC(): TerminalNode | undefined;
    LIKE_EXPAND(): TerminalNode | undefined;
    LIMIT(): TerminalNode | undefined;
    LINK(): TerminalNode | undefined;
    LISTAGG(): TerminalNode | undefined;
    LIST(): TerminalNode | undefined;
    LN(): TerminalNode | undefined;
    LNNVL(): TerminalNode | undefined;
    LOAD(): TerminalNode | undefined;
    LOB(): TerminalNode | undefined;
    LOBNVL(): TerminalNode | undefined;
    LOBS(): TerminalNode | undefined;
    LOCAL_INDEXES(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    LOCALTIME(): TerminalNode | undefined;
    LOCALTIMESTAMP(): TerminalNode | undefined;
    LOCATION(): TerminalNode | undefined;
    LOCATOR(): TerminalNode | undefined;
    LOCKED(): TerminalNode | undefined;
    LOGFILE(): TerminalNode | undefined;
    LOGFILES(): TerminalNode | undefined;
    LOGGING(): TerminalNode | undefined;
    LOGICAL(): TerminalNode | undefined;
    LOGICAL_READS_PER_CALL(): TerminalNode | undefined;
    LOGICAL_READS_PER_SESSION(): TerminalNode | undefined;
    LOG(): TerminalNode | undefined;
    LOGOFF(): TerminalNode | undefined;
    LOGON(): TerminalNode | undefined;
    LOG_READ_ONLY_VIOLATIONS(): TerminalNode | undefined;
    LOWER(): TerminalNode | undefined;
    LOW(): TerminalNode | undefined;
    LPAD(): TerminalNode | undefined;
    LTRIM(): TerminalNode | undefined;
    MAIN(): TerminalNode | undefined;
    MAKE_REF(): TerminalNode | undefined;
    MANAGED(): TerminalNode | undefined;
    MANAGEMENT(): TerminalNode | undefined;
    MANAGE(): TerminalNode | undefined;
    MANAGER(): TerminalNode | undefined;
    MANUAL(): TerminalNode | undefined;
    MAPPING(): TerminalNode | undefined;
    MASTER(): TerminalNode | undefined;
    MATCHED(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    MATERIALIZE(): TerminalNode | undefined;
    MAXARCHLOGS(): TerminalNode | undefined;
    MAXDATAFILES(): TerminalNode | undefined;
    MAXEXTENTS(): TerminalNode | undefined;
    MAXIMIZE(): TerminalNode | undefined;
    MAXINSTANCES(): TerminalNode | undefined;
    MAXLOGFILES(): TerminalNode | undefined;
    MAXLOGHISTORY(): TerminalNode | undefined;
    MAXLOGMEMBERS(): TerminalNode | undefined;
    MAX(): TerminalNode | undefined;
    MAXSIZE(): TerminalNode | undefined;
    MAXTRANS(): TerminalNode | undefined;
    MAXVALUE(): TerminalNode | undefined;
    MEASURE(): TerminalNode | undefined;
    MEASURES(): TerminalNode | undefined;
    MEDIAN(): TerminalNode | undefined;
    MEDIUM(): TerminalNode | undefined;
    MEMBER(): TerminalNode | undefined;
    MEMORY(): TerminalNode | undefined;
    MERGEACTIONS(): TerminalNode | undefined;
    MERGE_AJ(): TerminalNode | undefined;
    MERGE_CONST_ON(): TerminalNode | undefined;
    MERGE(): TerminalNode | undefined;
    MERGE_SJ(): TerminalNode | undefined;
    METHOD(): TerminalNode | undefined;
    MIGRATE(): TerminalNode | undefined;
    MIGRATION(): TerminalNode | undefined;
    MINEXTENTS(): TerminalNode | undefined;
    MINIMIZE(): TerminalNode | undefined;
    MINIMUM(): TerminalNode | undefined;
    MINING(): TerminalNode | undefined;
    MIN(): TerminalNode | undefined;
    MINUS_NULL(): TerminalNode | undefined;
    MINUTE(): TerminalNode | undefined;
    MINVALUE(): TerminalNode | undefined;
    MIRRORCOLD(): TerminalNode | undefined;
    MIRRORHOT(): TerminalNode | undefined;
    MIRROR(): TerminalNode | undefined;
    MLSLABEL(): TerminalNode | undefined;
    MODEL_COMPILE_SUBQUERY(): TerminalNode | undefined;
    MODEL_DONTVERIFY_UNIQUENESS(): TerminalNode | undefined;
    MODEL_DYNAMIC_SUBQUERY(): TerminalNode | undefined;
    MODEL_MIN_ANALYSIS(): TerminalNode | undefined;
    MODEL(): TerminalNode | undefined;
    MODEL_NO_ANALYSIS(): TerminalNode | undefined;
    MODEL_PBY(): TerminalNode | undefined;
    MODEL_PUSH_REF(): TerminalNode | undefined;
    MODIFY_COLUMN_TYPE(): TerminalNode | undefined;
    MODIFY(): TerminalNode | undefined;
    MOD(): TerminalNode | undefined;
    MONITORING(): TerminalNode | undefined;
    MONITOR(): TerminalNode | undefined;
    MONTH(): TerminalNode | undefined;
    MONTHS_BETWEEN(): TerminalNode | undefined;
    MOUNT(): TerminalNode | undefined;
    MOUNTPATH(): TerminalNode | undefined;
    MOVEMENT(): TerminalNode | undefined;
    MOVE(): TerminalNode | undefined;
    MULTISET(): TerminalNode | undefined;
    MV_MERGE(): TerminalNode | undefined;
    NAMED(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    NAMESPACE(): TerminalNode | undefined;
    NAN(): TerminalNode | undefined;
    NANVL(): TerminalNode | undefined;
    NATIONAL(): TerminalNode | undefined;
    NATIVE_FULL_OUTER_JOIN(): TerminalNode | undefined;
    NATIVE(): TerminalNode | undefined;
    NATURAL(): TerminalNode | undefined;
    NAV(): TerminalNode | undefined;
    NCHAR_CS(): TerminalNode | undefined;
    NCHAR(): TerminalNode | undefined;
    NCHR(): TerminalNode | undefined;
    NCLOB(): TerminalNode | undefined;
    NEEDED(): TerminalNode | undefined;
    NESTED(): TerminalNode | undefined;
    NESTED_TABLE_FAST_INSERT(): TerminalNode | undefined;
    NESTED_TABLE_GET_REFS(): TerminalNode | undefined;
    NESTED_TABLE_ID(): TerminalNode | undefined;
    NESTED_TABLE_SET_REFS(): TerminalNode | undefined;
    NESTED_TABLE_SET_SETID(): TerminalNode | undefined;
    NETWORK(): TerminalNode | undefined;
    NEVER(): TerminalNode | undefined;
    NEW(): TerminalNode | undefined;
    NEW_TIME(): TerminalNode | undefined;
    NEXT_DAY(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    NL_AJ(): TerminalNode | undefined;
    NLJ_BATCHING(): TerminalNode | undefined;
    NLJ_INDEX_FILTER(): TerminalNode | undefined;
    NLJ_INDEX_SCAN(): TerminalNode | undefined;
    NLJ_PREFETCH(): TerminalNode | undefined;
    NLS_CALENDAR(): TerminalNode | undefined;
    NLS_CHARACTERSET(): TerminalNode | undefined;
    NLS_CHARSET_DECL_LEN(): TerminalNode | undefined;
    NLS_CHARSET_ID(): TerminalNode | undefined;
    NLS_CHARSET_NAME(): TerminalNode | undefined;
    NLS_COMP(): TerminalNode | undefined;
    NLS_CURRENCY(): TerminalNode | undefined;
    NLS_DATE_FORMAT(): TerminalNode | undefined;
    NLS_DATE_LANGUAGE(): TerminalNode | undefined;
    NLS_INITCAP(): TerminalNode | undefined;
    NLS_ISO_CURRENCY(): TerminalNode | undefined;
    NL_SJ(): TerminalNode | undefined;
    NLS_LANG(): TerminalNode | undefined;
    NLS_LANGUAGE(): TerminalNode | undefined;
    NLS_LENGTH_SEMANTICS(): TerminalNode | undefined;
    NLS_LOWER(): TerminalNode | undefined;
    NLS_NCHAR_CONV_EXCP(): TerminalNode | undefined;
    NLS_NUMERIC_CHARACTERS(): TerminalNode | undefined;
    NLS_SORT(): TerminalNode | undefined;
    NLSSORT(): TerminalNode | undefined;
    NLS_SPECIAL_CHARS(): TerminalNode | undefined;
    NLS_TERRITORY(): TerminalNode | undefined;
    NLS_UPPER(): TerminalNode | undefined;
    NO_ACCESS(): TerminalNode | undefined;
    NOAPPEND(): TerminalNode | undefined;
    NOARCHIVELOG(): TerminalNode | undefined;
    NOAUDIT(): TerminalNode | undefined;
    NO_BASETABLE_MULTIMV_REWRITE(): TerminalNode | undefined;
    NO_BIND_AWARE(): TerminalNode | undefined;
    NO_BUFFER(): TerminalNode | undefined;
    NOCACHE(): TerminalNode | undefined;
    NO_CARTESIAN(): TerminalNode | undefined;
    NO_CHECK_ACL_REWRITE(): TerminalNode | undefined;
    NO_CLUSTER_BY_ROWID(): TerminalNode | undefined;
    NO_COALESCE_SQ(): TerminalNode | undefined;
    NO_CONNECT_BY_CB_WHR_ONLY(): TerminalNode | undefined;
    NO_CONNECT_BY_COMBINE_SW(): TerminalNode | undefined;
    NO_CONNECT_BY_COST_BASED(): TerminalNode | undefined;
    NO_CONNECT_BY_ELIM_DUPS(): TerminalNode | undefined;
    NO_CONNECT_BY_FILTERING(): TerminalNode | undefined;
    NO_COST_XML_QUERY_REWRITE(): TerminalNode | undefined;
    NO_CPU_COSTING(): TerminalNode | undefined;
    NOCPU_COSTING(): TerminalNode | undefined;
    NOCYCLE(): TerminalNode | undefined;
    NODELAY(): TerminalNode | undefined;
    NO_DOMAIN_INDEX_FILTER(): TerminalNode | undefined;
    NO_DST_UPGRADE_INSERT_CONV(): TerminalNode | undefined;
    NO_ELIMINATE_JOIN(): TerminalNode | undefined;
    NO_ELIMINATE_OBY(): TerminalNode | undefined;
    NO_ELIMINATE_OUTER_JOIN(): TerminalNode | undefined;
    NOENTITYESCAPING(): TerminalNode | undefined;
    NO_EXPAND_GSET_TO_UNION(): TerminalNode | undefined;
    NO_EXPAND(): TerminalNode | undefined;
    NO_EXPAND_TABLE(): TerminalNode | undefined;
    NO_FACT(): TerminalNode | undefined;
    NO_FACTORIZE_JOIN(): TerminalNode | undefined;
    NO_FILTERING(): TerminalNode | undefined;
    NOFORCE(): TerminalNode | undefined;
    NO_FULL_OUTER_JOIN_TO_OUTER(): TerminalNode | undefined;
    NO_GBY_PUSHDOWN(): TerminalNode | undefined;
    NOGUARANTEE(): TerminalNode | undefined;
    NO_INDEX_FFS(): TerminalNode | undefined;
    NO_INDEX(): TerminalNode | undefined;
    NO_INDEX_SS(): TerminalNode | undefined;
    NO_LOAD(): TerminalNode | undefined;
    NOLOCAL(): TerminalNode | undefined;
    NOLOGGING(): TerminalNode | undefined;
    NOMAPPING(): TerminalNode | undefined;
    NOMAXVALUE(): TerminalNode | undefined;
    NO_MERGE(): TerminalNode | undefined;
    NOMINIMIZE(): TerminalNode | undefined;
    NOMINVALUE(): TerminalNode | undefined;
    NO_MODEL_PUSH_REF(): TerminalNode | undefined;
    NO_MONITORING(): TerminalNode | undefined;
    NOMONITORING(): TerminalNode | undefined;
    NO_MONITOR(): TerminalNode | undefined;
    NO_MULTIMV_REWRITE(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    NO_NATIVE_FULL_OUTER_JOIN(): TerminalNode | undefined;
    NONBLOCKING(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    NO_NLJ_BATCHING(): TerminalNode | undefined;
    NO_NLJ_PREFETCH(): TerminalNode | undefined;
    NONSCHEMA(): TerminalNode | undefined;
    NOORDER(): TerminalNode | undefined;
    NO_ORDER_ROLLUPS(): TerminalNode | undefined;
    NO_OUTER_JOIN_TO_ANTI(): TerminalNode | undefined;
    NO_OUTER_JOIN_TO_INNER(): TerminalNode | undefined;
    NOOVERRIDE(): TerminalNode | undefined;
    NO_PARALLEL_INDEX(): TerminalNode | undefined;
    NOPARALLEL_INDEX(): TerminalNode | undefined;
    NO_PARALLEL(): TerminalNode | undefined;
    NOPARALLEL(): TerminalNode | undefined;
    NO_PARTIAL_COMMIT(): TerminalNode | undefined;
    NO_PLACE_DISTINCT(): TerminalNode | undefined;
    NO_PLACE_GROUP_BY(): TerminalNode | undefined;
    NO_PQ_MAP(): TerminalNode | undefined;
    NO_PRUNE_GSETS(): TerminalNode | undefined;
    NO_PULL_PRED(): TerminalNode | undefined;
    NO_PUSH_PRED(): TerminalNode | undefined;
    NO_PUSH_SUBQ(): TerminalNode | undefined;
    NO_PX_JOIN_FILTER(): TerminalNode | undefined;
    NO_QKN_BUFF(): TerminalNode | undefined;
    NO_QUERY_TRANSFORMATION(): TerminalNode | undefined;
    NO_REF_CASCADE(): TerminalNode | undefined;
    NORELY(): TerminalNode | undefined;
    NOREPAIR(): TerminalNode | undefined;
    NORESETLOGS(): TerminalNode | undefined;
    NO_RESULT_CACHE(): TerminalNode | undefined;
    NOREVERSE(): TerminalNode | undefined;
    NO_REWRITE(): TerminalNode | undefined;
    NOREWRITE(): TerminalNode | undefined;
    NORMAL(): TerminalNode | undefined;
    NOROWDEPENDENCIES(): TerminalNode | undefined;
    NOSCHEMACHECK(): TerminalNode | undefined;
    NOSEGMENT(): TerminalNode | undefined;
    NO_SEMIJOIN(): TerminalNode | undefined;
    NO_SEMI_TO_INNER(): TerminalNode | undefined;
    NO_SET_TO_JOIN(): TerminalNode | undefined;
    NOSORT(): TerminalNode | undefined;
    NO_SQL_TUNE(): TerminalNode | undefined;
    NO_STAR_TRANSFORMATION(): TerminalNode | undefined;
    NO_STATEMENT_QUEUING(): TerminalNode | undefined;
    NO_STATS_GSETS(): TerminalNode | undefined;
    NOSTRICT(): TerminalNode | undefined;
    NO_SUBQUERY_PRUNING(): TerminalNode | undefined;
    NO_SUBSTRB_PAD(): TerminalNode | undefined;
    NO_SWAP_JOIN_INPUTS(): TerminalNode | undefined;
    NOSWITCH(): TerminalNode | undefined;
    NO_TABLE_LOOKUP_BY_NL(): TerminalNode | undefined;
    NO_TEMP_TABLE(): TerminalNode | undefined;
    NOTHING(): TerminalNode | undefined;
    NOTIFICATION(): TerminalNode | undefined;
    NO_TRANSFORM_DISTINCT_AGG(): TerminalNode | undefined;
    NO_UNNEST(): TerminalNode | undefined;
    NO_USE_HASH_AGGREGATION(): TerminalNode | undefined;
    NO_USE_HASH_GBY_FOR_PUSHDOWN(): TerminalNode | undefined;
    NO_USE_HASH(): TerminalNode | undefined;
    NO_USE_INVISIBLE_INDEXES(): TerminalNode | undefined;
    NO_USE_MERGE(): TerminalNode | undefined;
    NO_USE_NL(): TerminalNode | undefined;
    NOVALIDATE(): TerminalNode | undefined;
    NO_XDB_FASTPATH_INSERT(): TerminalNode | undefined;
    NO_XML_DML_REWRITE(): TerminalNode | undefined;
    NO_XMLINDEX_REWRITE_IN_SELECT(): TerminalNode | undefined;
    NO_XMLINDEX_REWRITE(): TerminalNode | undefined;
    NO_XML_QUERY_REWRITE(): TerminalNode | undefined;
    NTH_VALUE(): TerminalNode | undefined;
    NTILE(): TerminalNode | undefined;
    NULLIF(): TerminalNode | undefined;
    NULLS(): TerminalNode | undefined;
    NUMERIC(): TerminalNode | undefined;
    NUM_INDEX_KEYS(): TerminalNode | undefined;
    NUMTODSINTERVAL(): TerminalNode | undefined;
    NUMTOYMINTERVAL(): TerminalNode | undefined;
    NVARCHAR2(): TerminalNode | undefined;
    NVL2(): TerminalNode | undefined;
    NVL(): TerminalNode | undefined;
    OBJECT2XML(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    OBJNO(): TerminalNode | undefined;
    OBJNO_REUSE(): TerminalNode | undefined;
    OCCURENCES(): TerminalNode | undefined;
    OFFLINE(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    OIDINDEX(): TerminalNode | undefined;
    OID(): TerminalNode | undefined;
    OLAP(): TerminalNode | undefined;
    OLD(): TerminalNode | undefined;
    OLD_PUSH_PRED(): TerminalNode | undefined;
    OLTP(): TerminalNode | undefined;
    ONLINE(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    OPAQUE(): TerminalNode | undefined;
    OPAQUE_TRANSFORM(): TerminalNode | undefined;
    OPAQUE_XCANONICAL(): TerminalNode | undefined;
    OPCODE(): TerminalNode | undefined;
    OPEN(): TerminalNode | undefined;
    OPERATIONS(): TerminalNode | undefined;
    OPERATOR(): TerminalNode | undefined;
    OPT_ESTIMATE(): TerminalNode | undefined;
    OPTIMAL(): TerminalNode | undefined;
    OPTIMIZE(): TerminalNode | undefined;
    OPTIMIZER_FEATURES_ENABLE(): TerminalNode | undefined;
    OPTIMIZER_GOAL(): TerminalNode | undefined;
    OPT_PARAM(): TerminalNode | undefined;
    ORA_BRANCH(): TerminalNode | undefined;
    ORADEBUG(): TerminalNode | undefined;
    ORA_DST_AFFECTED(): TerminalNode | undefined;
    ORA_DST_CONVERT(): TerminalNode | undefined;
    ORA_DST_ERROR(): TerminalNode | undefined;
    ORA_GET_ACLIDS(): TerminalNode | undefined;
    ORA_GET_PRIVILEGES(): TerminalNode | undefined;
    ORA_HASH(): TerminalNode | undefined;
    ORA_ROWSCN(): TerminalNode | undefined;
    ORA_ROWSCN_RAW(): TerminalNode | undefined;
    ORA_ROWVERSION(): TerminalNode | undefined;
    ORA_TABVERSION(): TerminalNode | undefined;
    ORDERED(): TerminalNode | undefined;
    ORDERED_PREDICATES(): TerminalNode | undefined;
    ORDINALITY(): TerminalNode | undefined;
    OR_EXPAND(): TerminalNode | undefined;
    ORGANIZATION(): TerminalNode | undefined;
    OR_PREDICATES(): TerminalNode | undefined;
    OTHER(): TerminalNode | undefined;
    OUTER_JOIN_TO_ANTI(): TerminalNode | undefined;
    OUTER_JOIN_TO_INNER(): TerminalNode | undefined;
    OUTER(): TerminalNode | undefined;
    OUTLINE_LEAF(): TerminalNode | undefined;
    OUTLINE(): TerminalNode | undefined;
    OUT_OF_LINE(): TerminalNode | undefined;
    OVERFLOW(): TerminalNode | undefined;
    OVERFLOW_NOMOVE(): TerminalNode | undefined;
    OVERLAPS(): TerminalNode | undefined;
    OVER(): TerminalNode | undefined;
    OWNER(): TerminalNode | undefined;
    OWNERSHIP(): TerminalNode | undefined;
    OWN(): TerminalNode | undefined;
    PACKAGE(): TerminalNode | undefined;
    PACKAGES(): TerminalNode | undefined;
    PARALLEL_INDEX(): TerminalNode | undefined;
    PARALLEL(): TerminalNode | undefined;
    PARAMETERS(): TerminalNode | undefined;
    PARAM(): TerminalNode | undefined;
    PARENT(): TerminalNode | undefined;
    PARITY(): TerminalNode | undefined;
    PARTIALLY(): TerminalNode | undefined;
    PARTITION_HASH(): TerminalNode | undefined;
    PARTITION_LIST(): TerminalNode | undefined;
    PARTITION(): TerminalNode | undefined;
    PARTITION_RANGE(): TerminalNode | undefined;
    PARTITIONS(): TerminalNode | undefined;
    PARTNUMINST(): TerminalNode | undefined;
    PASSING(): TerminalNode | undefined;
    PASSWORD_GRACE_TIME(): TerminalNode | undefined;
    PASSWORD_LIFE_TIME(): TerminalNode | undefined;
    PASSWORD_LOCK_TIME(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    PASSWORD_REUSE_MAX(): TerminalNode | undefined;
    PASSWORD_REUSE_TIME(): TerminalNode | undefined;
    PASSWORD_VERIFY_FUNCTION(): TerminalNode | undefined;
    PATH(): TerminalNode | undefined;
    PATHS(): TerminalNode | undefined;
    PBL_HS_BEGIN(): TerminalNode | undefined;
    PBL_HS_END(): TerminalNode | undefined;
    PCTINCREASE(): TerminalNode | undefined;
    PCTTHRESHOLD(): TerminalNode | undefined;
    PCTUSED(): TerminalNode | undefined;
    PCTVERSION(): TerminalNode | undefined;
    PENDING(): TerminalNode | undefined;
    PERCENTILE_CONT(): TerminalNode | undefined;
    PERCENTILE_DISC(): TerminalNode | undefined;
    PERCENT_KEYWORD(): TerminalNode | undefined;
    PERCENT_RANKM(): TerminalNode | undefined;
    PERCENT_RANK(): TerminalNode | undefined;
    PERFORMANCE(): TerminalNode | undefined;
    PERMANENT(): TerminalNode | undefined;
    PERMISSION(): TerminalNode | undefined;
    PFILE(): TerminalNode | undefined;
    PHYSICAL(): TerminalNode | undefined;
    PIKEY(): TerminalNode | undefined;
    PIV_GB(): TerminalNode | undefined;
    PIVOT(): TerminalNode | undefined;
    PIV_SSF(): TerminalNode | undefined;
    PLACE_DISTINCT(): TerminalNode | undefined;
    PLACE_GROUP_BY(): TerminalNode | undefined;
    PLAN(): TerminalNode | undefined;
    PLSCOPE_SETTINGS(): TerminalNode | undefined;
    PLSQL_CCFLAGS(): TerminalNode | undefined;
    PLSQL_CODE_TYPE(): TerminalNode | undefined;
    PLSQL_DEBUG(): TerminalNode | undefined;
    PLSQL_OPTIMIZE_LEVEL(): TerminalNode | undefined;
    PLSQL_WARNINGS(): TerminalNode | undefined;
    POINT(): TerminalNode | undefined;
    POLICY(): TerminalNode | undefined;
    POST_TRANSACTION(): TerminalNode | undefined;
    POWERMULTISET_BY_CARDINALITY(): TerminalNode | undefined;
    POWERMULTISET(): TerminalNode | undefined;
    POWER(): TerminalNode | undefined;
    PQ_DISTRIBUTE(): TerminalNode | undefined;
    PQ_MAP(): TerminalNode | undefined;
    PQ_NOMAP(): TerminalNode | undefined;
    PREBUILT(): TerminalNode | undefined;
    PRECEDES(): TerminalNode | undefined;
    PRECEDING(): TerminalNode | undefined;
    PRECISION(): TerminalNode | undefined;
    PRECOMPUTE_SUBQUERY(): TerminalNode | undefined;
    PREDICATE_REORDERS(): TerminalNode | undefined;
    PREDICTION_BOUNDS(): TerminalNode | undefined;
    PREDICTION_COST(): TerminalNode | undefined;
    PREDICTION_DETAILS(): TerminalNode | undefined;
    PREDICTION(): TerminalNode | undefined;
    PREDICTION_PROBABILITY(): TerminalNode | undefined;
    PREDICTION_SET(): TerminalNode | undefined;
    PREPARE(): TerminalNode | undefined;
    PRESENT(): TerminalNode | undefined;
    PRESENTNNV(): TerminalNode | undefined;
    PRESENTV(): TerminalNode | undefined;
    PRESERVE(): TerminalNode | undefined;
    PRESERVE_OID(): TerminalNode | undefined;
    PREVIOUS(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    PRIVATE(): TerminalNode | undefined;
    PRIVATE_SGA(): TerminalNode | undefined;
    PRIVILEGE(): TerminalNode | undefined;
    PRIVILEGES(): TerminalNode | undefined;
    PROCEDURAL(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    PROCESS(): TerminalNode | undefined;
    PROFILE(): TerminalNode | undefined;
    PROGRAM(): TerminalNode | undefined;
    PROJECT(): TerminalNode | undefined;
    PROPAGATE(): TerminalNode | undefined;
    PROTECTED(): TerminalNode | undefined;
    PROTECTION(): TerminalNode | undefined;
    PULL_PRED(): TerminalNode | undefined;
    PURGE(): TerminalNode | undefined;
    PUSH_PRED(): TerminalNode | undefined;
    PUSH_SUBQ(): TerminalNode | undefined;
    PX_GRANULE(): TerminalNode | undefined;
    PX_JOIN_FILTER(): TerminalNode | undefined;
    QB_NAME(): TerminalNode | undefined;
    QUERY_BLOCK(): TerminalNode | undefined;
    QUERY(): TerminalNode | undefined;
    QUEUE_CURR(): TerminalNode | undefined;
    QUEUE(): TerminalNode | undefined;
    QUEUE_ROWP(): TerminalNode | undefined;
    QUIESCE(): TerminalNode | undefined;
    QUORUM(): TerminalNode | undefined;
    QUOTA(): TerminalNode | undefined;
    RANDOM_LOCAL(): TerminalNode | undefined;
    RANDOM(): TerminalNode | undefined;
    RANGE(): TerminalNode | undefined;
    RANKM(): TerminalNode | undefined;
    RANK(): TerminalNode | undefined;
    RAPIDLY(): TerminalNode | undefined;
    RATIO_TO_REPORT(): TerminalNode | undefined;
    RAWTOHEX(): TerminalNode | undefined;
    RAWTONHEX(): TerminalNode | undefined;
    RBA(): TerminalNode | undefined;
    RBO_OUTLINE(): TerminalNode | undefined;
    RDBA(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    READS(): TerminalNode | undefined;
    REAL(): TerminalNode | undefined;
    REBALANCE(): TerminalNode | undefined;
    REBUILD(): TerminalNode | undefined;
    RECORDS_PER_BLOCK(): TerminalNode | undefined;
    RECOVERABLE(): TerminalNode | undefined;
    RECOVER(): TerminalNode | undefined;
    RECOVERY(): TerminalNode | undefined;
    RECYCLEBIN(): TerminalNode | undefined;
    RECYCLE(): TerminalNode | undefined;
    REDACTION(): TerminalNode | undefined;
    REDO(): TerminalNode | undefined;
    REDUCED(): TerminalNode | undefined;
    REDUNDANCY(): TerminalNode | undefined;
    REF_CASCADE_CURSOR(): TerminalNode | undefined;
    REFERENCED(): TerminalNode | undefined;
    REFERENCE(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    REFERENCING(): TerminalNode | undefined;
    REF(): TerminalNode | undefined;
    REFRESH(): TerminalNode | undefined;
    REFTOHEX(): TerminalNode | undefined;
    REGEXP_COUNT(): TerminalNode | undefined;
    REGEXP_INSTR(): TerminalNode | undefined;
    REGEXP_LIKE(): TerminalNode | undefined;
    REGEXP_REPLACE(): TerminalNode | undefined;
    REGEXP_SUBSTR(): TerminalNode | undefined;
    REGISTER(): TerminalNode | undefined;
    REGR_AVGX(): TerminalNode | undefined;
    REGR_AVGY(): TerminalNode | undefined;
    REGR_COUNT(): TerminalNode | undefined;
    REGR_INTERCEPT(): TerminalNode | undefined;
    REGR_R2(): TerminalNode | undefined;
    REGR_SLOPE(): TerminalNode | undefined;
    REGR_SXX(): TerminalNode | undefined;
    REGR_SXY(): TerminalNode | undefined;
    REGR_SYY(): TerminalNode | undefined;
    REGULAR(): TerminalNode | undefined;
    REJECT(): TerminalNode | undefined;
    REKEY(): TerminalNode | undefined;
    RELATIONAL(): TerminalNode | undefined;
    RELY(): TerminalNode | undefined;
    REMAINDER(): TerminalNode | undefined;
    REMOTE_MAPPED(): TerminalNode | undefined;
    REMOVE(): TerminalNode | undefined;
    REPAIR(): TerminalNode | undefined;
    REPEAT(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    REPLICATION(): TerminalNode | undefined;
    REQUIRED(): TerminalNode | undefined;
    RESETLOGS(): TerminalNode | undefined;
    RESET(): TerminalNode | undefined;
    RESIZE(): TerminalNode | undefined;
    RESOLVE(): TerminalNode | undefined;
    RESOLVER(): TerminalNode | undefined;
    RESPECT(): TerminalNode | undefined;
    RESTORE_AS_INTERVALS(): TerminalNode | undefined;
    RESTORE(): TerminalNode | undefined;
    RESTRICT_ALL_REF_CONS(): TerminalNode | undefined;
    RESTRICTED(): TerminalNode | undefined;
    RESTRICT(): TerminalNode | undefined;
    RESULT_CACHE(): TerminalNode | undefined;
    RESUMABLE(): TerminalNode | undefined;
    RESUME(): TerminalNode | undefined;
    RETENTION(): TerminalNode | undefined;
    RETRY_ON_ROW_CHANGE(): TerminalNode | undefined;
    RETURNING(): TerminalNode | undefined;
    RETURN(): TerminalNode | undefined;
    REUSE(): TerminalNode | undefined;
    REVERSE(): TerminalNode | undefined;
    REWRITE(): TerminalNode | undefined;
    REWRITE_OR_ERROR(): TerminalNode | undefined;
    RIGHT(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    ROLES(): TerminalNode | undefined;
    ROLLBACK(): TerminalNode | undefined;
    ROLLING(): TerminalNode | undefined;
    ROLLUP(): TerminalNode | undefined;
    ROUND(): TerminalNode | undefined;
    ROWDEPENDENCIES(): TerminalNode | undefined;
    ROWID(): TerminalNode | undefined;
    ROWIDTOCHAR(): TerminalNode | undefined;
    ROWIDTONCHAR(): TerminalNode | undefined;
    ROW_LENGTH(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    ROW_NUMBER(): TerminalNode | undefined;
    ROWNUM(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    RPAD(): TerminalNode | undefined;
    RTRIM(): TerminalNode | undefined;
    RULE(): TerminalNode | undefined;
    RULES(): TerminalNode | undefined;
    SALT(): TerminalNode | undefined;
    SAMPLE(): TerminalNode | undefined;
    SAVE_AS_INTERVALS(): TerminalNode | undefined;
    SAVEPOINT(): TerminalNode | undefined;
    SB4(): TerminalNode | undefined;
    SCALE(): TerminalNode | undefined;
    SCALE_ROWS(): TerminalNode | undefined;
    SCAN_INSTANCES(): TerminalNode | undefined;
    SCAN(): TerminalNode | undefined;
    SCHEDULER(): TerminalNode | undefined;
    SCHEMACHECK(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SCN_ASCENDING(): TerminalNode | undefined;
    SCN(): TerminalNode | undefined;
    SCOPE(): TerminalNode | undefined;
    SD_ALL(): TerminalNode | undefined;
    SD_INHIBIT(): TerminalNode | undefined;
    SD_SHOW(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    SECOND(): TerminalNode | undefined;
    SECUREFILE_DBA(): TerminalNode | undefined;
    SECUREFILE(): TerminalNode | undefined;
    SECURITY(): TerminalNode | undefined;
    SEED(): TerminalNode | undefined;
    SEG_BLOCK(): TerminalNode | undefined;
    SEG_FILE(): TerminalNode | undefined;
    SEGMENT(): TerminalNode | undefined;
    SELECTIVITY(): TerminalNode | undefined;
    SEMIJOIN_DRIVER(): TerminalNode | undefined;
    SEMIJOIN(): TerminalNode | undefined;
    SEMI_TO_INNER(): TerminalNode | undefined;
    SEQUENCED(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    SEQUENTIAL(): TerminalNode | undefined;
    SERIALIZABLE(): TerminalNode | undefined;
    SERVERERROR(): TerminalNode | undefined;
    SESSION_CACHED_CURSORS(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    SESSIONS_PER_USER(): TerminalNode | undefined;
    SESSIONTIMEZONE(): TerminalNode | undefined;
    SESSIONTZNAME(): TerminalNode | undefined;
    SETS(): TerminalNode | undefined;
    SETTINGS(): TerminalNode | undefined;
    SET_TO_JOIN(): TerminalNode | undefined;
    SEVERE(): TerminalNode | undefined;
    SHARED(): TerminalNode | undefined;
    SHARED_POOL(): TerminalNode | undefined;
    SHOW(): TerminalNode | undefined;
    SHRINK(): TerminalNode | undefined;
    SHUTDOWN(): TerminalNode | undefined;
    SIBLINGS(): TerminalNode | undefined;
    SID(): TerminalNode | undefined;
    SIGNAL_COMPONENT(): TerminalNode | undefined;
    SIGNAL_FUNCTION(): TerminalNode | undefined;
    SIGN(): TerminalNode | undefined;
    SIMPLE(): TerminalNode | undefined;
    SINGLE(): TerminalNode | undefined;
    SINGLETASK(): TerminalNode | undefined;
    SINH(): TerminalNode | undefined;
    SIN(): TerminalNode | undefined;
    SKIP_EXT_OPTIMIZER(): TerminalNode | undefined;
    SKIP_(): TerminalNode | undefined;
    SKIP_UNQ_UNUSABLE_IDX(): TerminalNode | undefined;
    SKIP_UNUSABLE_INDEXES(): TerminalNode | undefined;
    SMALLFILE(): TerminalNode | undefined;
    SNAPSHOT(): TerminalNode | undefined;
    SOME(): TerminalNode | undefined;
    SORT(): TerminalNode | undefined;
    SOUNDEX(): TerminalNode | undefined;
    SOURCE(): TerminalNode | undefined;
    SPACE_KEYWORD(): TerminalNode | undefined;
    SPECIFICATION(): TerminalNode | undefined;
    SPFILE(): TerminalNode | undefined;
    SPLIT(): TerminalNode | undefined;
    SPREADSHEET(): TerminalNode | undefined;
    SQLLDR(): TerminalNode | undefined;
    SQL(): TerminalNode | undefined;
    SQL_TRACE(): TerminalNode | undefined;
    SQRT(): TerminalNode | undefined;
    STALE(): TerminalNode | undefined;
    STANDALONE(): TerminalNode | undefined;
    STANDBY_MAX_DATA_DELAY(): TerminalNode | undefined;
    STANDBY(): TerminalNode | undefined;
    STAR(): TerminalNode | undefined;
    STAR_TRANSFORMATION(): TerminalNode | undefined;
    STARTUP(): TerminalNode | undefined;
    STATEMENT_ID(): TerminalNode | undefined;
    STATEMENT_QUEUING(): TerminalNode | undefined;
    STATEMENTS(): TerminalNode | undefined;
    STATIC(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    STATS_BINOMIAL_TEST(): TerminalNode | undefined;
    STATS_CROSSTAB(): TerminalNode | undefined;
    STATS_F_TEST(): TerminalNode | undefined;
    STATS_KS_TEST(): TerminalNode | undefined;
    STATS_MODE(): TerminalNode | undefined;
    STATS_MW_TEST(): TerminalNode | undefined;
    STATS_ONE_WAY_ANOVA(): TerminalNode | undefined;
    STATS_T_TEST_INDEP(): TerminalNode | undefined;
    STATS_T_TEST_INDEPU(): TerminalNode | undefined;
    STATS_T_TEST_ONE(): TerminalNode | undefined;
    STATS_T_TEST_PAIRED(): TerminalNode | undefined;
    STATS_WSR_TEST(): TerminalNode | undefined;
    STDDEV(): TerminalNode | undefined;
    STDDEV_POP(): TerminalNode | undefined;
    STDDEV_SAMP(): TerminalNode | undefined;
    STOP(): TerminalNode | undefined;
    STORAGE(): TerminalNode | undefined;
    STORE(): TerminalNode | undefined;
    STREAMS(): TerminalNode | undefined;
    STRICT(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    STRIPE_COLUMNS(): TerminalNode | undefined;
    STRIPE_WIDTH(): TerminalNode | undefined;
    STRIP(): TerminalNode | undefined;
    STRUCTURE(): TerminalNode | undefined;
    SUBMULTISET(): TerminalNode | undefined;
    SUBPARTITION(): TerminalNode | undefined;
    SUBPARTITION_REL(): TerminalNode | undefined;
    SUBPARTITIONS(): TerminalNode | undefined;
    SUBQUERIES(): TerminalNode | undefined;
    SUBQUERY_PRUNING(): TerminalNode | undefined;
    SUBSTITUTABLE(): TerminalNode | undefined;
    SUBSTR2(): TerminalNode | undefined;
    SUBSTR4(): TerminalNode | undefined;
    SUBSTRB(): TerminalNode | undefined;
    SUBSTRC(): TerminalNode | undefined;
    SUBSTR(): TerminalNode | undefined;
    SUCCESSFUL(): TerminalNode | undefined;
    SUMMARY(): TerminalNode | undefined;
    SUM(): TerminalNode | undefined;
    SUPPLEMENTAL(): TerminalNode | undefined;
    SUSPEND(): TerminalNode | undefined;
    SWAP_JOIN_INPUTS(): TerminalNode | undefined;
    SWITCH(): TerminalNode | undefined;
    SWITCHOVER(): TerminalNode | undefined;
    SYNCHRONOUS(): TerminalNode | undefined;
    SYNC(): TerminalNode | undefined;
    SYSASM(): TerminalNode | undefined;
    SYS_AUDIT(): TerminalNode | undefined;
    SYSAUX(): TerminalNode | undefined;
    SYS_CHECKACL(): TerminalNode | undefined;
    SYS_CONNECT_BY_PATH(): TerminalNode | undefined;
    SYS_CONTEXT(): TerminalNode | undefined;
    SYSDATE(): TerminalNode | undefined;
    SYSDBA(): TerminalNode | undefined;
    SYS_DBURIGEN(): TerminalNode | undefined;
    SYS_DL_CURSOR(): TerminalNode | undefined;
    SYS_DM_RXFORM_CHR(): TerminalNode | undefined;
    SYS_DM_RXFORM_NUM(): TerminalNode | undefined;
    SYS_DOM_COMPARE(): TerminalNode | undefined;
    SYS_DST_PRIM2SEC(): TerminalNode | undefined;
    SYS_DST_SEC2PRIM(): TerminalNode | undefined;
    SYS_ET_BFILE_TO_RAW(): TerminalNode | undefined;
    SYS_ET_BLOB_TO_IMAGE(): TerminalNode | undefined;
    SYS_ET_IMAGE_TO_BLOB(): TerminalNode | undefined;
    SYS_ET_RAW_TO_BFILE(): TerminalNode | undefined;
    SYS_EXTPDTXT(): TerminalNode | undefined;
    SYS_EXTRACT_UTC(): TerminalNode | undefined;
    SYS_FBT_INSDEL(): TerminalNode | undefined;
    SYS_FILTER_ACLS(): TerminalNode | undefined;
    SYS_FNMATCHES(): TerminalNode | undefined;
    SYS_FNREPLACE(): TerminalNode | undefined;
    SYS_GET_ACLIDS(): TerminalNode | undefined;
    SYS_GET_PRIVILEGES(): TerminalNode | undefined;
    SYS_GETTOKENID(): TerminalNode | undefined;
    SYS_GETXTIVAL(): TerminalNode | undefined;
    SYS_GUID(): TerminalNode | undefined;
    SYS_MAKEXML(): TerminalNode | undefined;
    SYS_MAKE_XMLNODEID(): TerminalNode | undefined;
    SYS_MKXMLATTR(): TerminalNode | undefined;
    SYS_OP_ADT2BIN(): TerminalNode | undefined;
    SYS_OP_ADTCONS(): TerminalNode | undefined;
    SYS_OP_ALSCRVAL(): TerminalNode | undefined;
    SYS_OP_ATG(): TerminalNode | undefined;
    SYS_OP_BIN2ADT(): TerminalNode | undefined;
    SYS_OP_BITVEC(): TerminalNode | undefined;
    SYS_OP_BL2R(): TerminalNode | undefined;
    SYS_OP_BLOOM_FILTER_LIST(): TerminalNode | undefined;
    SYS_OP_BLOOM_FILTER(): TerminalNode | undefined;
    SYS_OP_C2C(): TerminalNode | undefined;
    SYS_OP_CAST(): TerminalNode | undefined;
    SYS_OP_CEG(): TerminalNode | undefined;
    SYS_OP_CL2C(): TerminalNode | undefined;
    SYS_OP_COMBINED_HASH(): TerminalNode | undefined;
    SYS_OP_COMP(): TerminalNode | undefined;
    SYS_OP_CONVERT(): TerminalNode | undefined;
    SYS_OP_COUNTCHG(): TerminalNode | undefined;
    SYS_OP_CSCONV(): TerminalNode | undefined;
    SYS_OP_CSCONVTEST(): TerminalNode | undefined;
    SYS_OP_CSR(): TerminalNode | undefined;
    SYS_OP_CSX_PATCH(): TerminalNode | undefined;
    SYS_OP_DECOMP(): TerminalNode | undefined;
    SYS_OP_DESCEND(): TerminalNode | undefined;
    SYS_OP_DISTINCT(): TerminalNode | undefined;
    SYS_OP_DRA(): TerminalNode | undefined;
    SYS_OP_DUMP(): TerminalNode | undefined;
    SYS_OP_DV_CHECK(): TerminalNode | undefined;
    SYS_OP_ENFORCE_NOT_NULL(): TerminalNode | undefined;
    SYSOPER(): TerminalNode | undefined;
    SYS_OP_EXTRACT(): TerminalNode | undefined;
    SYS_OP_GROUPING(): TerminalNode | undefined;
    SYS_OP_GUID(): TerminalNode | undefined;
    SYS_OP_IIX(): TerminalNode | undefined;
    SYS_OP_ITR(): TerminalNode | undefined;
    SYS_OP_LBID(): TerminalNode | undefined;
    SYS_OP_LOBLOC2BLOB(): TerminalNode | undefined;
    SYS_OP_LOBLOC2CLOB(): TerminalNode | undefined;
    SYS_OP_LOBLOC2ID(): TerminalNode | undefined;
    SYS_OP_LOBLOC2NCLOB(): TerminalNode | undefined;
    SYS_OP_LOBLOC2TYP(): TerminalNode | undefined;
    SYS_OP_LSVI(): TerminalNode | undefined;
    SYS_OP_LVL(): TerminalNode | undefined;
    SYS_OP_MAKEOID(): TerminalNode | undefined;
    SYS_OP_MAP_NONNULL(): TerminalNode | undefined;
    SYS_OP_MSR(): TerminalNode | undefined;
    SYS_OP_NICOMBINE(): TerminalNode | undefined;
    SYS_OP_NIEXTRACT(): TerminalNode | undefined;
    SYS_OP_NII(): TerminalNode | undefined;
    SYS_OP_NIX(): TerminalNode | undefined;
    SYS_OP_NOEXPAND(): TerminalNode | undefined;
    SYS_OP_NTCIMG(): TerminalNode | undefined;
    SYS_OP_NUMTORAW(): TerminalNode | undefined;
    SYS_OP_OIDVALUE(): TerminalNode | undefined;
    SYS_OP_OPNSIZE(): TerminalNode | undefined;
    SYS_OP_PAR_1(): TerminalNode | undefined;
    SYS_OP_PARGID_1(): TerminalNode | undefined;
    SYS_OP_PARGID(): TerminalNode | undefined;
    SYS_OP_PAR(): TerminalNode | undefined;
    SYS_OP_PIVOT(): TerminalNode | undefined;
    SYS_OP_R2O(): TerminalNode | undefined;
    SYS_OP_RAWTONUM(): TerminalNode | undefined;
    SYS_OP_RDTM(): TerminalNode | undefined;
    SYS_OP_REF(): TerminalNode | undefined;
    SYS_OP_RMTD(): TerminalNode | undefined;
    SYS_OP_ROWIDTOOBJ(): TerminalNode | undefined;
    SYS_OP_RPB(): TerminalNode | undefined;
    SYS_OPTLOBPRBSC(): TerminalNode | undefined;
    SYS_OP_TOSETID(): TerminalNode | undefined;
    SYS_OP_TPR(): TerminalNode | undefined;
    SYS_OP_TRTB(): TerminalNode | undefined;
    SYS_OPTXICMP(): TerminalNode | undefined;
    SYS_OPTXQCASTASNQ(): TerminalNode | undefined;
    SYS_OP_UNDESCEND(): TerminalNode | undefined;
    SYS_OP_VECAND(): TerminalNode | undefined;
    SYS_OP_VECBIT(): TerminalNode | undefined;
    SYS_OP_VECOR(): TerminalNode | undefined;
    SYS_OP_VECXOR(): TerminalNode | undefined;
    SYS_OP_VERSION(): TerminalNode | undefined;
    SYS_OP_VREF(): TerminalNode | undefined;
    SYS_OP_VVD(): TerminalNode | undefined;
    SYS_OP_XMLCONS_FOR_CSX(): TerminalNode | undefined;
    SYS_OP_XPTHATG(): TerminalNode | undefined;
    SYS_OP_XPTHIDX(): TerminalNode | undefined;
    SYS_OP_XPTHOP(): TerminalNode | undefined;
    SYS_OP_XTXT2SQLT(): TerminalNode | undefined;
    SYS_ORDERKEY_DEPTH(): TerminalNode | undefined;
    SYS_ORDERKEY_MAXCHILD(): TerminalNode | undefined;
    SYS_ORDERKEY_PARENT(): TerminalNode | undefined;
    SYS_PARALLEL_TXN(): TerminalNode | undefined;
    SYS_PATHID_IS_ATTR(): TerminalNode | undefined;
    SYS_PATHID_IS_NMSPC(): TerminalNode | undefined;
    SYS_PATHID_LASTNAME(): TerminalNode | undefined;
    SYS_PATHID_LASTNMSPC(): TerminalNode | undefined;
    SYS_PATH_REVERSE(): TerminalNode | undefined;
    SYS_PXQEXTRACT(): TerminalNode | undefined;
    SYS_RID_ORDER(): TerminalNode | undefined;
    SYS_ROW_DELTA(): TerminalNode | undefined;
    SYS_SC_2_XMLT(): TerminalNode | undefined;
    SYS_SYNRCIREDO(): TerminalNode | undefined;
    SYSTEM_DEFINED(): TerminalNode | undefined;
    SYSTEM(): TerminalNode | undefined;
    SYSTIMESTAMP(): TerminalNode | undefined;
    SYS_TYPEID(): TerminalNode | undefined;
    SYS_UMAKEXML(): TerminalNode | undefined;
    SYS_XMLANALYZE(): TerminalNode | undefined;
    SYS_XMLCONTAINS(): TerminalNode | undefined;
    SYS_XMLCONV(): TerminalNode | undefined;
    SYS_XMLEXNSURI(): TerminalNode | undefined;
    SYS_XMLGEN(): TerminalNode | undefined;
    SYS_XMLI_LOC_ISNODE(): TerminalNode | undefined;
    SYS_XMLI_LOC_ISTEXT(): TerminalNode | undefined;
    SYS_XMLINSTR(): TerminalNode | undefined;
    SYS_XMLLOCATOR_GETSVAL(): TerminalNode | undefined;
    SYS_XMLNODEID_GETCID(): TerminalNode | undefined;
    SYS_XMLNODEID_GETLOCATOR(): TerminalNode | undefined;
    SYS_XMLNODEID_GETOKEY(): TerminalNode | undefined;
    SYS_XMLNODEID_GETPATHID(): TerminalNode | undefined;
    SYS_XMLNODEID_GETPTRID(): TerminalNode | undefined;
    SYS_XMLNODEID_GETRID(): TerminalNode | undefined;
    SYS_XMLNODEID_GETSVAL(): TerminalNode | undefined;
    SYS_XMLNODEID_GETTID(): TerminalNode | undefined;
    SYS_XMLNODEID(): TerminalNode | undefined;
    SYS_XMLT_2_SC(): TerminalNode | undefined;
    SYS_XMLTRANSLATE(): TerminalNode | undefined;
    SYS_XMLTYPE2SQL(): TerminalNode | undefined;
    SYS_XQ_ASQLCNV(): TerminalNode | undefined;
    SYS_XQ_ATOMCNVCHK(): TerminalNode | undefined;
    SYS_XQBASEURI(): TerminalNode | undefined;
    SYS_XQCASTABLEERRH(): TerminalNode | undefined;
    SYS_XQCODEP2STR(): TerminalNode | undefined;
    SYS_XQCODEPEQ(): TerminalNode | undefined;
    SYS_XQCON2SEQ(): TerminalNode | undefined;
    SYS_XQCONCAT(): TerminalNode | undefined;
    SYS_XQDELETE(): TerminalNode | undefined;
    SYS_XQDFLTCOLATION(): TerminalNode | undefined;
    SYS_XQDOC(): TerminalNode | undefined;
    SYS_XQDOCURI(): TerminalNode | undefined;
    SYS_XQDURDIV(): TerminalNode | undefined;
    SYS_XQED4URI(): TerminalNode | undefined;
    SYS_XQENDSWITH(): TerminalNode | undefined;
    SYS_XQERRH(): TerminalNode | undefined;
    SYS_XQERR(): TerminalNode | undefined;
    SYS_XQESHTMLURI(): TerminalNode | undefined;
    SYS_XQEXLOBVAL(): TerminalNode | undefined;
    SYS_XQEXSTWRP(): TerminalNode | undefined;
    SYS_XQEXTRACT(): TerminalNode | undefined;
    SYS_XQEXTRREF(): TerminalNode | undefined;
    SYS_XQEXVAL(): TerminalNode | undefined;
    SYS_XQFB2STR(): TerminalNode | undefined;
    SYS_XQFNBOOL(): TerminalNode | undefined;
    SYS_XQFNCMP(): TerminalNode | undefined;
    SYS_XQFNDATIM(): TerminalNode | undefined;
    SYS_XQFNLNAME(): TerminalNode | undefined;
    SYS_XQFNNM(): TerminalNode | undefined;
    SYS_XQFNNSURI(): TerminalNode | undefined;
    SYS_XQFNPREDTRUTH(): TerminalNode | undefined;
    SYS_XQFNQNM(): TerminalNode | undefined;
    SYS_XQFNROOT(): TerminalNode | undefined;
    SYS_XQFORMATNUM(): TerminalNode | undefined;
    SYS_XQFTCONTAIN(): TerminalNode | undefined;
    SYS_XQFUNCR(): TerminalNode | undefined;
    SYS_XQGETCONTENT(): TerminalNode | undefined;
    SYS_XQINDXOF(): TerminalNode | undefined;
    SYS_XQINSERT(): TerminalNode | undefined;
    SYS_XQINSPFX(): TerminalNode | undefined;
    SYS_XQIRI2URI(): TerminalNode | undefined;
    SYS_XQLANG(): TerminalNode | undefined;
    SYS_XQLLNMFRMQNM(): TerminalNode | undefined;
    SYS_XQMKNODEREF(): TerminalNode | undefined;
    SYS_XQNILLED(): TerminalNode | undefined;
    SYS_XQNODENAME(): TerminalNode | undefined;
    SYS_XQNORMSPACE(): TerminalNode | undefined;
    SYS_XQNORMUCODE(): TerminalNode | undefined;
    SYS_XQ_NRNG(): TerminalNode | undefined;
    SYS_XQNSP4PFX(): TerminalNode | undefined;
    SYS_XQNSPFRMQNM(): TerminalNode | undefined;
    SYS_XQPFXFRMQNM(): TerminalNode | undefined;
    SYS_XQ_PKSQL2XML(): TerminalNode | undefined;
    SYS_XQPOLYABS(): TerminalNode | undefined;
    SYS_XQPOLYADD(): TerminalNode | undefined;
    SYS_XQPOLYCEL(): TerminalNode | undefined;
    SYS_XQPOLYCSTBL(): TerminalNode | undefined;
    SYS_XQPOLYCST(): TerminalNode | undefined;
    SYS_XQPOLYDIV(): TerminalNode | undefined;
    SYS_XQPOLYFLR(): TerminalNode | undefined;
    SYS_XQPOLYMOD(): TerminalNode | undefined;
    SYS_XQPOLYMUL(): TerminalNode | undefined;
    SYS_XQPOLYRND(): TerminalNode | undefined;
    SYS_XQPOLYSQRT(): TerminalNode | undefined;
    SYS_XQPOLYSUB(): TerminalNode | undefined;
    SYS_XQPOLYUMUS(): TerminalNode | undefined;
    SYS_XQPOLYUPLS(): TerminalNode | undefined;
    SYS_XQPOLYVEQ(): TerminalNode | undefined;
    SYS_XQPOLYVGE(): TerminalNode | undefined;
    SYS_XQPOLYVGT(): TerminalNode | undefined;
    SYS_XQPOLYVLE(): TerminalNode | undefined;
    SYS_XQPOLYVLT(): TerminalNode | undefined;
    SYS_XQPOLYVNE(): TerminalNode | undefined;
    SYS_XQREF2VAL(): TerminalNode | undefined;
    SYS_XQRENAME(): TerminalNode | undefined;
    SYS_XQREPLACE(): TerminalNode | undefined;
    SYS_XQRESVURI(): TerminalNode | undefined;
    SYS_XQRNDHALF2EVN(): TerminalNode | undefined;
    SYS_XQRSLVQNM(): TerminalNode | undefined;
    SYS_XQRYENVPGET(): TerminalNode | undefined;
    SYS_XQRYVARGET(): TerminalNode | undefined;
    SYS_XQRYWRP(): TerminalNode | undefined;
    SYS_XQSEQ2CON4XC(): TerminalNode | undefined;
    SYS_XQSEQ2CON(): TerminalNode | undefined;
    SYS_XQSEQDEEPEQ(): TerminalNode | undefined;
    SYS_XQSEQINSB(): TerminalNode | undefined;
    SYS_XQSEQRM(): TerminalNode | undefined;
    SYS_XQSEQRVS(): TerminalNode | undefined;
    SYS_XQSEQSUB(): TerminalNode | undefined;
    SYS_XQSEQTYPMATCH(): TerminalNode | undefined;
    SYS_XQSTARTSWITH(): TerminalNode | undefined;
    SYS_XQSTATBURI(): TerminalNode | undefined;
    SYS_XQSTR2CODEP(): TerminalNode | undefined;
    SYS_XQSTRJOIN(): TerminalNode | undefined;
    SYS_XQSUBSTRAFT(): TerminalNode | undefined;
    SYS_XQSUBSTRBEF(): TerminalNode | undefined;
    SYS_XQTOKENIZE(): TerminalNode | undefined;
    SYS_XQTREATAS(): TerminalNode | undefined;
    SYS_XQ_UPKXML2SQL(): TerminalNode | undefined;
    SYS_XQXFORM(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    TABLE_LOOKUP_BY_NL(): TerminalNode | undefined;
    TABLES(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    TABLESPACE_NO(): TerminalNode | undefined;
    TABLE_STATS(): TerminalNode | undefined;
    TABNO(): TerminalNode | undefined;
    TANH(): TerminalNode | undefined;
    TAN(): TerminalNode | undefined;
    TBLORIDXPARTNUM(): TerminalNode | undefined;
    TEMPFILE(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    TEMPORARY(): TerminalNode | undefined;
    TEMP_TABLE(): TerminalNode | undefined;
    TEST(): TerminalNode | undefined;
    THAN(): TerminalNode | undefined;
    THE(): TerminalNode | undefined;
    THEN(): TerminalNode | undefined;
    THREAD(): TerminalNode | undefined;
    THROUGH(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    TIMEOUT(): TerminalNode | undefined;
    TIMES(): TerminalNode | undefined;
    TIMESTAMP(): TerminalNode | undefined;
    TIMEZONE_ABBR(): TerminalNode | undefined;
    TIMEZONE_HOUR(): TerminalNode | undefined;
    TIMEZONE_MINUTE(): TerminalNode | undefined;
    TIME_ZONE(): TerminalNode | undefined;
    TIMEZONE_OFFSET(): TerminalNode | undefined;
    TIMEZONE_REGION(): TerminalNode | undefined;
    TIV_GB(): TerminalNode | undefined;
    TIV_SSF(): TerminalNode | undefined;
    TO_BINARY_DOUBLE(): TerminalNode | undefined;
    TO_BINARY_FLOAT(): TerminalNode | undefined;
    TO_BLOB(): TerminalNode | undefined;
    TO_CHAR(): TerminalNode | undefined;
    TO_CLOB(): TerminalNode | undefined;
    TO_DATE(): TerminalNode | undefined;
    TO_DSINTERVAL(): TerminalNode | undefined;
    TO_LOB(): TerminalNode | undefined;
    TO_MULTI_BYTE(): TerminalNode | undefined;
    TO_NCHAR(): TerminalNode | undefined;
    TO_NCLOB(): TerminalNode | undefined;
    TO_NUMBER(): TerminalNode | undefined;
    TOPLEVEL(): TerminalNode | undefined;
    TO_SINGLE_BYTE(): TerminalNode | undefined;
    TO_TIME(): TerminalNode | undefined;
    TO_TIMESTAMP(): TerminalNode | undefined;
    TO_TIMESTAMP_TZ(): TerminalNode | undefined;
    TO_TIME_TZ(): TerminalNode | undefined;
    TO_YMINTERVAL(): TerminalNode | undefined;
    TRACE(): TerminalNode | undefined;
    TRACING(): TerminalNode | undefined;
    TRACKING(): TerminalNode | undefined;
    TRAILING(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    TRANSFORM_DISTINCT_AGG(): TerminalNode | undefined;
    TRANSITIONAL(): TerminalNode | undefined;
    TRANSITION(): TerminalNode | undefined;
    TRANSLATE(): TerminalNode | undefined;
    TREAT(): TerminalNode | undefined;
    TRIGGERS(): TerminalNode | undefined;
    TRIM(): TerminalNode | undefined;
    TRUE(): TerminalNode | undefined;
    TRUNCATE(): TerminalNode | undefined;
    TRUNC(): TerminalNode | undefined;
    TRUSTED(): TerminalNode | undefined;
    TUNING(): TerminalNode | undefined;
    TX(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    TYPES(): TerminalNode | undefined;
    TZ_OFFSET(): TerminalNode | undefined;
    UB2(): TerminalNode | undefined;
    UBA(): TerminalNode | undefined;
    UID(): TerminalNode | undefined;
    UNARCHIVED(): TerminalNode | undefined;
    UNBOUNDED(): TerminalNode | undefined;
    UNBOUND(): TerminalNode | undefined;
    UNDER(): TerminalNode | undefined;
    UNDO(): TerminalNode | undefined;
    UNDROP(): TerminalNode | undefined;
    UNIFORM(): TerminalNode | undefined;
    UNISTR(): TerminalNode | undefined;
    UNLIMITED(): TerminalNode | undefined;
    UNLOAD(): TerminalNode | undefined;
    UNLOCK(): TerminalNode | undefined;
    UNNEST_INNERJ_DISTINCT_VIEW(): TerminalNode | undefined;
    UNNEST(): TerminalNode | undefined;
    UNNEST_NOSEMIJ_NODISTINCTVIEW(): TerminalNode | undefined;
    UNNEST_SEMIJ_VIEW(): TerminalNode | undefined;
    UNPACKED(): TerminalNode | undefined;
    UNPIVOT(): TerminalNode | undefined;
    UNPROTECTED(): TerminalNode | undefined;
    UNQUIESCE(): TerminalNode | undefined;
    UNRECOVERABLE(): TerminalNode | undefined;
    UNRESTRICTED(): TerminalNode | undefined;
    UNTIL(): TerminalNode | undefined;
    UNUSABLE(): TerminalNode | undefined;
    UNUSED(): TerminalNode | undefined;
    UPDATABLE(): TerminalNode | undefined;
    UPDATED(): TerminalNode | undefined;
    UPDATEXML(): TerminalNode | undefined;
    UPD_INDEXES(): TerminalNode | undefined;
    UPD_JOININDEX(): TerminalNode | undefined;
    UPGRADE(): TerminalNode | undefined;
    UPPER(): TerminalNode | undefined;
    UPSERT(): TerminalNode | undefined;
    UROWID(): TerminalNode | undefined;
    USAGE(): TerminalNode | undefined;
    USE_ANTI(): TerminalNode | undefined;
    USE_CONCAT(): TerminalNode | undefined;
    USE_HASH_AGGREGATION(): TerminalNode | undefined;
    USE_HASH_GBY_FOR_PUSHDOWN(): TerminalNode | undefined;
    USE_HASH(): TerminalNode | undefined;
    USE_INVISIBLE_INDEXES(): TerminalNode | undefined;
    USE_MERGE_CARTESIAN(): TerminalNode | undefined;
    USE_MERGE(): TerminalNode | undefined;
    USE(): TerminalNode | undefined;
    USE_NL(): TerminalNode | undefined;
    USE_NL_WITH_INDEX(): TerminalNode | undefined;
    USE_PRIVATE_OUTLINES(): TerminalNode | undefined;
    USER_DEFINED(): TerminalNode | undefined;
    USERENV(): TerminalNode | undefined;
    USERGROUP(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    USER_RECYCLEBIN(): TerminalNode | undefined;
    USERS(): TerminalNode | undefined;
    USE_SEMI(): TerminalNode | undefined;
    USE_STORED_OUTLINES(): TerminalNode | undefined;
    USE_TTT_FOR_GSETS(): TerminalNode | undefined;
    USE_WEAK_NAME_RESL(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    VALIDATE(): TerminalNode | undefined;
    VALIDATION(): TerminalNode | undefined;
    VALUE(): TerminalNode | undefined;
    VARIANCE(): TerminalNode | undefined;
    VAR_POP(): TerminalNode | undefined;
    VARRAY(): TerminalNode | undefined;
    VARRAYS(): TerminalNode | undefined;
    VAR_SAMP(): TerminalNode | undefined;
    VARYING(): TerminalNode | undefined;
    VECTOR_READ(): TerminalNode | undefined;
    VECTOR_READ_TRACE(): TerminalNode | undefined;
    VERIFY(): TerminalNode | undefined;
    VERSIONING(): TerminalNode | undefined;
    VERSION(): TerminalNode | undefined;
    VERSIONS_ENDSCN(): TerminalNode | undefined;
    VERSIONS_ENDTIME(): TerminalNode | undefined;
    VERSIONS(): TerminalNode | undefined;
    VERSIONS_OPERATION(): TerminalNode | undefined;
    VERSIONS_STARTSCN(): TerminalNode | undefined;
    VERSIONS_STARTTIME(): TerminalNode | undefined;
    VERSIONS_XID(): TerminalNode | undefined;
    VIRTUAL(): TerminalNode | undefined;
    VISIBLE(): TerminalNode | undefined;
    VOLUME(): TerminalNode | undefined;
    VSIZE(): TerminalNode | undefined;
    WAIT(): TerminalNode | undefined;
    WALLET(): TerminalNode | undefined;
    WELLFORMED(): TerminalNode | undefined;
    WHENEVER(): TerminalNode | undefined;
    WHEN(): TerminalNode | undefined;
    WHITESPACE(): TerminalNode | undefined;
    WIDTH_BUCKET(): TerminalNode | undefined;
    WITHIN(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    WORK(): TerminalNode | undefined;
    WRAPPED(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    XDB_FASTPATH_INSERT(): TerminalNode | undefined;
    X_DYN_PRUNE(): TerminalNode | undefined;
    XID(): TerminalNode | undefined;
    XML2OBJECT(): TerminalNode | undefined;
    XMLATTRIBUTES(): TerminalNode | undefined;
    XMLCAST(): TerminalNode | undefined;
    XMLCDATA(): TerminalNode | undefined;
    XMLCOLATTVAL(): TerminalNode | undefined;
    XMLCOMMENT(): TerminalNode | undefined;
    XMLCONCAT(): TerminalNode | undefined;
    XMLDIFF(): TerminalNode | undefined;
    XML_DML_RWT_STMT(): TerminalNode | undefined;
    XMLELEMENT(): TerminalNode | undefined;
    XMLEXISTS2(): TerminalNode | undefined;
    XMLEXISTS(): TerminalNode | undefined;
    XMLFOREST(): TerminalNode | undefined;
    XMLINDEX_REWRITE_IN_SELECT(): TerminalNode | undefined;
    XMLINDEX_REWRITE(): TerminalNode | undefined;
    XMLINDEX_SEL_IDX_TBL(): TerminalNode | undefined;
    XMLISNODE(): TerminalNode | undefined;
    XMLISVALID(): TerminalNode | undefined;
    XML(): TerminalNode | undefined;
    XMLNAMESPACES(): TerminalNode | undefined;
    XMLPARSE(): TerminalNode | undefined;
    XMLPATCH(): TerminalNode | undefined;
    XMLPI(): TerminalNode | undefined;
    XMLQUERY(): TerminalNode | undefined;
    XMLQUERYVAL(): TerminalNode | undefined;
    XMLROOT(): TerminalNode | undefined;
    XMLSCHEMA(): TerminalNode | undefined;
    XMLSERIALIZE(): TerminalNode | undefined;
    XMLTABLE(): TerminalNode | undefined;
    XMLTRANSFORMBLOB(): TerminalNode | undefined;
    XMLTRANSFORM(): TerminalNode | undefined;
    XMLTYPE(): TerminalNode | undefined;
    XPATHTABLE(): TerminalNode | undefined;
    XS_SYS_CONTEXT(): TerminalNode | undefined;
    YEAR(): TerminalNode | undefined;
    YES(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class String_function_nameContext extends ParserRuleContext {
    CHR(): TerminalNode | undefined;
    DECODE(): TerminalNode | undefined;
    SUBSTR(): TerminalNode | undefined;
    TO_CHAR(): TerminalNode | undefined;
    TRIM(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
export declare class Numeric_function_nameContext extends ParserRuleContext {
    AVG(): TerminalNode | undefined;
    COUNT(): TerminalNode | undefined;
    NVL(): TerminalNode | undefined;
    ROUND(): TerminalNode | undefined;
    SUM(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PlSqlParserListener): void;
    exitRule(listener: PlSqlParserListener): void;
}
