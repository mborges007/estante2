import { ATN } from "antlr4ts/atn/ATN";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { RuleContext } from "antlr4ts/RuleContext";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { TSqlParserListener } from "./TSqlParserListener";
export declare class TSqlParser extends Parser {
    static readonly ADD = 1;
    static readonly ALL = 2;
    static readonly ALTER = 3;
    static readonly AND = 4;
    static readonly ANY = 5;
    static readonly AS = 6;
    static readonly ASC = 7;
    static readonly AUTHORIZATION = 8;
    static readonly BACKSLASH = 9;
    static readonly BACKUP = 10;
    static readonly BEGIN = 11;
    static readonly BETWEEN = 12;
    static readonly BREAK = 13;
    static readonly BROWSE = 14;
    static readonly BULK = 15;
    static readonly BY = 16;
    static readonly CASCADE = 17;
    static readonly CASE = 18;
    static readonly CHECK = 19;
    static readonly CHECKPOINT = 20;
    static readonly CLOSE = 21;
    static readonly CLUSTERED = 22;
    static readonly COALESCE = 23;
    static readonly COLLATE = 24;
    static readonly COLUMN = 25;
    static readonly COMMIT = 26;
    static readonly COMPUTE = 27;
    static readonly CONSTRAINT = 28;
    static readonly CONTAINS = 29;
    static readonly CONTAINSTABLE = 30;
    static readonly CONTINUE = 31;
    static readonly CONVERT = 32;
    static readonly CREATE = 33;
    static readonly CROSS = 34;
    static readonly CURRENT = 35;
    static readonly CURRENT_DATE = 36;
    static readonly CURRENT_TIME = 37;
    static readonly CURRENT_TIMESTAMP = 38;
    static readonly CURRENT_USER = 39;
    static readonly CURSOR = 40;
    static readonly DATABASE = 41;
    static readonly DBCC = 42;
    static readonly DEALLOCATE = 43;
    static readonly DECLARE = 44;
    static readonly DEFAULT = 45;
    static readonly DELETE = 46;
    static readonly DENY = 47;
    static readonly DESC = 48;
    static readonly DISK = 49;
    static readonly DISTINCT = 50;
    static readonly DISTRIBUTED = 51;
    static readonly DOUBLE = 52;
    static readonly DOUBLE_BACK_SLASH = 53;
    static readonly DOUBLE_FORWARD_SLASH = 54;
    static readonly DROP = 55;
    static readonly DUMP = 56;
    static readonly ELSE = 57;
    static readonly END = 58;
    static readonly ERRLVL = 59;
    static readonly ESCAPE = 60;
    static readonly EXCEPT = 61;
    static readonly EXECUTE = 62;
    static readonly EXISTS = 63;
    static readonly EXIT = 64;
    static readonly EXTERNAL = 65;
    static readonly FETCH = 66;
    static readonly FILE = 67;
    static readonly FILLFACTOR = 68;
    static readonly FOR = 69;
    static readonly FOREIGN = 70;
    static readonly FREETEXT = 71;
    static readonly FREETEXTTABLE = 72;
    static readonly FROM = 73;
    static readonly FULL = 74;
    static readonly FUNCTION = 75;
    static readonly GOTO = 76;
    static readonly GRANT = 77;
    static readonly GROUP = 78;
    static readonly HAVING = 79;
    static readonly HOLDLOCK = 80;
    static readonly IDENTITY = 81;
    static readonly IDENTITY_INSERT = 82;
    static readonly IDENTITYCOL = 83;
    static readonly IF = 84;
    static readonly IN = 85;
    static readonly INDEX = 86;
    static readonly INNER = 87;
    static readonly INSERT = 88;
    static readonly INTERSECT = 89;
    static readonly INTO = 90;
    static readonly IS = 91;
    static readonly JOIN = 92;
    static readonly KEY = 93;
    static readonly KILL = 94;
    static readonly LEFT = 95;
    static readonly LIKE = 96;
    static readonly LINENO = 97;
    static readonly LOAD = 98;
    static readonly MERGE = 99;
    static readonly NATIONAL = 100;
    static readonly NEGOTIATE = 101;
    static readonly NOCHECK = 102;
    static readonly NONCLUSTERED = 103;
    static readonly NOT = 104;
    static readonly NULL = 105;
    static readonly NULLIF = 106;
    static readonly OF = 107;
    static readonly OFF = 108;
    static readonly OFFSETS = 109;
    static readonly ON = 110;
    static readonly OPEN = 111;
    static readonly OPENDATASOURCE = 112;
    static readonly OPENQUERY = 113;
    static readonly OPENROWSET = 114;
    static readonly OPENJSON = 115;
    static readonly OPENXML = 116;
    static readonly OPTION = 117;
    static readonly OR = 118;
    static readonly ORDER = 119;
    static readonly OUTER = 120;
    static readonly OVER = 121;
    static readonly PERCENT = 122;
    static readonly PIVOT = 123;
    static readonly PLAN = 124;
    static readonly PRECISION = 125;
    static readonly PRIMARY = 126;
    static readonly PRINT = 127;
    static readonly PROC = 128;
    static readonly PROCEDURE = 129;
    static readonly PUBLIC = 130;
    static readonly RAISERROR = 131;
    static readonly RAW = 132;
    static readonly READ = 133;
    static readonly READTEXT = 134;
    static readonly RECONFIGURE = 135;
    static readonly REFERENCES = 136;
    static readonly REPLICATION = 137;
    static readonly RESTORE = 138;
    static readonly RESTRICT = 139;
    static readonly RETURN = 140;
    static readonly REVERT = 141;
    static readonly REVOKE = 142;
    static readonly RIGHT = 143;
    static readonly ROLLBACK = 144;
    static readonly ROWCOUNT = 145;
    static readonly ROWGUIDCOL = 146;
    static readonly RULE = 147;
    static readonly SAVE = 148;
    static readonly SCHEMA = 149;
    static readonly SECURITYAUDIT = 150;
    static readonly SELECT = 151;
    static readonly SEMANTICKEYPHRASETABLE = 152;
    static readonly SEMANTICSIMILARITYDETAILSTABLE = 153;
    static readonly SEMANTICSIMILARITYTABLE = 154;
    static readonly SESSION_USER = 155;
    static readonly SET = 156;
    static readonly SETUSER = 157;
    static readonly SHUTDOWN = 158;
    static readonly SOME = 159;
    static readonly STATISTICS = 160;
    static readonly SYSTEM_USER = 161;
    static readonly TABLE = 162;
    static readonly TABLESAMPLE = 163;
    static readonly TEXTSIZE = 164;
    static readonly THEN = 165;
    static readonly TO = 166;
    static readonly TOP = 167;
    static readonly TRAN = 168;
    static readonly TRANSACTION = 169;
    static readonly TRIGGER = 170;
    static readonly TRUNCATE = 171;
    static readonly TSEQUAL = 172;
    static readonly UNION = 173;
    static readonly UNIQUE = 174;
    static readonly UNPIVOT = 175;
    static readonly UPDATE = 176;
    static readonly UPDATETEXT = 177;
    static readonly USE = 178;
    static readonly USER = 179;
    static readonly VALUES = 180;
    static readonly VARYING = 181;
    static readonly VIEW = 182;
    static readonly WAITFOR = 183;
    static readonly WHEN = 184;
    static readonly WHERE = 185;
    static readonly WHILE = 186;
    static readonly WITH = 187;
    static readonly WITHIN = 188;
    static readonly WRITETEXT = 189;
    static readonly ABSOLUTE = 190;
    static readonly AT_KEYWORD = 191;
    static readonly ACCENT_SENSITIVITY = 192;
    static readonly ACTION = 193;
    static readonly ACTIVATION = 194;
    static readonly ACTIVE = 195;
    static readonly ADDRESS = 196;
    static readonly AES_128 = 197;
    static readonly AES_192 = 198;
    static readonly AES_256 = 199;
    static readonly AFFINITY = 200;
    static readonly AFTER = 201;
    static readonly AGGREGATE = 202;
    static readonly ALGORITHM = 203;
    static readonly ALLOW_ENCRYPTED_VALUE_MODIFICATIONS = 204;
    static readonly ALLOW_SNAPSHOT_ISOLATION = 205;
    static readonly ALLOWED = 206;
    static readonly ANSI_NULL_DEFAULT = 207;
    static readonly ANSI_NULLS = 208;
    static readonly ANSI_PADDING = 209;
    static readonly ANSI_WARNINGS = 210;
    static readonly APPLICATION_LOG = 211;
    static readonly APPLY = 212;
    static readonly ARITHABORT = 213;
    static readonly ASSEMBLY = 214;
    static readonly AUDIT = 215;
    static readonly AUDIT_GUID = 216;
    static readonly AUTO = 217;
    static readonly AUTO_CLEANUP = 218;
    static readonly AUTO_CLOSE = 219;
    static readonly AUTO_CREATE_STATISTICS = 220;
    static readonly AUTO_SHRINK = 221;
    static readonly AUTO_UPDATE_STATISTICS = 222;
    static readonly AUTO_UPDATE_STATISTICS_ASYNC = 223;
    static readonly AVAILABILITY = 224;
    static readonly AVG = 225;
    static readonly BACKUP_PRIORITY = 226;
    static readonly BEGIN_DIALOG = 227;
    static readonly BIGINT = 228;
    static readonly BINARY_KEYWORD = 229;
    static readonly BINARY_BASE64 = 230;
    static readonly BINARY_CHECKSUM = 231;
    static readonly BINDING = 232;
    static readonly BLOB_STORAGE = 233;
    static readonly BROKER = 234;
    static readonly BROKER_INSTANCE = 235;
    static readonly BULK_LOGGED = 236;
    static readonly CALLER = 237;
    static readonly CAP_CPU_PERCENT = 238;
    static readonly CAST = 239;
    static readonly TRY_CAST = 240;
    static readonly CATALOG = 241;
    static readonly CATCH = 242;
    static readonly CHANGE_RETENTION = 243;
    static readonly CHANGE_TRACKING = 244;
    static readonly CHECKSUM = 245;
    static readonly CHECKSUM_AGG = 246;
    static readonly CLEANUP = 247;
    static readonly COLLECTION = 248;
    static readonly COLUMN_MASTER_KEY = 249;
    static readonly COMMITTED = 250;
    static readonly COMPATIBILITY_LEVEL = 251;
    static readonly CONCAT = 252;
    static readonly CONCAT_NULL_YIELDS_NULL = 253;
    static readonly CONTENT = 254;
    static readonly CONTROL = 255;
    static readonly COOKIE = 256;
    static readonly COUNT = 257;
    static readonly COUNT_BIG = 258;
    static readonly COUNTER = 259;
    static readonly CPU = 260;
    static readonly CREATE_NEW = 261;
    static readonly CREATION_DISPOSITION = 262;
    static readonly CREDENTIAL = 263;
    static readonly CRYPTOGRAPHIC = 264;
    static readonly CUME_DIST = 265;
    static readonly CURSOR_CLOSE_ON_COMMIT = 266;
    static readonly CURSOR_DEFAULT = 267;
    static readonly DATA = 268;
    static readonly DATE_CORRELATION_OPTIMIZATION = 269;
    static readonly DATEADD = 270;
    static readonly DATEDIFF = 271;
    static readonly DATENAME = 272;
    static readonly DATEPART = 273;
    static readonly DAYS = 274;
    static readonly DB_CHAINING = 275;
    static readonly DB_FAILOVER = 276;
    static readonly DECRYPTION = 277;
    static readonly DEFAULT_DOUBLE_QUOTE = 278;
    static readonly DEFAULT_FULLTEXT_LANGUAGE = 279;
    static readonly DEFAULT_LANGUAGE = 280;
    static readonly DELAY = 281;
    static readonly DELAYED_DURABILITY = 282;
    static readonly DELETED = 283;
    static readonly DENSE_RANK = 284;
    static readonly DEPENDENTS = 285;
    static readonly DES = 286;
    static readonly DESCRIPTION = 287;
    static readonly DESX = 288;
    static readonly DHCP = 289;
    static readonly DIALOG = 290;
    static readonly DIRECTORY_NAME = 291;
    static readonly DISABLE = 292;
    static readonly DISABLE_BROKER = 293;
    static readonly DISABLED = 294;
    static readonly DISK_DRIVE = 295;
    static readonly DOCUMENT = 296;
    static readonly DYNAMIC = 297;
    static readonly ELEMENTS = 298;
    static readonly EMERGENCY = 299;
    static readonly EMPTY = 300;
    static readonly ENABLE = 301;
    static readonly ENABLE_BROKER = 302;
    static readonly ENCRYPTED_VALUE = 303;
    static readonly ENCRYPTION = 304;
    static readonly ENDPOINT_URL = 305;
    static readonly ERROR_BROKER_CONVERSATIONS = 306;
    static readonly EXCLUSIVE = 307;
    static readonly EXECUTABLE = 308;
    static readonly EXIST = 309;
    static readonly EXPAND = 310;
    static readonly EXPIRY_DATE = 311;
    static readonly EXPLICIT = 312;
    static readonly FAIL_OPERATION = 313;
    static readonly FAILOVER_MODE = 314;
    static readonly FAILURE = 315;
    static readonly FAILURE_CONDITION_LEVEL = 316;
    static readonly FAST = 317;
    static readonly FAST_FORWARD = 318;
    static readonly FILEGROUP = 319;
    static readonly FILEGROWTH = 320;
    static readonly FILENAME = 321;
    static readonly FILEPATH = 322;
    static readonly FILESTREAM = 323;
    static readonly FILTER = 324;
    static readonly FIRST = 325;
    static readonly FIRST_VALUE = 326;
    static readonly FOLLOWING = 327;
    static readonly FORCE = 328;
    static readonly FORCE_FAILOVER_ALLOW_DATA_LOSS = 329;
    static readonly FORCED = 330;
    static readonly FORMAT = 331;
    static readonly FORWARD_ONLY = 332;
    static readonly FULLSCAN = 333;
    static readonly FULLTEXT = 334;
    static readonly GB = 335;
    static readonly GETDATE = 336;
    static readonly GETUTCDATE = 337;
    static readonly GLOBAL = 338;
    static readonly GO_BATCH = 339;
    static readonly GO = 340;
    static readonly GROUP_MAX_REQUESTS = 341;
    static readonly GROUPING = 342;
    static readonly GROUPING_ID = 343;
    static readonly HADR = 344;
    static readonly HASH = 345;
    static readonly HEALTH_CHECK_TIMEOUT = 346;
    static readonly HIGH = 347;
    static readonly HONOR_BROKER_PRIORITY = 348;
    static readonly HOURS = 349;
    static readonly IDENTITY_VALUE = 350;
    static readonly IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX = 351;
    static readonly IMMEDIATE = 352;
    static readonly IMPERSONATE = 353;
    static readonly IMPORTANCE = 354;
    static readonly INCLUDE_NULL_VALUES = 355;
    static readonly INCREMENTAL = 356;
    static readonly INITIATOR = 357;
    static readonly INPUT = 358;
    static readonly INSENSITIVE = 359;
    static readonly INSERTED = 360;
    static readonly INT = 361;
    static readonly IP = 362;
    static readonly ISOLATION = 363;
    static readonly JOB = 364;
    static readonly JSON = 365;
    static readonly KB = 366;
    static readonly KEEP = 367;
    static readonly KEEPFIXED = 368;
    static readonly KEY_SOURCE = 369;
    static readonly KEYS = 370;
    static readonly KEYSET = 371;
    static readonly LAG = 372;
    static readonly LAST = 373;
    static readonly LAST_VALUE = 374;
    static readonly LEAD = 375;
    static readonly LEVEL = 376;
    static readonly LIST = 377;
    static readonly LISTENER = 378;
    static readonly LISTENER_URL = 379;
    static readonly LOB_COMPACTION = 380;
    static readonly LOCAL = 381;
    static readonly LOCATION = 382;
    static readonly LOCK = 383;
    static readonly LOCK_ESCALATION = 384;
    static readonly LOGIN = 385;
    static readonly LOOP = 386;
    static readonly LOW = 387;
    static readonly MANUAL = 388;
    static readonly MARK = 389;
    static readonly MATERIALIZED = 390;
    static readonly MAX = 391;
    static readonly MAX_CPU_PERCENT = 392;
    static readonly MAX_DOP = 393;
    static readonly MAX_FILES = 394;
    static readonly MAX_IOPS_PER_VOLUME = 395;
    static readonly MAX_MEMORY_PERCENT = 396;
    static readonly MAX_PROCESSES = 397;
    static readonly MAX_QUEUE_READERS = 398;
    static readonly MAX_ROLLOVER_FILES = 399;
    static readonly MAXDOP = 400;
    static readonly MAXRECURSION = 401;
    static readonly MAXSIZE = 402;
    static readonly MB = 403;
    static readonly MEDIUM = 404;
    static readonly MEMORY_OPTIMIZED_DATA = 405;
    static readonly MESSAGE = 406;
    static readonly MIN = 407;
    static readonly MIN_ACTIVE_ROWVERSION = 408;
    static readonly MIN_CPU_PERCENT = 409;
    static readonly MIN_IOPS_PER_VOLUME = 410;
    static readonly MIN_MEMORY_PERCENT = 411;
    static readonly MINUTES = 412;
    static readonly MIRROR_ADDRESS = 413;
    static readonly MIXED_PAGE_ALLOCATION = 414;
    static readonly MODE = 415;
    static readonly MODIFY = 416;
    static readonly MOVE = 417;
    static readonly MULTI_USER = 418;
    static readonly NAME = 419;
    static readonly NESTED_TRIGGERS = 420;
    static readonly NEW_ACCOUNT = 421;
    static readonly NEW_BROKER = 422;
    static readonly NEW_PASSWORD = 423;
    static readonly NEXT = 424;
    static readonly NO = 425;
    static readonly NO_TRUNCATE = 426;
    static readonly NO_WAIT = 427;
    static readonly NOCOUNT = 428;
    static readonly NODES = 429;
    static readonly NOEXPAND = 430;
    static readonly NON_TRANSACTED_ACCESS = 431;
    static readonly NORECOMPUTE = 432;
    static readonly NORECOVERY = 433;
    static readonly NOWAIT = 434;
    static readonly NTILE = 435;
    static readonly NUMANODE = 436;
    static readonly NUMBER = 437;
    static readonly NUMERIC_ROUNDABORT = 438;
    static readonly OBJECT = 439;
    static readonly OFFLINE = 440;
    static readonly OFFSET = 441;
    static readonly OLD_ACCOUNT = 442;
    static readonly ONLINE = 443;
    static readonly ONLY = 444;
    static readonly OPEN_EXISTING = 445;
    static readonly OPTIMISTIC = 446;
    static readonly OPTIMIZE = 447;
    static readonly OUT = 448;
    static readonly OUTPUT = 449;
    static readonly OVERRIDE = 450;
    static readonly OWNER = 451;
    static readonly PAGE_VERIFY = 452;
    static readonly PARAMETERIZATION = 453;
    static readonly PARTITION = 454;
    static readonly PARTITIONS = 455;
    static readonly PARTNER = 456;
    static readonly PATH = 457;
    static readonly PERCENT_RANK = 458;
    static readonly PERCENTILE_CONT = 459;
    static readonly PERCENTILE_DISC = 460;
    static readonly POISON_MESSAGE_HANDLING = 461;
    static readonly POOL = 462;
    static readonly PORT = 463;
    static readonly PRECEDING = 464;
    static readonly PRIMARY_ROLE = 465;
    static readonly PRIOR = 466;
    static readonly PRIORITY = 467;
    static readonly PRIORITY_LEVEL = 468;
    static readonly PRIVATE = 469;
    static readonly PRIVATE_KEY = 470;
    static readonly PRIVILEGES = 471;
    static readonly PROCEDURE_NAME = 472;
    static readonly PROPERTY = 473;
    static readonly PROVIDER = 474;
    static readonly PROVIDER_KEY_NAME = 475;
    static readonly QUERY = 476;
    static readonly QUEUE = 477;
    static readonly QUEUE_DELAY = 478;
    static readonly QUOTED_IDENTIFIER = 479;
    static readonly RANGE = 480;
    static readonly RANK = 481;
    static readonly RC2 = 482;
    static readonly RC4 = 483;
    static readonly RC4_128 = 484;
    static readonly READ_COMMITTED_SNAPSHOT = 485;
    static readonly READ_ONLY = 486;
    static readonly READ_ONLY_ROUTING_LIST = 487;
    static readonly READ_WRITE = 488;
    static readonly READONLY = 489;
    static readonly REBUILD = 490;
    static readonly RECEIVE = 491;
    static readonly RECOMPILE = 492;
    static readonly RECOVERY = 493;
    static readonly RECURSIVE_TRIGGERS = 494;
    static readonly RELATIVE = 495;
    static readonly REMOTE = 496;
    static readonly REMOTE_SERVICE_NAME = 497;
    static readonly REMOVE = 498;
    static readonly REORGANIZE = 499;
    static readonly REPEATABLE = 500;
    static readonly REPLICA = 501;
    static readonly REQUEST_MAX_CPU_TIME_SEC = 502;
    static readonly REQUEST_MAX_MEMORY_GRANT_PERCENT = 503;
    static readonly REQUEST_MEMORY_GRANT_TIMEOUT_SEC = 504;
    static readonly REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT = 505;
    static readonly RESERVE_DISK_SPACE = 506;
    static readonly RESOURCE = 507;
    static readonly RESOURCE_MANAGER_LOCATION = 508;
    static readonly RESTRICTED_USER = 509;
    static readonly RETENTION = 510;
    static readonly ROBUST = 511;
    static readonly ROOT = 512;
    static readonly ROUTE = 513;
    static readonly ROW = 514;
    static readonly ROW_NUMBER = 515;
    static readonly ROWGUID = 516;
    static readonly ROWS = 517;
    static readonly SAMPLE = 518;
    static readonly SCHEMABINDING = 519;
    static readonly SCOPED = 520;
    static readonly SCROLL = 521;
    static readonly SCROLL_LOCKS = 522;
    static readonly SEARCH = 523;
    static readonly SECONDARY = 524;
    static readonly SECONDARY_ONLY = 525;
    static readonly SECONDARY_ROLE = 526;
    static readonly SECONDS = 527;
    static readonly SECRET = 528;
    static readonly SECURITY = 529;
    static readonly SECURITY_LOG = 530;
    static readonly SEEDING_MODE = 531;
    static readonly SELF = 532;
    static readonly SEMI_SENSITIVE = 533;
    static readonly SEND = 534;
    static readonly SENT = 535;
    static readonly SEQUENCE = 536;
    static readonly SERIALIZABLE = 537;
    static readonly SESSION_TIMEOUT = 538;
    static readonly SETERROR = 539;
    static readonly SHARE = 540;
    static readonly SHOWPLAN = 541;
    static readonly SIGNATURE = 542;
    static readonly SIMPLE = 543;
    static readonly SINGLE_USER = 544;
    static readonly SIZE = 545;
    static readonly SMALLINT = 546;
    static readonly SNAPSHOT = 547;
    static readonly SPATIAL_WINDOW_MAX_CELLS = 548;
    static readonly STANDBY = 549;
    static readonly START_DATE = 550;
    static readonly STATIC = 551;
    static readonly STATS_STREAM = 552;
    static readonly STATUS = 553;
    static readonly STATUSONLY = 554;
    static readonly STDEV = 555;
    static readonly STDEVP = 556;
    static readonly STOPLIST = 557;
    static readonly STRING_AGG = 558;
    static readonly STUFF = 559;
    static readonly SUBJECT = 560;
    static readonly SUBSCRIPTION = 561;
    static readonly SUM = 562;
    static readonly SUSPEND = 563;
    static readonly SYMMETRIC = 564;
    static readonly SYNCHRONOUS_COMMIT = 565;
    static readonly SYNONYM = 566;
    static readonly SYSTEM = 567;
    static readonly TAKE = 568;
    static readonly TARGET_RECOVERY_TIME = 569;
    static readonly TB = 570;
    static readonly TEXTIMAGE_ON = 571;
    static readonly THROW = 572;
    static readonly TIES = 573;
    static readonly TIME = 574;
    static readonly TIMEOUT = 575;
    static readonly TIMER = 576;
    static readonly TINYINT = 577;
    static readonly TORN_PAGE_DETECTION = 578;
    static readonly TRANSFORM_NOISE_WORDS = 579;
    static readonly TRIPLE_DES = 580;
    static readonly TRIPLE_DES_3KEY = 581;
    static readonly TRUSTWORTHY = 582;
    static readonly TRY = 583;
    static readonly TSQL = 584;
    static readonly TWO_DIGIT_YEAR_CUTOFF = 585;
    static readonly TYPE = 586;
    static readonly TYPE_WARNING = 587;
    static readonly UNBOUNDED = 588;
    static readonly UNCOMMITTED = 589;
    static readonly UNKNOWN = 590;
    static readonly UNLIMITED = 591;
    static readonly UOW = 592;
    static readonly USING = 593;
    static readonly VALID_XML = 594;
    static readonly VALIDATION = 595;
    static readonly VALUE = 596;
    static readonly VAR = 597;
    static readonly VARBINARY_KEYWORD = 598;
    static readonly VARP = 599;
    static readonly VIEW_METADATA = 600;
    static readonly VIEWS = 601;
    static readonly WAIT = 602;
    static readonly WELL_FORMED_XML = 603;
    static readonly WITHOUT_ARRAY_WRAPPER = 604;
    static readonly WORK = 605;
    static readonly WORKLOAD = 606;
    static readonly XML = 607;
    static readonly XMLDATA = 608;
    static readonly XMLNAMESPACES = 609;
    static readonly XMLSCHEMA = 610;
    static readonly XSINIL = 611;
    static readonly ZONE = 612;
    static readonly DOLLAR_ACTION = 613;
    static readonly ABSENT = 614;
    static readonly AES = 615;
    static readonly ALLOW_CONNECTIONS = 616;
    static readonly ALLOW_MULTIPLE_EVENT_LOSS = 617;
    static readonly ALLOW_SINGLE_EVENT_LOSS = 618;
    static readonly ANONYMOUS = 619;
    static readonly APPEND = 620;
    static readonly APPLICATION = 621;
    static readonly ASYMMETRIC = 622;
    static readonly ASYNCHRONOUS_COMMIT = 623;
    static readonly AUTHENTICATION = 624;
    static readonly AUTOMATED_BACKUP_PREFERENCE = 625;
    static readonly AUTOMATIC = 626;
    static readonly AVAILABILITY_MODE = 627;
    static readonly BEFORE = 628;
    static readonly BLOCK = 629;
    static readonly BLOCKSIZE = 630;
    static readonly BLOCKING_HIERARCHY = 631;
    static readonly BUFFER = 632;
    static readonly BUFFERCOUNT = 633;
    static readonly CACHE = 634;
    static readonly CALLED = 635;
    static readonly CERTIFICATE = 636;
    static readonly CHANGETABLE = 637;
    static readonly CHANGES = 638;
    static readonly CHECK_POLICY = 639;
    static readonly CHECK_EXPIRATION = 640;
    static readonly CLASSIFIER_FUNCTION = 641;
    static readonly CLUSTER = 642;
    static readonly COMPRESSION = 643;
    static readonly CONFIGURATION = 644;
    static readonly CONTAINMENT = 645;
    static readonly CONTEXT = 646;
    static readonly CONTINUE_AFTER_ERROR = 647;
    static readonly CONTRACT = 648;
    static readonly CONTRACT_NAME = 649;
    static readonly CONVERSATION = 650;
    static readonly COPY_ONLY = 651;
    static readonly CYCLE = 652;
    static readonly DATA_COMPRESSION = 653;
    static readonly DATA_SOURCE = 654;
    static readonly DATABASE_MIRRORING = 655;
    static readonly DEFAULT_DATABASE = 656;
    static readonly DEFAULT_SCHEMA = 657;
    static readonly DIAGNOSTICS = 658;
    static readonly DIFFERENTIAL = 659;
    static readonly DTC_SUPPORT = 660;
    static readonly ENABLED = 661;
    static readonly ENDPOINT = 662;
    static readonly ERROR = 663;
    static readonly EVENT = 664;
    static readonly EVENTDATA = 665;
    static readonly EVENT_RETENTION_MODE = 666;
    static readonly EXECUTABLE_FILE = 667;
    static readonly EXPIREDATE = 668;
    static readonly EXTENSION = 669;
    static readonly EXTERNAL_ACCESS = 670;
    static readonly FAILOVER = 671;
    static readonly FAILURECONDITIONLEVEL = 672;
    static readonly FAN_IN = 673;
    static readonly FILE_SNAPSHOT = 674;
    static readonly FORCESEEK = 675;
    static readonly FORCE_SERVICE_ALLOW_DATA_LOSS = 676;
    static readonly GET = 677;
    static readonly GOVERNOR = 678;
    static readonly HASHED = 679;
    static readonly HEALTHCHECKTIMEOUT = 680;
    static readonly IIF = 681;
    static readonly IO = 682;
    static readonly INCLUDE = 683;
    static readonly INCREMENT = 684;
    static readonly INFINITE = 685;
    static readonly INIT = 686;
    static readonly INSTEAD = 687;
    static readonly ISNULL = 688;
    static readonly KERBEROS = 689;
    static readonly KEY_PATH = 690;
    static readonly KEY_STORE_PROVIDER_NAME = 691;
    static readonly LANGUAGE = 692;
    static readonly LIBRARY = 693;
    static readonly LIFETIME = 694;
    static readonly LINUX = 695;
    static readonly LISTENER_IP = 696;
    static readonly LISTENER_PORT = 697;
    static readonly LOCAL_SERVICE_NAME = 698;
    static readonly LOG = 699;
    static readonly MATCHED = 700;
    static readonly MASTER = 701;
    static readonly MAX_MEMORY = 702;
    static readonly MAXTRANSFER = 703;
    static readonly MAXVALUE = 704;
    static readonly MAX_DISPATCH_LATENCY = 705;
    static readonly MAX_EVENT_SIZE = 706;
    static readonly MAX_SIZE = 707;
    static readonly MAX_OUTSTANDING_IO_PER_VOLUME = 708;
    static readonly MEDIADESCRIPTION = 709;
    static readonly MEDIANAME = 710;
    static readonly MEMBER = 711;
    static readonly MEMORY_PARTITION_MODE = 712;
    static readonly MESSAGE_FORWARDING = 713;
    static readonly MESSAGE_FORWARD_SIZE = 714;
    static readonly MINVALUE = 715;
    static readonly MIRROR = 716;
    static readonly MUST_CHANGE = 717;
    static readonly NOFORMAT = 718;
    static readonly NOINIT = 719;
    static readonly NONE = 720;
    static readonly NOREWIND = 721;
    static readonly NOSKIP = 722;
    static readonly NOUNLOAD = 723;
    static readonly NO_CHECKSUM = 724;
    static readonly NO_COMPRESSION = 725;
    static readonly NO_EVENT_LOSS = 726;
    static readonly NOTIFICATION = 727;
    static readonly NTLM = 728;
    static readonly OLD_PASSWORD = 729;
    static readonly ON_FAILURE = 730;
    static readonly PAGE = 731;
    static readonly PARAM_NODE = 732;
    static readonly PARTIAL = 733;
    static readonly PASSWORD = 734;
    static readonly PERMISSION_SET = 735;
    static readonly PER_CPU = 736;
    static readonly PER_DB = 737;
    static readonly PER_NODE = 738;
    static readonly PERSISTED = 739;
    static readonly PLATFORM = 740;
    static readonly POLICY = 741;
    static readonly PREDICATE = 742;
    static readonly PROCESS = 743;
    static readonly PROFILE = 744;
    static readonly PYTHON = 745;
    static readonly R = 746;
    static readonly READ_WRITE_FILEGROUPS = 747;
    static readonly REGENERATE = 748;
    static readonly RELATED_CONVERSATION = 749;
    static readonly RELATED_CONVERSATION_GROUP = 750;
    static readonly REQUIRED = 751;
    static readonly RESET = 752;
    static readonly RESTART = 753;
    static readonly RESUME = 754;
    static readonly RETAINDAYS = 755;
    static readonly RETURNS = 756;
    static readonly REWIND = 757;
    static readonly ROLE = 758;
    static readonly RSA_512 = 759;
    static readonly RSA_1024 = 760;
    static readonly RSA_2048 = 761;
    static readonly RSA_3072 = 762;
    static readonly RSA_4096 = 763;
    static readonly SAFETY = 764;
    static readonly SAFE = 765;
    static readonly SCHEDULER = 766;
    static readonly SCHEME = 767;
    static readonly SERVER = 768;
    static readonly SERVICE = 769;
    static readonly SERVICE_BROKER = 770;
    static readonly SERVICE_NAME = 771;
    static readonly SESSION = 772;
    static readonly SHRINKLOG = 773;
    static readonly SID = 774;
    static readonly SKIP_KEYWORD = 775;
    static readonly SOFTNUMA = 776;
    static readonly SOURCE = 777;
    static readonly SPECIFICATION = 778;
    static readonly SPLIT = 779;
    static readonly SQLDUMPERFLAGS = 780;
    static readonly SQLDUMPERPATH = 781;
    static readonly SQLDUMPERTIMEOUT = 782;
    static readonly STATE = 783;
    static readonly STATS = 784;
    static readonly START = 785;
    static readonly STARTED = 786;
    static readonly STARTUP_STATE = 787;
    static readonly STOP = 788;
    static readonly STOPPED = 789;
    static readonly STOP_ON_ERROR = 790;
    static readonly SUPPORTED = 791;
    static readonly TAPE = 792;
    static readonly TARGET = 793;
    static readonly TCP = 794;
    static readonly TRACK_CAUSALITY = 795;
    static readonly TRANSFER = 796;
    static readonly UNCHECKED = 797;
    static readonly UNLOCK = 798;
    static readonly UNSAFE = 799;
    static readonly URL = 800;
    static readonly USED = 801;
    static readonly VERBOSELOGGING = 802;
    static readonly VISIBILITY = 803;
    static readonly WINDOWS = 804;
    static readonly WITHOUT = 805;
    static readonly WITNESS = 806;
    static readonly VARCHAR = 807;
    static readonly NVARCHAR = 808;
    static readonly SPACE = 809;
    static readonly COMMENT = 810;
    static readonly LINE_COMMENT = 811;
    static readonly DOUBLE_QUOTE_ID = 812;
    static readonly SINGLE_QUOTE = 813;
    static readonly SQUARE_BRACKET_ID = 814;
    static readonly LOCAL_ID = 815;
    static readonly DECIMAL = 816;
    static readonly ID = 817;
    static readonly STRING = 818;
    static readonly BINARY = 819;
    static readonly FLOAT = 820;
    static readonly REAL = 821;
    static readonly EQUAL = 822;
    static readonly GREATER = 823;
    static readonly LESS = 824;
    static readonly EXCLAMATION = 825;
    static readonly PLUS_ASSIGN = 826;
    static readonly MINUS_ASSIGN = 827;
    static readonly MULT_ASSIGN = 828;
    static readonly DIV_ASSIGN = 829;
    static readonly MOD_ASSIGN = 830;
    static readonly AND_ASSIGN = 831;
    static readonly XOR_ASSIGN = 832;
    static readonly OR_ASSIGN = 833;
    static readonly DOUBLE_BAR = 834;
    static readonly DOT = 835;
    static readonly UNDERLINE = 836;
    static readonly AT = 837;
    static readonly SHARP = 838;
    static readonly DOLLAR = 839;
    static readonly LR_BRACKET = 840;
    static readonly RR_BRACKET = 841;
    static readonly COMMA = 842;
    static readonly SEMI = 843;
    static readonly COLON = 844;
    static readonly STAR = 845;
    static readonly DIVIDE = 846;
    static readonly MODULE = 847;
    static readonly PLUS = 848;
    static readonly MINUS = 849;
    static readonly BIT_NOT = 850;
    static readonly BIT_OR = 851;
    static readonly BIT_AND = 852;
    static readonly BIT_XOR = 853;
    static readonly IPV4_ADDR = 854;
    static readonly IPV6_ADDR = 855;
    static readonly ANSI_DEFAULTS = 856;
    static readonly ANSI_NULL_DFLT_OFF = 857;
    static readonly ANSI_NULL_DFLT_ON = 858;
    static readonly ARITHIGNORE = 859;
    static readonly FMTONLY = 860;
    static readonly FORCEPLAN = 861;
    static readonly IMPLICIT_TRANSACTIONS = 862;
    static readonly NOEXEC = 863;
    static readonly PARSEONLY = 864;
    static readonly REMOTE_PROC_TRANSACTIONS = 865;
    static readonly SHOWPLAN_ALL = 866;
    static readonly SHOWPLAN_TEXT = 867;
    static readonly SHOWPLAN_XML = 868;
    static readonly XACT_ABORT = 869;
    static readonly VERSION = 870;
    static readonly RULE_tsql_file = 0;
    static readonly RULE_batch = 1;
    static readonly RULE_batch_level_statement = 2;
    static readonly RULE_sql_clauses = 3;
    static readonly RULE_dml_clause = 4;
    static readonly RULE_ddl_clause = 5;
    static readonly RULE_backup_statement = 6;
    static readonly RULE_cfl_statement = 7;
    static readonly RULE_block_statement = 8;
    static readonly RULE_break_statement = 9;
    static readonly RULE_continue_statement = 10;
    static readonly RULE_goto_statement = 11;
    static readonly RULE_return_statement = 12;
    static readonly RULE_if_statement = 13;
    static readonly RULE_throw_statement = 14;
    static readonly RULE_throw_error_number = 15;
    static readonly RULE_throw_message = 16;
    static readonly RULE_throw_state = 17;
    static readonly RULE_try_catch_statement = 18;
    static readonly RULE_waitfor_statement = 19;
    static readonly RULE_while_statement = 20;
    static readonly RULE_print_statement = 21;
    static readonly RULE_raiseerror_statement = 22;
    static readonly RULE_empty_statement = 23;
    static readonly RULE_another_statement = 24;
    static readonly RULE_alter_application_role = 25;
    static readonly RULE_create_application_role = 26;
    static readonly RULE_drop_aggregate = 27;
    static readonly RULE_drop_application_role = 28;
    static readonly RULE_alter_assembly = 29;
    static readonly RULE_alter_assembly_start = 30;
    static readonly RULE_alter_assembly_clause = 31;
    static readonly RULE_alter_assembly_from_clause = 32;
    static readonly RULE_alter_assembly_from_clause_start = 33;
    static readonly RULE_alter_assembly_drop_clause = 34;
    static readonly RULE_alter_assembly_drop_multiple_files = 35;
    static readonly RULE_alter_assembly_drop = 36;
    static readonly RULE_alter_assembly_add_clause = 37;
    static readonly RULE_alter_asssembly_add_clause_start = 38;
    static readonly RULE_alter_assembly_client_file_clause = 39;
    static readonly RULE_alter_assembly_file_name = 40;
    static readonly RULE_alter_assembly_file_bits = 41;
    static readonly RULE_alter_assembly_as = 42;
    static readonly RULE_alter_assembly_with_clause = 43;
    static readonly RULE_alter_assembly_with = 44;
    static readonly RULE_client_assembly_specifier = 45;
    static readonly RULE_assembly_option = 46;
    static readonly RULE_network_file_share = 47;
    static readonly RULE_network_computer = 48;
    static readonly RULE_network_file_start = 49;
    static readonly RULE_file_path = 50;
    static readonly RULE_file_directory_path_separator = 51;
    static readonly RULE_local_file = 52;
    static readonly RULE_local_drive = 53;
    static readonly RULE_multiple_local_files = 54;
    static readonly RULE_multiple_local_file_start = 55;
    static readonly RULE_create_assembly = 56;
    static readonly RULE_drop_assembly = 57;
    static readonly RULE_alter_asymmetric_key = 58;
    static readonly RULE_alter_asymmetric_key_start = 59;
    static readonly RULE_asymmetric_key_option = 60;
    static readonly RULE_asymmetric_key_option_start = 61;
    static readonly RULE_asymmetric_key_password_change_option = 62;
    static readonly RULE_create_asymmetric_key = 63;
    static readonly RULE_drop_asymmetric_key = 64;
    static readonly RULE_alter_authorization = 65;
    static readonly RULE_authorization_grantee = 66;
    static readonly RULE_entity_to = 67;
    static readonly RULE_colon_colon = 68;
    static readonly RULE_alter_authorization_start = 69;
    static readonly RULE_alter_authorization_for_sql_database = 70;
    static readonly RULE_alter_authorization_for_azure_dw = 71;
    static readonly RULE_alter_authorization_for_parallel_dw = 72;
    static readonly RULE_class_type = 73;
    static readonly RULE_class_type_for_sql_database = 74;
    static readonly RULE_class_type_for_azure_dw = 75;
    static readonly RULE_class_type_for_parallel_dw = 76;
    static readonly RULE_drop_availability_group = 77;
    static readonly RULE_alter_availability_group = 78;
    static readonly RULE_alter_availability_group_start = 79;
    static readonly RULE_alter_availability_group_options = 80;
    static readonly RULE_ip_v4_failover = 81;
    static readonly RULE_ip_v6_failover = 82;
    static readonly RULE_create_or_alter_broker_priority = 83;
    static readonly RULE_drop_broker_priority = 84;
    static readonly RULE_alter_certificate = 85;
    static readonly RULE_alter_column_encryption_key = 86;
    static readonly RULE_create_column_encryption_key = 87;
    static readonly RULE_drop_certificate = 88;
    static readonly RULE_drop_column_encryption_key = 89;
    static readonly RULE_drop_column_master_key = 90;
    static readonly RULE_drop_contract = 91;
    static readonly RULE_drop_credential = 92;
    static readonly RULE_drop_cryptograhic_provider = 93;
    static readonly RULE_drop_database = 94;
    static readonly RULE_drop_database_audit_specification = 95;
    static readonly RULE_drop_database_encryption_key = 96;
    static readonly RULE_drop_database_scoped_credential = 97;
    static readonly RULE_drop_default = 98;
    static readonly RULE_drop_endpoint = 99;
    static readonly RULE_drop_external_data_source = 100;
    static readonly RULE_drop_external_file_format = 101;
    static readonly RULE_drop_external_library = 102;
    static readonly RULE_drop_external_resource_pool = 103;
    static readonly RULE_drop_external_table = 104;
    static readonly RULE_drop_event_notifications = 105;
    static readonly RULE_drop_event_session = 106;
    static readonly RULE_drop_fulltext_catalog = 107;
    static readonly RULE_drop_fulltext_index = 108;
    static readonly RULE_drop_fulltext_stoplist = 109;
    static readonly RULE_drop_login = 110;
    static readonly RULE_drop_master_key = 111;
    static readonly RULE_drop_message_type = 112;
    static readonly RULE_drop_partition_function = 113;
    static readonly RULE_drop_partition_scheme = 114;
    static readonly RULE_drop_queue = 115;
    static readonly RULE_drop_remote_service_binding = 116;
    static readonly RULE_drop_resource_pool = 117;
    static readonly RULE_drop_db_role = 118;
    static readonly RULE_drop_route = 119;
    static readonly RULE_drop_rule = 120;
    static readonly RULE_drop_schema = 121;
    static readonly RULE_drop_search_property_list = 122;
    static readonly RULE_drop_security_policy = 123;
    static readonly RULE_drop_sequence = 124;
    static readonly RULE_drop_server_audit = 125;
    static readonly RULE_drop_server_audit_specification = 126;
    static readonly RULE_drop_server_role = 127;
    static readonly RULE_drop_service = 128;
    static readonly RULE_drop_signature = 129;
    static readonly RULE_drop_statistics_name_azure_dw_and_pdw = 130;
    static readonly RULE_drop_symmetric_key = 131;
    static readonly RULE_drop_synonym = 132;
    static readonly RULE_drop_user = 133;
    static readonly RULE_drop_workload_group = 134;
    static readonly RULE_drop_xml_schema_collection = 135;
    static readonly RULE_disable_trigger = 136;
    static readonly RULE_enable_trigger = 137;
    static readonly RULE_lock_table = 138;
    static readonly RULE_truncate_table = 139;
    static readonly RULE_create_column_master_key = 140;
    static readonly RULE_alter_credential = 141;
    static readonly RULE_create_credential = 142;
    static readonly RULE_alter_cryptographic_provider = 143;
    static readonly RULE_create_cryptographic_provider = 144;
    static readonly RULE_create_event_notification = 145;
    static readonly RULE_create_or_alter_event_session = 146;
    static readonly RULE_event_session_predicate_expression = 147;
    static readonly RULE_event_session_predicate_factor = 148;
    static readonly RULE_event_session_predicate_leaf = 149;
    static readonly RULE_alter_external_data_source = 150;
    static readonly RULE_alter_external_library = 151;
    static readonly RULE_create_external_library = 152;
    static readonly RULE_alter_external_resource_pool = 153;
    static readonly RULE_create_external_resource_pool = 154;
    static readonly RULE_alter_fulltext_catalog = 155;
    static readonly RULE_create_fulltext_catalog = 156;
    static readonly RULE_alter_fulltext_stoplist = 157;
    static readonly RULE_create_fulltext_stoplist = 158;
    static readonly RULE_alter_login_sql_server = 159;
    static readonly RULE_create_login_sql_server = 160;
    static readonly RULE_alter_login_azure_sql = 161;
    static readonly RULE_create_login_azure_sql = 162;
    static readonly RULE_alter_login_azure_sql_dw_and_pdw = 163;
    static readonly RULE_create_login_pdw = 164;
    static readonly RULE_alter_master_key_sql_server = 165;
    static readonly RULE_create_master_key_sql_server = 166;
    static readonly RULE_alter_master_key_azure_sql = 167;
    static readonly RULE_create_master_key_azure_sql = 168;
    static readonly RULE_alter_message_type = 169;
    static readonly RULE_alter_partition_function = 170;
    static readonly RULE_alter_partition_scheme = 171;
    static readonly RULE_alter_remote_service_binding = 172;
    static readonly RULE_create_remote_service_binding = 173;
    static readonly RULE_create_resource_pool = 174;
    static readonly RULE_alter_resource_governor = 175;
    static readonly RULE_alter_db_role = 176;
    static readonly RULE_create_db_role = 177;
    static readonly RULE_create_route = 178;
    static readonly RULE_create_rule = 179;
    static readonly RULE_alter_schema_sql = 180;
    static readonly RULE_create_schema = 181;
    static readonly RULE_create_schema_azure_sql_dw_and_pdw = 182;
    static readonly RULE_alter_schema_azure_sql_dw_and_pdw = 183;
    static readonly RULE_create_search_property_list = 184;
    static readonly RULE_create_security_policy = 185;
    static readonly RULE_alter_sequence = 186;
    static readonly RULE_create_sequence = 187;
    static readonly RULE_alter_server_audit = 188;
    static readonly RULE_create_server_audit = 189;
    static readonly RULE_alter_server_audit_specification = 190;
    static readonly RULE_create_server_audit_specification = 191;
    static readonly RULE_alter_server_configuration = 192;
    static readonly RULE_alter_server_role = 193;
    static readonly RULE_create_server_role = 194;
    static readonly RULE_alter_server_role_pdw = 195;
    static readonly RULE_alter_service = 196;
    static readonly RULE_create_service = 197;
    static readonly RULE_alter_service_master_key = 198;
    static readonly RULE_alter_symmetric_key = 199;
    static readonly RULE_create_symmetric_key = 200;
    static readonly RULE_create_synonym = 201;
    static readonly RULE_alter_user = 202;
    static readonly RULE_create_user = 203;
    static readonly RULE_create_user_azure_sql_dw = 204;
    static readonly RULE_alter_user_azure_sql = 205;
    static readonly RULE_alter_workload_group = 206;
    static readonly RULE_create_workload_group = 207;
    static readonly RULE_create_xml_schema_collection = 208;
    static readonly RULE_create_queue = 209;
    static readonly RULE_queue_settings = 210;
    static readonly RULE_alter_queue = 211;
    static readonly RULE_queue_action = 212;
    static readonly RULE_queue_rebuild_options = 213;
    static readonly RULE_create_contract = 214;
    static readonly RULE_conversation_statement = 215;
    static readonly RULE_message_statement = 216;
    static readonly RULE_merge_statement = 217;
    static readonly RULE_when_matches = 218;
    static readonly RULE_merge_matched = 219;
    static readonly RULE_merge_not_matched = 220;
    static readonly RULE_delete_statement = 221;
    static readonly RULE_delete_statement_from = 222;
    static readonly RULE_insert_statement = 223;
    static readonly RULE_insert_statement_value = 224;
    static readonly RULE_receive_statement = 225;
    static readonly RULE_select_statement_standalone = 226;
    static readonly RULE_select_statement = 227;
    static readonly RULE_time = 228;
    static readonly RULE_update_statement = 229;
    static readonly RULE_output_clause = 230;
    static readonly RULE_output_dml_list_elem = 231;
    static readonly RULE_output_column_name = 232;
    static readonly RULE_create_database = 233;
    static readonly RULE_create_index = 234;
    static readonly RULE_create_xml_index = 235;
    static readonly RULE_create_or_alter_procedure = 236;
    static readonly RULE_create_or_alter_trigger = 237;
    static readonly RULE_create_or_alter_dml_trigger = 238;
    static readonly RULE_dml_trigger_option = 239;
    static readonly RULE_dml_trigger_operation = 240;
    static readonly RULE_create_or_alter_ddl_trigger = 241;
    static readonly RULE_ddl_trigger_operation = 242;
    static readonly RULE_create_or_alter_function = 243;
    static readonly RULE_func_body_returns_select = 244;
    static readonly RULE_func_body_returns_table = 245;
    static readonly RULE_func_body_returns_scalar = 246;
    static readonly RULE_procedure_param = 247;
    static readonly RULE_procedure_option = 248;
    static readonly RULE_function_option = 249;
    static readonly RULE_create_statistics = 250;
    static readonly RULE_update_statistics = 251;
    static readonly RULE_create_table = 252;
    static readonly RULE_table_indices = 253;
    static readonly RULE_table_options = 254;
    static readonly RULE_create_view = 255;
    static readonly RULE_view_attribute = 256;
    static readonly RULE_alter_table = 257;
    static readonly RULE_alter_database = 258;
    static readonly RULE_database_optionspec = 259;
    static readonly RULE_auto_option = 260;
    static readonly RULE_change_tracking_option = 261;
    static readonly RULE_change_tracking_option_list = 262;
    static readonly RULE_containment_option = 263;
    static readonly RULE_cursor_option = 264;
    static readonly RULE_alter_endpoint = 265;
    static readonly RULE_database_mirroring_option = 266;
    static readonly RULE_mirroring_set_option = 267;
    static readonly RULE_mirroring_partner = 268;
    static readonly RULE_mirroring_witness = 269;
    static readonly RULE_witness_partner_equal = 270;
    static readonly RULE_partner_option = 271;
    static readonly RULE_witness_option = 272;
    static readonly RULE_witness_server = 273;
    static readonly RULE_partner_server = 274;
    static readonly RULE_mirroring_host_port_seperator = 275;
    static readonly RULE_partner_server_tcp_prefix = 276;
    static readonly RULE_port_number = 277;
    static readonly RULE_host = 278;
    static readonly RULE_date_correlation_optimization_option = 279;
    static readonly RULE_db_encryption_option = 280;
    static readonly RULE_db_state_option = 281;
    static readonly RULE_db_update_option = 282;
    static readonly RULE_db_user_access_option = 283;
    static readonly RULE_delayed_durability_option = 284;
    static readonly RULE_external_access_option = 285;
    static readonly RULE_hadr_options = 286;
    static readonly RULE_mixed_page_allocation_option = 287;
    static readonly RULE_parameterization_option = 288;
    static readonly RULE_recovery_option = 289;
    static readonly RULE_service_broker_option = 290;
    static readonly RULE_snapshot_option = 291;
    static readonly RULE_sql_option = 292;
    static readonly RULE_target_recovery_time_option = 293;
    static readonly RULE_termination = 294;
    static readonly RULE_drop_index = 295;
    static readonly RULE_drop_relational_or_xml_or_spatial_index = 296;
    static readonly RULE_drop_backward_compatible_index = 297;
    static readonly RULE_drop_procedure = 298;
    static readonly RULE_drop_trigger = 299;
    static readonly RULE_drop_dml_trigger = 300;
    static readonly RULE_drop_ddl_trigger = 301;
    static readonly RULE_drop_function = 302;
    static readonly RULE_drop_statistics = 303;
    static readonly RULE_drop_table = 304;
    static readonly RULE_drop_view = 305;
    static readonly RULE_create_type = 306;
    static readonly RULE_drop_type = 307;
    static readonly RULE_rowset_function_limited = 308;
    static readonly RULE_openquery = 309;
    static readonly RULE_opendatasource = 310;
    static readonly RULE_declare_statement = 311;
    static readonly RULE_xml_declaration = 312;
    static readonly RULE_cursor_statement = 313;
    static readonly RULE_backup_database = 314;
    static readonly RULE_backup_log = 315;
    static readonly RULE_backup_certificate = 316;
    static readonly RULE_backup_master_key = 317;
    static readonly RULE_backup_service_master_key = 318;
    static readonly RULE_kill_statement = 319;
    static readonly RULE_kill_process = 320;
    static readonly RULE_kill_query_notification = 321;
    static readonly RULE_kill_stats_job = 322;
    static readonly RULE_execute_statement = 323;
    static readonly RULE_execute_body_batch = 324;
    static readonly RULE_execute_body = 325;
    static readonly RULE_execute_statement_arg = 326;
    static readonly RULE_execute_statement_arg_named = 327;
    static readonly RULE_execute_statement_arg_unnamed = 328;
    static readonly RULE_execute_parameter = 329;
    static readonly RULE_execute_var_string = 330;
    static readonly RULE_security_statement = 331;
    static readonly RULE_principal_id = 332;
    static readonly RULE_create_certificate = 333;
    static readonly RULE_existing_keys = 334;
    static readonly RULE_private_key_options = 335;
    static readonly RULE_generate_new_keys = 336;
    static readonly RULE_date_options = 337;
    static readonly RULE_open_key = 338;
    static readonly RULE_close_key = 339;
    static readonly RULE_create_key = 340;
    static readonly RULE_key_options = 341;
    static readonly RULE_algorithm = 342;
    static readonly RULE_encryption_mechanism = 343;
    static readonly RULE_decryption_mechanism = 344;
    static readonly RULE_grant_permission = 345;
    static readonly RULE_set_statement = 346;
    static readonly RULE_transaction_statement = 347;
    static readonly RULE_go_batch_statement = 348;
    static readonly RULE_go_statement = 349;
    static readonly RULE_use_statement = 350;
    static readonly RULE_setuser_statement = 351;
    static readonly RULE_reconfigure_statement = 352;
    static readonly RULE_shutdown_statement = 353;
    static readonly RULE_dbcc_special = 354;
    static readonly RULE_dbcc_clause = 355;
    static readonly RULE_dbcc_command = 356;
    static readonly RULE_dbcc_options = 357;
    static readonly RULE_execute_clause = 358;
    static readonly RULE_declare_local = 359;
    static readonly RULE_table_type_definition = 360;
    static readonly RULE_table_type_indices = 361;
    static readonly RULE_xml_type_definition = 362;
    static readonly RULE_xml_schema_collection = 363;
    static readonly RULE_column_def_table_constraints = 364;
    static readonly RULE_column_def_table_constraint = 365;
    static readonly RULE_column_definition = 366;
    static readonly RULE_materialized_column_definition = 367;
    static readonly RULE_column_constraint = 368;
    static readonly RULE_table_constraint = 369;
    static readonly RULE_on_delete = 370;
    static readonly RULE_on_update = 371;
    static readonly RULE_index_options = 372;
    static readonly RULE_index_option = 373;
    static readonly RULE_declare_cursor = 374;
    static readonly RULE_declare_set_cursor_common = 375;
    static readonly RULE_declare_set_cursor_common_partial = 376;
    static readonly RULE_fetch_cursor = 377;
    static readonly RULE_set_special = 378;
    static readonly RULE_constant_LOCAL_ID = 379;
    static readonly RULE_expression = 380;
    static readonly RULE_time_zone = 381;
    static readonly RULE_primitive_expression = 382;
    static readonly RULE_case_expression = 383;
    static readonly RULE_unary_operator_expression = 384;
    static readonly RULE_bracket_expression = 385;
    static readonly RULE_constant_expression = 386;
    static readonly RULE_subquery = 387;
    static readonly RULE_with_expression = 388;
    static readonly RULE_common_table_expression = 389;
    static readonly RULE_update_elem = 390;
    static readonly RULE_update_elem_merge = 391;
    static readonly RULE_search_condition = 392;
    static readonly RULE_predicate_br = 393;
    static readonly RULE_predicate = 394;
    static readonly RULE_query_expression = 395;
    static readonly RULE_sql_union = 396;
    static readonly RULE_query_specification = 397;
    static readonly RULE_top_clause = 398;
    static readonly RULE_top_percent = 399;
    static readonly RULE_top_count = 400;
    static readonly RULE_order_by_clause = 401;
    static readonly RULE_for_clause = 402;
    static readonly RULE_xml_common_directives = 403;
    static readonly RULE_order_by_expression = 404;
    static readonly RULE_group_by_item = 405;
    static readonly RULE_option_clause = 406;
    static readonly RULE_option = 407;
    static readonly RULE_optimize_for_arg = 408;
    static readonly RULE_select_list = 409;
    static readonly RULE_udt_method_arguments = 410;
    static readonly RULE_asterisk = 411;
    static readonly RULE_column_elem = 412;
    static readonly RULE_udt_elem = 413;
    static readonly RULE_expression_elem = 414;
    static readonly RULE_select_list_elem = 415;
    static readonly RULE_table_sources = 416;
    static readonly RULE_table_source = 417;
    static readonly RULE_table_source_item_joined = 418;
    static readonly RULE_table_source_item = 419;
    static readonly RULE_open_xml = 420;
    static readonly RULE_open_json = 421;
    static readonly RULE_json_declaration = 422;
    static readonly RULE_json_column_declaration = 423;
    static readonly RULE_schema_declaration = 424;
    static readonly RULE_column_declaration = 425;
    static readonly RULE_change_table = 426;
    static readonly RULE_change_table_changes = 427;
    static readonly RULE_change_table_version = 428;
    static readonly RULE_join_part = 429;
    static readonly RULE_join_on = 430;
    static readonly RULE_cross_join = 431;
    static readonly RULE_apply = 432;
    static readonly RULE_pivot = 433;
    static readonly RULE_unpivot = 434;
    static readonly RULE_pivot_clause = 435;
    static readonly RULE_unpivot_clause = 436;
    static readonly RULE_full_column_name_list = 437;
    static readonly RULE_table_name_with_hint = 438;
    static readonly RULE_rowset_function = 439;
    static readonly RULE_bulk_option = 440;
    static readonly RULE_derived_table = 441;
    static readonly RULE_function_call = 442;
    static readonly RULE_freetext_function = 443;
    static readonly RULE_freetext_predicate = 444;
    static readonly RULE_build_in_functions = 445;
    static readonly RULE_xml_data_type_methods = 446;
    static readonly RULE_value_method = 447;
    static readonly RULE_value_call = 448;
    static readonly RULE_query_method = 449;
    static readonly RULE_query_call = 450;
    static readonly RULE_exist_method = 451;
    static readonly RULE_exist_call = 452;
    static readonly RULE_modify_method = 453;
    static readonly RULE_modify_call = 454;
    static readonly RULE_nodes_method = 455;
    static readonly RULE_switch_section = 456;
    static readonly RULE_switch_search_condition_section = 457;
    static readonly RULE_as_column_alias = 458;
    static readonly RULE_as_table_alias = 459;
    static readonly RULE_table_alias = 460;
    static readonly RULE_with_table_hints = 461;
    static readonly RULE_insert_with_table_hints = 462;
    static readonly RULE_table_hint = 463;
    static readonly RULE_index_value = 464;
    static readonly RULE_column_alias_list = 465;
    static readonly RULE_column_alias = 466;
    static readonly RULE_table_value_constructor = 467;
    static readonly RULE_expression_list = 468;
    static readonly RULE_ranking_windowed_function = 469;
    static readonly RULE_aggregate_windowed_function = 470;
    static readonly RULE_analytic_windowed_function = 471;
    static readonly RULE_all_distinct_expression = 472;
    static readonly RULE_over_clause = 473;
    static readonly RULE_row_or_range_clause = 474;
    static readonly RULE_window_frame_extent = 475;
    static readonly RULE_window_frame_bound = 476;
    static readonly RULE_window_frame_preceding = 477;
    static readonly RULE_window_frame_following = 478;
    static readonly RULE_create_database_option = 479;
    static readonly RULE_database_filestream_option = 480;
    static readonly RULE_database_file_spec = 481;
    static readonly RULE_file_group = 482;
    static readonly RULE_file_spec = 483;
    static readonly RULE_entity_name = 484;
    static readonly RULE_entity_name_for_azure_dw = 485;
    static readonly RULE_entity_name_for_parallel_dw = 486;
    static readonly RULE_full_table_name = 487;
    static readonly RULE_table_name = 488;
    static readonly RULE_simple_name = 489;
    static readonly RULE_func_proc_name_schema = 490;
    static readonly RULE_func_proc_name_database_schema = 491;
    static readonly RULE_func_proc_name_server_database_schema = 492;
    static readonly RULE_ddl_object = 493;
    static readonly RULE_full_column_name = 494;
    static readonly RULE_column_name_list_with_order = 495;
    static readonly RULE_insert_column_name_list = 496;
    static readonly RULE_insert_column_id = 497;
    static readonly RULE_column_name_list = 498;
    static readonly RULE_cursor_name = 499;
    static readonly RULE_on_off = 500;
    static readonly RULE_clustered = 501;
    static readonly RULE_null_notnull = 502;
    static readonly RULE_null_or_default = 503;
    static readonly RULE_scalar_function_name = 504;
    static readonly RULE_begin_conversation_timer = 505;
    static readonly RULE_begin_conversation_dialog = 506;
    static readonly RULE_contract_name = 507;
    static readonly RULE_service_name = 508;
    static readonly RULE_end_conversation = 509;
    static readonly RULE_waitfor_conversation = 510;
    static readonly RULE_get_conversation = 511;
    static readonly RULE_queue_id = 512;
    static readonly RULE_send_conversation = 513;
    static readonly RULE_data_type = 514;
    static readonly RULE_default_value = 515;
    static readonly RULE_constant = 516;
    static readonly RULE_sign = 517;
    static readonly RULE_keyword = 518;
    static readonly RULE_id = 519;
    static readonly RULE_simple_id = 520;
    static readonly RULE_comparison_operator = 521;
    static readonly RULE_assignment_operator = 522;
    static readonly RULE_file_size = 523;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException;
    constructor(input: TokenStream);
    tsql_file(): Tsql_fileContext;
    batch(): BatchContext;
    batch_level_statement(): Batch_level_statementContext;
    sql_clauses(): Sql_clausesContext;
    dml_clause(): Dml_clauseContext;
    ddl_clause(): Ddl_clauseContext;
    backup_statement(): Backup_statementContext;
    cfl_statement(): Cfl_statementContext;
    block_statement(): Block_statementContext;
    break_statement(): Break_statementContext;
    continue_statement(): Continue_statementContext;
    goto_statement(): Goto_statementContext;
    return_statement(): Return_statementContext;
    if_statement(): If_statementContext;
    throw_statement(): Throw_statementContext;
    throw_error_number(): Throw_error_numberContext;
    throw_message(): Throw_messageContext;
    throw_state(): Throw_stateContext;
    try_catch_statement(): Try_catch_statementContext;
    waitfor_statement(): Waitfor_statementContext;
    while_statement(): While_statementContext;
    print_statement(): Print_statementContext;
    raiseerror_statement(): Raiseerror_statementContext;
    empty_statement(): Empty_statementContext;
    another_statement(): Another_statementContext;
    alter_application_role(): Alter_application_roleContext;
    create_application_role(): Create_application_roleContext;
    drop_aggregate(): Drop_aggregateContext;
    drop_application_role(): Drop_application_roleContext;
    alter_assembly(): Alter_assemblyContext;
    alter_assembly_start(): Alter_assembly_startContext;
    alter_assembly_clause(): Alter_assembly_clauseContext;
    alter_assembly_from_clause(): Alter_assembly_from_clauseContext;
    alter_assembly_from_clause_start(): Alter_assembly_from_clause_startContext;
    alter_assembly_drop_clause(): Alter_assembly_drop_clauseContext;
    alter_assembly_drop_multiple_files(): Alter_assembly_drop_multiple_filesContext;
    alter_assembly_drop(): Alter_assembly_dropContext;
    alter_assembly_add_clause(): Alter_assembly_add_clauseContext;
    alter_asssembly_add_clause_start(): Alter_asssembly_add_clause_startContext;
    alter_assembly_client_file_clause(): Alter_assembly_client_file_clauseContext;
    alter_assembly_file_name(): Alter_assembly_file_nameContext;
    alter_assembly_file_bits(): Alter_assembly_file_bitsContext;
    alter_assembly_as(): Alter_assembly_asContext;
    alter_assembly_with_clause(): Alter_assembly_with_clauseContext;
    alter_assembly_with(): Alter_assembly_withContext;
    client_assembly_specifier(): Client_assembly_specifierContext;
    assembly_option(): Assembly_optionContext;
    assembly_option(_p: number): Assembly_optionContext;
    network_file_share(): Network_file_shareContext;
    network_computer(): Network_computerContext;
    network_file_start(): Network_file_startContext;
    file_path(): File_pathContext;
    file_directory_path_separator(): File_directory_path_separatorContext;
    local_file(): Local_fileContext;
    local_drive(): Local_driveContext;
    multiple_local_files(): Multiple_local_filesContext;
    multiple_local_file_start(): Multiple_local_file_startContext;
    create_assembly(): Create_assemblyContext;
    drop_assembly(): Drop_assemblyContext;
    alter_asymmetric_key(): Alter_asymmetric_keyContext;
    alter_asymmetric_key_start(): Alter_asymmetric_key_startContext;
    asymmetric_key_option(): Asymmetric_key_optionContext;
    asymmetric_key_option_start(): Asymmetric_key_option_startContext;
    asymmetric_key_password_change_option(): Asymmetric_key_password_change_optionContext;
    create_asymmetric_key(): Create_asymmetric_keyContext;
    drop_asymmetric_key(): Drop_asymmetric_keyContext;
    alter_authorization(): Alter_authorizationContext;
    authorization_grantee(): Authorization_granteeContext;
    entity_to(): Entity_toContext;
    colon_colon(): Colon_colonContext;
    alter_authorization_start(): Alter_authorization_startContext;
    alter_authorization_for_sql_database(): Alter_authorization_for_sql_databaseContext;
    alter_authorization_for_azure_dw(): Alter_authorization_for_azure_dwContext;
    alter_authorization_for_parallel_dw(): Alter_authorization_for_parallel_dwContext;
    class_type(): Class_typeContext;
    class_type_for_sql_database(): Class_type_for_sql_databaseContext;
    class_type_for_azure_dw(): Class_type_for_azure_dwContext;
    class_type_for_parallel_dw(): Class_type_for_parallel_dwContext;
    drop_availability_group(): Drop_availability_groupContext;
    alter_availability_group(): Alter_availability_groupContext;
    alter_availability_group_start(): Alter_availability_group_startContext;
    alter_availability_group_options(): Alter_availability_group_optionsContext;
    ip_v4_failover(): Ip_v4_failoverContext;
    ip_v6_failover(): Ip_v6_failoverContext;
    create_or_alter_broker_priority(): Create_or_alter_broker_priorityContext;
    drop_broker_priority(): Drop_broker_priorityContext;
    alter_certificate(): Alter_certificateContext;
    alter_column_encryption_key(): Alter_column_encryption_keyContext;
    create_column_encryption_key(): Create_column_encryption_keyContext;
    drop_certificate(): Drop_certificateContext;
    drop_column_encryption_key(): Drop_column_encryption_keyContext;
    drop_column_master_key(): Drop_column_master_keyContext;
    drop_contract(): Drop_contractContext;
    drop_credential(): Drop_credentialContext;
    drop_cryptograhic_provider(): Drop_cryptograhic_providerContext;
    drop_database(): Drop_databaseContext;
    drop_database_audit_specification(): Drop_database_audit_specificationContext;
    drop_database_encryption_key(): Drop_database_encryption_keyContext;
    drop_database_scoped_credential(): Drop_database_scoped_credentialContext;
    drop_default(): Drop_defaultContext;
    drop_endpoint(): Drop_endpointContext;
    drop_external_data_source(): Drop_external_data_sourceContext;
    drop_external_file_format(): Drop_external_file_formatContext;
    drop_external_library(): Drop_external_libraryContext;
    drop_external_resource_pool(): Drop_external_resource_poolContext;
    drop_external_table(): Drop_external_tableContext;
    drop_event_notifications(): Drop_event_notificationsContext;
    drop_event_session(): Drop_event_sessionContext;
    drop_fulltext_catalog(): Drop_fulltext_catalogContext;
    drop_fulltext_index(): Drop_fulltext_indexContext;
    drop_fulltext_stoplist(): Drop_fulltext_stoplistContext;
    drop_login(): Drop_loginContext;
    drop_master_key(): Drop_master_keyContext;
    drop_message_type(): Drop_message_typeContext;
    drop_partition_function(): Drop_partition_functionContext;
    drop_partition_scheme(): Drop_partition_schemeContext;
    drop_queue(): Drop_queueContext;
    drop_remote_service_binding(): Drop_remote_service_bindingContext;
    drop_resource_pool(): Drop_resource_poolContext;
    drop_db_role(): Drop_db_roleContext;
    drop_route(): Drop_routeContext;
    drop_rule(): Drop_ruleContext;
    drop_schema(): Drop_schemaContext;
    drop_search_property_list(): Drop_search_property_listContext;
    drop_security_policy(): Drop_security_policyContext;
    drop_sequence(): Drop_sequenceContext;
    drop_server_audit(): Drop_server_auditContext;
    drop_server_audit_specification(): Drop_server_audit_specificationContext;
    drop_server_role(): Drop_server_roleContext;
    drop_service(): Drop_serviceContext;
    drop_signature(): Drop_signatureContext;
    drop_statistics_name_azure_dw_and_pdw(): Drop_statistics_name_azure_dw_and_pdwContext;
    drop_symmetric_key(): Drop_symmetric_keyContext;
    drop_synonym(): Drop_synonymContext;
    drop_user(): Drop_userContext;
    drop_workload_group(): Drop_workload_groupContext;
    drop_xml_schema_collection(): Drop_xml_schema_collectionContext;
    disable_trigger(): Disable_triggerContext;
    enable_trigger(): Enable_triggerContext;
    lock_table(): Lock_tableContext;
    truncate_table(): Truncate_tableContext;
    create_column_master_key(): Create_column_master_keyContext;
    alter_credential(): Alter_credentialContext;
    create_credential(): Create_credentialContext;
    alter_cryptographic_provider(): Alter_cryptographic_providerContext;
    create_cryptographic_provider(): Create_cryptographic_providerContext;
    create_event_notification(): Create_event_notificationContext;
    create_or_alter_event_session(): Create_or_alter_event_sessionContext;
    event_session_predicate_expression(): Event_session_predicate_expressionContext;
    event_session_predicate_factor(): Event_session_predicate_factorContext;
    event_session_predicate_leaf(): Event_session_predicate_leafContext;
    alter_external_data_source(): Alter_external_data_sourceContext;
    alter_external_library(): Alter_external_libraryContext;
    create_external_library(): Create_external_libraryContext;
    alter_external_resource_pool(): Alter_external_resource_poolContext;
    create_external_resource_pool(): Create_external_resource_poolContext;
    alter_fulltext_catalog(): Alter_fulltext_catalogContext;
    create_fulltext_catalog(): Create_fulltext_catalogContext;
    alter_fulltext_stoplist(): Alter_fulltext_stoplistContext;
    create_fulltext_stoplist(): Create_fulltext_stoplistContext;
    alter_login_sql_server(): Alter_login_sql_serverContext;
    create_login_sql_server(): Create_login_sql_serverContext;
    alter_login_azure_sql(): Alter_login_azure_sqlContext;
    create_login_azure_sql(): Create_login_azure_sqlContext;
    alter_login_azure_sql_dw_and_pdw(): Alter_login_azure_sql_dw_and_pdwContext;
    create_login_pdw(): Create_login_pdwContext;
    alter_master_key_sql_server(): Alter_master_key_sql_serverContext;
    create_master_key_sql_server(): Create_master_key_sql_serverContext;
    alter_master_key_azure_sql(): Alter_master_key_azure_sqlContext;
    create_master_key_azure_sql(): Create_master_key_azure_sqlContext;
    alter_message_type(): Alter_message_typeContext;
    alter_partition_function(): Alter_partition_functionContext;
    alter_partition_scheme(): Alter_partition_schemeContext;
    alter_remote_service_binding(): Alter_remote_service_bindingContext;
    create_remote_service_binding(): Create_remote_service_bindingContext;
    create_resource_pool(): Create_resource_poolContext;
    alter_resource_governor(): Alter_resource_governorContext;
    alter_db_role(): Alter_db_roleContext;
    create_db_role(): Create_db_roleContext;
    create_route(): Create_routeContext;
    create_rule(): Create_ruleContext;
    alter_schema_sql(): Alter_schema_sqlContext;
    create_schema(): Create_schemaContext;
    create_schema_azure_sql_dw_and_pdw(): Create_schema_azure_sql_dw_and_pdwContext;
    alter_schema_azure_sql_dw_and_pdw(): Alter_schema_azure_sql_dw_and_pdwContext;
    create_search_property_list(): Create_search_property_listContext;
    create_security_policy(): Create_security_policyContext;
    alter_sequence(): Alter_sequenceContext;
    create_sequence(): Create_sequenceContext;
    alter_server_audit(): Alter_server_auditContext;
    create_server_audit(): Create_server_auditContext;
    alter_server_audit_specification(): Alter_server_audit_specificationContext;
    create_server_audit_specification(): Create_server_audit_specificationContext;
    alter_server_configuration(): Alter_server_configurationContext;
    alter_server_role(): Alter_server_roleContext;
    create_server_role(): Create_server_roleContext;
    alter_server_role_pdw(): Alter_server_role_pdwContext;
    alter_service(): Alter_serviceContext;
    create_service(): Create_serviceContext;
    alter_service_master_key(): Alter_service_master_keyContext;
    alter_symmetric_key(): Alter_symmetric_keyContext;
    create_symmetric_key(): Create_symmetric_keyContext;
    create_synonym(): Create_synonymContext;
    alter_user(): Alter_userContext;
    create_user(): Create_userContext;
    create_user_azure_sql_dw(): Create_user_azure_sql_dwContext;
    alter_user_azure_sql(): Alter_user_azure_sqlContext;
    alter_workload_group(): Alter_workload_groupContext;
    create_workload_group(): Create_workload_groupContext;
    create_xml_schema_collection(): Create_xml_schema_collectionContext;
    create_queue(): Create_queueContext;
    queue_settings(): Queue_settingsContext;
    alter_queue(): Alter_queueContext;
    queue_action(): Queue_actionContext;
    queue_rebuild_options(): Queue_rebuild_optionsContext;
    create_contract(): Create_contractContext;
    conversation_statement(): Conversation_statementContext;
    message_statement(): Message_statementContext;
    merge_statement(): Merge_statementContext;
    when_matches(): When_matchesContext;
    merge_matched(): Merge_matchedContext;
    merge_not_matched(): Merge_not_matchedContext;
    delete_statement(): Delete_statementContext;
    delete_statement_from(): Delete_statement_fromContext;
    insert_statement(): Insert_statementContext;
    insert_statement_value(): Insert_statement_valueContext;
    receive_statement(): Receive_statementContext;
    select_statement_standalone(): Select_statement_standaloneContext;
    select_statement(): Select_statementContext;
    time(): TimeContext;
    update_statement(): Update_statementContext;
    output_clause(): Output_clauseContext;
    output_dml_list_elem(): Output_dml_list_elemContext;
    output_column_name(): Output_column_nameContext;
    create_database(): Create_databaseContext;
    create_index(): Create_indexContext;
    create_xml_index(): Create_xml_indexContext;
    create_or_alter_procedure(): Create_or_alter_procedureContext;
    create_or_alter_trigger(): Create_or_alter_triggerContext;
    create_or_alter_dml_trigger(): Create_or_alter_dml_triggerContext;
    dml_trigger_option(): Dml_trigger_optionContext;
    dml_trigger_operation(): Dml_trigger_operationContext;
    create_or_alter_ddl_trigger(): Create_or_alter_ddl_triggerContext;
    ddl_trigger_operation(): Ddl_trigger_operationContext;
    create_or_alter_function(): Create_or_alter_functionContext;
    func_body_returns_select(): Func_body_returns_selectContext;
    func_body_returns_table(): Func_body_returns_tableContext;
    func_body_returns_scalar(): Func_body_returns_scalarContext;
    procedure_param(): Procedure_paramContext;
    procedure_option(): Procedure_optionContext;
    function_option(): Function_optionContext;
    create_statistics(): Create_statisticsContext;
    update_statistics(): Update_statisticsContext;
    create_table(): Create_tableContext;
    table_indices(): Table_indicesContext;
    table_options(): Table_optionsContext;
    create_view(): Create_viewContext;
    view_attribute(): View_attributeContext;
    alter_table(): Alter_tableContext;
    alter_database(): Alter_databaseContext;
    database_optionspec(): Database_optionspecContext;
    auto_option(): Auto_optionContext;
    change_tracking_option(): Change_tracking_optionContext;
    change_tracking_option_list(): Change_tracking_option_listContext;
    containment_option(): Containment_optionContext;
    cursor_option(): Cursor_optionContext;
    alter_endpoint(): Alter_endpointContext;
    database_mirroring_option(): Database_mirroring_optionContext;
    mirroring_set_option(): Mirroring_set_optionContext;
    mirroring_partner(): Mirroring_partnerContext;
    mirroring_witness(): Mirroring_witnessContext;
    witness_partner_equal(): Witness_partner_equalContext;
    partner_option(): Partner_optionContext;
    witness_option(): Witness_optionContext;
    witness_server(): Witness_serverContext;
    partner_server(): Partner_serverContext;
    mirroring_host_port_seperator(): Mirroring_host_port_seperatorContext;
    partner_server_tcp_prefix(): Partner_server_tcp_prefixContext;
    port_number(): Port_numberContext;
    host(): HostContext;
    date_correlation_optimization_option(): Date_correlation_optimization_optionContext;
    db_encryption_option(): Db_encryption_optionContext;
    db_state_option(): Db_state_optionContext;
    db_update_option(): Db_update_optionContext;
    db_user_access_option(): Db_user_access_optionContext;
    delayed_durability_option(): Delayed_durability_optionContext;
    external_access_option(): External_access_optionContext;
    hadr_options(): Hadr_optionsContext;
    mixed_page_allocation_option(): Mixed_page_allocation_optionContext;
    parameterization_option(): Parameterization_optionContext;
    recovery_option(): Recovery_optionContext;
    service_broker_option(): Service_broker_optionContext;
    snapshot_option(): Snapshot_optionContext;
    sql_option(): Sql_optionContext;
    target_recovery_time_option(): Target_recovery_time_optionContext;
    termination(): TerminationContext;
    drop_index(): Drop_indexContext;
    drop_relational_or_xml_or_spatial_index(): Drop_relational_or_xml_or_spatial_indexContext;
    drop_backward_compatible_index(): Drop_backward_compatible_indexContext;
    drop_procedure(): Drop_procedureContext;
    drop_trigger(): Drop_triggerContext;
    drop_dml_trigger(): Drop_dml_triggerContext;
    drop_ddl_trigger(): Drop_ddl_triggerContext;
    drop_function(): Drop_functionContext;
    drop_statistics(): Drop_statisticsContext;
    drop_table(): Drop_tableContext;
    drop_view(): Drop_viewContext;
    create_type(): Create_typeContext;
    drop_type(): Drop_typeContext;
    rowset_function_limited(): Rowset_function_limitedContext;
    openquery(): OpenqueryContext;
    opendatasource(): OpendatasourceContext;
    declare_statement(): Declare_statementContext;
    xml_declaration(): Xml_declarationContext;
    cursor_statement(): Cursor_statementContext;
    backup_database(): Backup_databaseContext;
    backup_log(): Backup_logContext;
    backup_certificate(): Backup_certificateContext;
    backup_master_key(): Backup_master_keyContext;
    backup_service_master_key(): Backup_service_master_keyContext;
    kill_statement(): Kill_statementContext;
    kill_process(): Kill_processContext;
    kill_query_notification(): Kill_query_notificationContext;
    kill_stats_job(): Kill_stats_jobContext;
    execute_statement(): Execute_statementContext;
    execute_body_batch(): Execute_body_batchContext;
    execute_body(): Execute_bodyContext;
    execute_statement_arg(): Execute_statement_argContext;
    execute_statement_arg_named(): Execute_statement_arg_namedContext;
    execute_statement_arg_unnamed(): Execute_statement_arg_unnamedContext;
    execute_parameter(): Execute_parameterContext;
    execute_var_string(): Execute_var_stringContext;
    security_statement(): Security_statementContext;
    principal_id(): Principal_idContext;
    create_certificate(): Create_certificateContext;
    existing_keys(): Existing_keysContext;
    private_key_options(): Private_key_optionsContext;
    generate_new_keys(): Generate_new_keysContext;
    date_options(): Date_optionsContext;
    open_key(): Open_keyContext;
    close_key(): Close_keyContext;
    create_key(): Create_keyContext;
    key_options(): Key_optionsContext;
    algorithm(): AlgorithmContext;
    encryption_mechanism(): Encryption_mechanismContext;
    decryption_mechanism(): Decryption_mechanismContext;
    grant_permission(): Grant_permissionContext;
    set_statement(): Set_statementContext;
    transaction_statement(): Transaction_statementContext;
    go_batch_statement(): Go_batch_statementContext;
    go_statement(): Go_statementContext;
    use_statement(): Use_statementContext;
    setuser_statement(): Setuser_statementContext;
    reconfigure_statement(): Reconfigure_statementContext;
    shutdown_statement(): Shutdown_statementContext;
    dbcc_special(): Dbcc_specialContext;
    dbcc_clause(): Dbcc_clauseContext;
    dbcc_command(): Dbcc_commandContext;
    dbcc_options(): Dbcc_optionsContext;
    execute_clause(): Execute_clauseContext;
    declare_local(): Declare_localContext;
    table_type_definition(): Table_type_definitionContext;
    table_type_indices(): Table_type_indicesContext;
    xml_type_definition(): Xml_type_definitionContext;
    xml_schema_collection(): Xml_schema_collectionContext;
    column_def_table_constraints(): Column_def_table_constraintsContext;
    column_def_table_constraint(): Column_def_table_constraintContext;
    column_definition(): Column_definitionContext;
    materialized_column_definition(): Materialized_column_definitionContext;
    column_constraint(): Column_constraintContext;
    table_constraint(): Table_constraintContext;
    on_delete(): On_deleteContext;
    on_update(): On_updateContext;
    index_options(): Index_optionsContext;
    index_option(): Index_optionContext;
    declare_cursor(): Declare_cursorContext;
    declare_set_cursor_common(): Declare_set_cursor_commonContext;
    declare_set_cursor_common_partial(): Declare_set_cursor_common_partialContext;
    fetch_cursor(): Fetch_cursorContext;
    set_special(): Set_specialContext;
    constant_LOCAL_ID(): Constant_LOCAL_IDContext;
    expression(): ExpressionContext;
    expression(_p: number): ExpressionContext;
    time_zone(): Time_zoneContext;
    primitive_expression(): Primitive_expressionContext;
    case_expression(): Case_expressionContext;
    unary_operator_expression(): Unary_operator_expressionContext;
    bracket_expression(): Bracket_expressionContext;
    constant_expression(): Constant_expressionContext;
    subquery(): SubqueryContext;
    with_expression(): With_expressionContext;
    common_table_expression(): Common_table_expressionContext;
    update_elem(): Update_elemContext;
    update_elem_merge(): Update_elem_mergeContext;
    search_condition(): Search_conditionContext;
    predicate_br(): Predicate_brContext;
    predicate(): PredicateContext;
    query_expression(): Query_expressionContext;
    sql_union(): Sql_unionContext;
    query_specification(): Query_specificationContext;
    top_clause(): Top_clauseContext;
    top_percent(): Top_percentContext;
    top_count(): Top_countContext;
    order_by_clause(): Order_by_clauseContext;
    for_clause(): For_clauseContext;
    xml_common_directives(): Xml_common_directivesContext;
    order_by_expression(): Order_by_expressionContext;
    group_by_item(): Group_by_itemContext;
    option_clause(): Option_clauseContext;
    option(): OptionContext;
    optimize_for_arg(): Optimize_for_argContext;
    select_list(): Select_listContext;
    udt_method_arguments(): Udt_method_argumentsContext;
    asterisk(): AsteriskContext;
    column_elem(): Column_elemContext;
    udt_elem(): Udt_elemContext;
    expression_elem(): Expression_elemContext;
    select_list_elem(): Select_list_elemContext;
    table_sources(): Table_sourcesContext;
    table_source(): Table_sourceContext;
    table_source_item_joined(): Table_source_item_joinedContext;
    table_source_item(): Table_source_itemContext;
    open_xml(): Open_xmlContext;
    open_json(): Open_jsonContext;
    json_declaration(): Json_declarationContext;
    json_column_declaration(): Json_column_declarationContext;
    schema_declaration(): Schema_declarationContext;
    column_declaration(): Column_declarationContext;
    change_table(): Change_tableContext;
    change_table_changes(): Change_table_changesContext;
    change_table_version(): Change_table_versionContext;
    join_part(): Join_partContext;
    join_on(): Join_onContext;
    cross_join(): Cross_joinContext;
    apply(): ApplyContext;
    pivot(): PivotContext;
    unpivot(): UnpivotContext;
    pivot_clause(): Pivot_clauseContext;
    unpivot_clause(): Unpivot_clauseContext;
    full_column_name_list(): Full_column_name_listContext;
    table_name_with_hint(): Table_name_with_hintContext;
    rowset_function(): Rowset_functionContext;
    bulk_option(): Bulk_optionContext;
    derived_table(): Derived_tableContext;
    function_call(): Function_callContext;
    freetext_function(): Freetext_functionContext;
    freetext_predicate(): Freetext_predicateContext;
    build_in_functions(): Build_in_functionsContext;
    xml_data_type_methods(): Xml_data_type_methodsContext;
    value_method(): Value_methodContext;
    value_call(): Value_callContext;
    query_method(): Query_methodContext;
    query_call(): Query_callContext;
    exist_method(): Exist_methodContext;
    exist_call(): Exist_callContext;
    modify_method(): Modify_methodContext;
    modify_call(): Modify_callContext;
    nodes_method(): Nodes_methodContext;
    switch_section(): Switch_sectionContext;
    switch_search_condition_section(): Switch_search_condition_sectionContext;
    as_column_alias(): As_column_aliasContext;
    as_table_alias(): As_table_aliasContext;
    table_alias(): Table_aliasContext;
    with_table_hints(): With_table_hintsContext;
    insert_with_table_hints(): Insert_with_table_hintsContext;
    table_hint(): Table_hintContext;
    index_value(): Index_valueContext;
    column_alias_list(): Column_alias_listContext;
    column_alias(): Column_aliasContext;
    table_value_constructor(): Table_value_constructorContext;
    expression_list(): Expression_listContext;
    ranking_windowed_function(): Ranking_windowed_functionContext;
    aggregate_windowed_function(): Aggregate_windowed_functionContext;
    analytic_windowed_function(): Analytic_windowed_functionContext;
    all_distinct_expression(): All_distinct_expressionContext;
    over_clause(): Over_clauseContext;
    row_or_range_clause(): Row_or_range_clauseContext;
    window_frame_extent(): Window_frame_extentContext;
    window_frame_bound(): Window_frame_boundContext;
    window_frame_preceding(): Window_frame_precedingContext;
    window_frame_following(): Window_frame_followingContext;
    create_database_option(): Create_database_optionContext;
    database_filestream_option(): Database_filestream_optionContext;
    database_file_spec(): Database_file_specContext;
    file_group(): File_groupContext;
    file_spec(): File_specContext;
    entity_name(): Entity_nameContext;
    entity_name_for_azure_dw(): Entity_name_for_azure_dwContext;
    entity_name_for_parallel_dw(): Entity_name_for_parallel_dwContext;
    full_table_name(): Full_table_nameContext;
    table_name(): Table_nameContext;
    simple_name(): Simple_nameContext;
    func_proc_name_schema(): Func_proc_name_schemaContext;
    func_proc_name_database_schema(): Func_proc_name_database_schemaContext;
    func_proc_name_server_database_schema(): Func_proc_name_server_database_schemaContext;
    ddl_object(): Ddl_objectContext;
    full_column_name(): Full_column_nameContext;
    column_name_list_with_order(): Column_name_list_with_orderContext;
    insert_column_name_list(): Insert_column_name_listContext;
    insert_column_id(): Insert_column_idContext;
    column_name_list(): Column_name_listContext;
    cursor_name(): Cursor_nameContext;
    on_off(): On_offContext;
    clustered(): ClusteredContext;
    null_notnull(): Null_notnullContext;
    null_or_default(): Null_or_defaultContext;
    scalar_function_name(): Scalar_function_nameContext;
    begin_conversation_timer(): Begin_conversation_timerContext;
    begin_conversation_dialog(): Begin_conversation_dialogContext;
    contract_name(): Contract_nameContext;
    service_name(): Service_nameContext;
    end_conversation(): End_conversationContext;
    waitfor_conversation(): Waitfor_conversationContext;
    get_conversation(): Get_conversationContext;
    queue_id(): Queue_idContext;
    send_conversation(): Send_conversationContext;
    data_type(): Data_typeContext;
    default_value(): Default_valueContext;
    constant(): ConstantContext;
    sign(): SignContext;
    keyword(): KeywordContext;
    id(): IdContext;
    simple_id(): Simple_idContext;
    comparison_operator(): Comparison_operatorContext;
    assignment_operator(): Assignment_operatorContext;
    file_size(): File_sizeContext;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private assembly_option_sempred;
    private expression_sempred;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    private static readonly _serializedATNSegment3;
    private static readonly _serializedATNSegment4;
    private static readonly _serializedATNSegment5;
    private static readonly _serializedATNSegment6;
    private static readonly _serializedATNSegment7;
    private static readonly _serializedATNSegment8;
    private static readonly _serializedATNSegment9;
    private static readonly _serializedATNSegment10;
    private static readonly _serializedATNSegment11;
    private static readonly _serializedATNSegment12;
    private static readonly _serializedATNSegment13;
    private static readonly _serializedATNSegment14;
    private static readonly _serializedATNSegment15;
    private static readonly _serializedATNSegment16;
    private static readonly _serializedATNSegment17;
    private static readonly _serializedATNSegment18;
    private static readonly _serializedATNSegment19;
    private static readonly _serializedATNSegment20;
    private static readonly _serializedATNSegment21;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
export declare class Tsql_fileContext extends ParserRuleContext {
    EOF(): TerminalNode;
    batch(): BatchContext[];
    batch(i: number): BatchContext;
    execute_body_batch(): Execute_body_batchContext | undefined;
    go_batch_statement(): Go_batch_statementContext[];
    go_batch_statement(i: number): Go_batch_statementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class BatchContext extends ParserRuleContext {
    go_batch_statement(): Go_batch_statementContext | undefined;
    execute_body_batch(): Execute_body_batchContext | undefined;
    go_statement(): Go_statementContext[];
    go_statement(i: number): Go_statementContext;
    sql_clauses(): Sql_clausesContext[];
    sql_clauses(i: number): Sql_clausesContext;
    batch_level_statement(): Batch_level_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Batch_level_statementContext extends ParserRuleContext {
    create_or_alter_function(): Create_or_alter_functionContext | undefined;
    create_or_alter_procedure(): Create_or_alter_procedureContext | undefined;
    create_or_alter_trigger(): Create_or_alter_triggerContext | undefined;
    create_view(): Create_viewContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Sql_clausesContext extends ParserRuleContext {
    dml_clause(): Dml_clauseContext | undefined;
    SEMI(): TerminalNode | undefined;
    cfl_statement(): Cfl_statementContext | undefined;
    another_statement(): Another_statementContext | undefined;
    ddl_clause(): Ddl_clauseContext | undefined;
    dbcc_special(): Dbcc_specialContext | undefined;
    dbcc_clause(): Dbcc_clauseContext | undefined;
    backup_statement(): Backup_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Dml_clauseContext extends ParserRuleContext {
    merge_statement(): Merge_statementContext | undefined;
    delete_statement(): Delete_statementContext | undefined;
    insert_statement(): Insert_statementContext | undefined;
    select_statement_standalone(): Select_statement_standaloneContext | undefined;
    update_statement(): Update_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Ddl_clauseContext extends ParserRuleContext {
    alter_application_role(): Alter_application_roleContext | undefined;
    alter_assembly(): Alter_assemblyContext | undefined;
    alter_asymmetric_key(): Alter_asymmetric_keyContext | undefined;
    alter_authorization(): Alter_authorizationContext | undefined;
    alter_authorization_for_azure_dw(): Alter_authorization_for_azure_dwContext | undefined;
    alter_authorization_for_parallel_dw(): Alter_authorization_for_parallel_dwContext | undefined;
    alter_authorization_for_sql_database(): Alter_authorization_for_sql_databaseContext | undefined;
    alter_availability_group(): Alter_availability_groupContext | undefined;
    alter_certificate(): Alter_certificateContext | undefined;
    alter_column_encryption_key(): Alter_column_encryption_keyContext | undefined;
    alter_credential(): Alter_credentialContext | undefined;
    alter_cryptographic_provider(): Alter_cryptographic_providerContext | undefined;
    alter_database(): Alter_databaseContext | undefined;
    alter_db_role(): Alter_db_roleContext | undefined;
    alter_endpoint(): Alter_endpointContext | undefined;
    create_or_alter_event_session(): Create_or_alter_event_sessionContext | undefined;
    alter_external_data_source(): Alter_external_data_sourceContext | undefined;
    alter_external_library(): Alter_external_libraryContext | undefined;
    alter_external_resource_pool(): Alter_external_resource_poolContext | undefined;
    alter_fulltext_catalog(): Alter_fulltext_catalogContext | undefined;
    alter_fulltext_stoplist(): Alter_fulltext_stoplistContext | undefined;
    alter_login_azure_sql(): Alter_login_azure_sqlContext | undefined;
    alter_login_azure_sql_dw_and_pdw(): Alter_login_azure_sql_dw_and_pdwContext | undefined;
    alter_login_sql_server(): Alter_login_sql_serverContext | undefined;
    alter_master_key_azure_sql(): Alter_master_key_azure_sqlContext | undefined;
    alter_master_key_sql_server(): Alter_master_key_sql_serverContext | undefined;
    alter_message_type(): Alter_message_typeContext | undefined;
    alter_partition_function(): Alter_partition_functionContext | undefined;
    alter_partition_scheme(): Alter_partition_schemeContext | undefined;
    alter_remote_service_binding(): Alter_remote_service_bindingContext | undefined;
    alter_resource_governor(): Alter_resource_governorContext | undefined;
    alter_schema_azure_sql_dw_and_pdw(): Alter_schema_azure_sql_dw_and_pdwContext | undefined;
    alter_schema_sql(): Alter_schema_sqlContext | undefined;
    alter_sequence(): Alter_sequenceContext | undefined;
    alter_server_audit(): Alter_server_auditContext | undefined;
    alter_server_audit_specification(): Alter_server_audit_specificationContext | undefined;
    alter_server_configuration(): Alter_server_configurationContext | undefined;
    alter_server_role(): Alter_server_roleContext | undefined;
    alter_server_role_pdw(): Alter_server_role_pdwContext | undefined;
    alter_service(): Alter_serviceContext | undefined;
    alter_service_master_key(): Alter_service_master_keyContext | undefined;
    alter_symmetric_key(): Alter_symmetric_keyContext | undefined;
    alter_table(): Alter_tableContext | undefined;
    alter_user(): Alter_userContext | undefined;
    alter_user_azure_sql(): Alter_user_azure_sqlContext | undefined;
    alter_workload_group(): Alter_workload_groupContext | undefined;
    create_application_role(): Create_application_roleContext | undefined;
    create_assembly(): Create_assemblyContext | undefined;
    create_asymmetric_key(): Create_asymmetric_keyContext | undefined;
    create_column_encryption_key(): Create_column_encryption_keyContext | undefined;
    create_column_master_key(): Create_column_master_keyContext | undefined;
    create_credential(): Create_credentialContext | undefined;
    create_cryptographic_provider(): Create_cryptographic_providerContext | undefined;
    create_database(): Create_databaseContext | undefined;
    create_db_role(): Create_db_roleContext | undefined;
    create_event_notification(): Create_event_notificationContext | undefined;
    create_external_library(): Create_external_libraryContext | undefined;
    create_external_resource_pool(): Create_external_resource_poolContext | undefined;
    create_fulltext_catalog(): Create_fulltext_catalogContext | undefined;
    create_fulltext_stoplist(): Create_fulltext_stoplistContext | undefined;
    create_index(): Create_indexContext | undefined;
    create_login_azure_sql(): Create_login_azure_sqlContext | undefined;
    create_login_pdw(): Create_login_pdwContext | undefined;
    create_login_sql_server(): Create_login_sql_serverContext | undefined;
    create_master_key_azure_sql(): Create_master_key_azure_sqlContext | undefined;
    create_master_key_sql_server(): Create_master_key_sql_serverContext | undefined;
    create_or_alter_broker_priority(): Create_or_alter_broker_priorityContext | undefined;
    create_remote_service_binding(): Create_remote_service_bindingContext | undefined;
    create_resource_pool(): Create_resource_poolContext | undefined;
    create_route(): Create_routeContext | undefined;
    create_rule(): Create_ruleContext | undefined;
    create_schema(): Create_schemaContext | undefined;
    create_schema_azure_sql_dw_and_pdw(): Create_schema_azure_sql_dw_and_pdwContext | undefined;
    create_search_property_list(): Create_search_property_listContext | undefined;
    create_security_policy(): Create_security_policyContext | undefined;
    create_sequence(): Create_sequenceContext | undefined;
    create_server_audit(): Create_server_auditContext | undefined;
    create_server_audit_specification(): Create_server_audit_specificationContext | undefined;
    create_server_role(): Create_server_roleContext | undefined;
    create_service(): Create_serviceContext | undefined;
    create_statistics(): Create_statisticsContext | undefined;
    create_symmetric_key(): Create_symmetric_keyContext | undefined;
    create_synonym(): Create_synonymContext | undefined;
    create_table(): Create_tableContext | undefined;
    create_type(): Create_typeContext | undefined;
    create_user(): Create_userContext | undefined;
    create_user_azure_sql_dw(): Create_user_azure_sql_dwContext | undefined;
    create_workload_group(): Create_workload_groupContext | undefined;
    create_xml_index(): Create_xml_indexContext | undefined;
    create_xml_schema_collection(): Create_xml_schema_collectionContext | undefined;
    drop_aggregate(): Drop_aggregateContext | undefined;
    drop_application_role(): Drop_application_roleContext | undefined;
    drop_assembly(): Drop_assemblyContext | undefined;
    drop_asymmetric_key(): Drop_asymmetric_keyContext | undefined;
    drop_availability_group(): Drop_availability_groupContext | undefined;
    drop_broker_priority(): Drop_broker_priorityContext | undefined;
    drop_certificate(): Drop_certificateContext | undefined;
    drop_column_encryption_key(): Drop_column_encryption_keyContext | undefined;
    drop_column_master_key(): Drop_column_master_keyContext | undefined;
    drop_contract(): Drop_contractContext | undefined;
    drop_credential(): Drop_credentialContext | undefined;
    drop_cryptograhic_provider(): Drop_cryptograhic_providerContext | undefined;
    drop_database(): Drop_databaseContext | undefined;
    drop_database_audit_specification(): Drop_database_audit_specificationContext | undefined;
    drop_database_encryption_key(): Drop_database_encryption_keyContext | undefined;
    drop_database_scoped_credential(): Drop_database_scoped_credentialContext | undefined;
    drop_db_role(): Drop_db_roleContext | undefined;
    drop_default(): Drop_defaultContext | undefined;
    drop_endpoint(): Drop_endpointContext | undefined;
    drop_event_notifications(): Drop_event_notificationsContext | undefined;
    drop_event_session(): Drop_event_sessionContext | undefined;
    drop_external_data_source(): Drop_external_data_sourceContext | undefined;
    drop_external_file_format(): Drop_external_file_formatContext | undefined;
    drop_external_library(): Drop_external_libraryContext | undefined;
    drop_external_resource_pool(): Drop_external_resource_poolContext | undefined;
    drop_external_table(): Drop_external_tableContext | undefined;
    drop_fulltext_catalog(): Drop_fulltext_catalogContext | undefined;
    drop_fulltext_index(): Drop_fulltext_indexContext | undefined;
    drop_fulltext_stoplist(): Drop_fulltext_stoplistContext | undefined;
    drop_function(): Drop_functionContext | undefined;
    drop_index(): Drop_indexContext | undefined;
    drop_login(): Drop_loginContext | undefined;
    drop_master_key(): Drop_master_keyContext | undefined;
    drop_message_type(): Drop_message_typeContext | undefined;
    drop_partition_function(): Drop_partition_functionContext | undefined;
    drop_partition_scheme(): Drop_partition_schemeContext | undefined;
    drop_procedure(): Drop_procedureContext | undefined;
    drop_queue(): Drop_queueContext | undefined;
    drop_remote_service_binding(): Drop_remote_service_bindingContext | undefined;
    drop_resource_pool(): Drop_resource_poolContext | undefined;
    drop_route(): Drop_routeContext | undefined;
    drop_rule(): Drop_ruleContext | undefined;
    drop_schema(): Drop_schemaContext | undefined;
    drop_search_property_list(): Drop_search_property_listContext | undefined;
    drop_security_policy(): Drop_security_policyContext | undefined;
    drop_sequence(): Drop_sequenceContext | undefined;
    drop_server_audit(): Drop_server_auditContext | undefined;
    drop_server_audit_specification(): Drop_server_audit_specificationContext | undefined;
    drop_server_role(): Drop_server_roleContext | undefined;
    drop_service(): Drop_serviceContext | undefined;
    drop_signature(): Drop_signatureContext | undefined;
    drop_statistics(): Drop_statisticsContext | undefined;
    drop_statistics_name_azure_dw_and_pdw(): Drop_statistics_name_azure_dw_and_pdwContext | undefined;
    drop_symmetric_key(): Drop_symmetric_keyContext | undefined;
    drop_synonym(): Drop_synonymContext | undefined;
    drop_table(): Drop_tableContext | undefined;
    drop_trigger(): Drop_triggerContext | undefined;
    drop_type(): Drop_typeContext | undefined;
    drop_user(): Drop_userContext | undefined;
    drop_view(): Drop_viewContext | undefined;
    drop_workload_group(): Drop_workload_groupContext | undefined;
    drop_xml_schema_collection(): Drop_xml_schema_collectionContext | undefined;
    disable_trigger(): Disable_triggerContext | undefined;
    enable_trigger(): Enable_triggerContext | undefined;
    lock_table(): Lock_tableContext | undefined;
    truncate_table(): Truncate_tableContext | undefined;
    update_statistics(): Update_statisticsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Backup_statementContext extends ParserRuleContext {
    backup_database(): Backup_databaseContext | undefined;
    backup_log(): Backup_logContext | undefined;
    backup_certificate(): Backup_certificateContext | undefined;
    backup_master_key(): Backup_master_keyContext | undefined;
    backup_service_master_key(): Backup_service_master_keyContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Cfl_statementContext extends ParserRuleContext {
    block_statement(): Block_statementContext | undefined;
    break_statement(): Break_statementContext | undefined;
    continue_statement(): Continue_statementContext | undefined;
    goto_statement(): Goto_statementContext | undefined;
    if_statement(): If_statementContext | undefined;
    return_statement(): Return_statementContext | undefined;
    throw_statement(): Throw_statementContext | undefined;
    try_catch_statement(): Try_catch_statementContext | undefined;
    waitfor_statement(): Waitfor_statementContext | undefined;
    while_statement(): While_statementContext | undefined;
    print_statement(): Print_statementContext | undefined;
    raiseerror_statement(): Raiseerror_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Block_statementContext extends ParserRuleContext {
    BEGIN(): TerminalNode;
    END(): TerminalNode;
    SEMI(): TerminalNode[];
    SEMI(i: number): TerminalNode;
    sql_clauses(): Sql_clausesContext[];
    sql_clauses(i: number): Sql_clausesContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Break_statementContext extends ParserRuleContext {
    BREAK(): TerminalNode;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Continue_statementContext extends ParserRuleContext {
    CONTINUE(): TerminalNode;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Goto_statementContext extends ParserRuleContext {
    GOTO(): TerminalNode | undefined;
    id(): IdContext;
    SEMI(): TerminalNode | undefined;
    COLON(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Return_statementContext extends ParserRuleContext {
    RETURN(): TerminalNode;
    expression(): ExpressionContext | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class If_statementContext extends ParserRuleContext {
    IF(): TerminalNode;
    search_condition(): Search_conditionContext;
    sql_clauses(): Sql_clausesContext[];
    sql_clauses(i: number): Sql_clausesContext;
    ELSE(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Throw_statementContext extends ParserRuleContext {
    THROW(): TerminalNode;
    throw_error_number(): Throw_error_numberContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    throw_message(): Throw_messageContext | undefined;
    throw_state(): Throw_stateContext | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Throw_error_numberContext extends ParserRuleContext {
    DECIMAL(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Throw_messageContext extends ParserRuleContext {
    STRING(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Throw_stateContext extends ParserRuleContext {
    DECIMAL(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Try_catch_statementContext extends ParserRuleContext {
    _try_clauses: Sql_clausesContext;
    _catch_clauses: Sql_clausesContext;
    BEGIN(): TerminalNode[];
    BEGIN(i: number): TerminalNode;
    TRY(): TerminalNode[];
    TRY(i: number): TerminalNode;
    END(): TerminalNode[];
    END(i: number): TerminalNode;
    CATCH(): TerminalNode[];
    CATCH(i: number): TerminalNode;
    SEMI(): TerminalNode[];
    SEMI(i: number): TerminalNode;
    sql_clauses(): Sql_clausesContext[];
    sql_clauses(i: number): Sql_clausesContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Waitfor_statementContext extends ParserRuleContext {
    WAITFOR(): TerminalNode;
    receive_statement(): Receive_statementContext | undefined;
    COMMA(): TerminalNode | undefined;
    time(): TimeContext | undefined;
    expression(): ExpressionContext | undefined;
    SEMI(): TerminalNode | undefined;
    DELAY(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    TIMEOUT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class While_statementContext extends ParserRuleContext {
    WHILE(): TerminalNode;
    search_condition(): Search_conditionContext;
    sql_clauses(): Sql_clausesContext | undefined;
    BREAK(): TerminalNode | undefined;
    CONTINUE(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Print_statementContext extends ParserRuleContext {
    PRINT(): TerminalNode;
    expression(): ExpressionContext | undefined;
    DOUBLE_QUOTE_ID(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    LOCAL_ID(): TerminalNode[];
    LOCAL_ID(i: number): TerminalNode;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Raiseerror_statementContext extends ParserRuleContext {
    _msg: Token;
    _severity: Constant_LOCAL_IDContext;
    _state: Constant_LOCAL_IDContext;
    _formatstring: Token;
    _argument: Token;
    RAISERROR(): TerminalNode;
    LR_BRACKET(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode | undefined;
    constant_LOCAL_ID(): Constant_LOCAL_IDContext[];
    constant_LOCAL_ID(i: number): Constant_LOCAL_IDContext;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    LOCAL_ID(): TerminalNode[];
    LOCAL_ID(i: number): TerminalNode;
    WITH(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    LOG(): TerminalNode | undefined;
    SETERROR(): TerminalNode | undefined;
    NOWAIT(): TerminalNode | undefined;
    DOUBLE_QUOTE_ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Empty_statementContext extends ParserRuleContext {
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Another_statementContext extends ParserRuleContext {
    declare_statement(): Declare_statementContext | undefined;
    execute_statement(): Execute_statementContext | undefined;
    cursor_statement(): Cursor_statementContext | undefined;
    conversation_statement(): Conversation_statementContext | undefined;
    create_contract(): Create_contractContext | undefined;
    create_queue(): Create_queueContext | undefined;
    alter_queue(): Alter_queueContext | undefined;
    kill_statement(): Kill_statementContext | undefined;
    message_statement(): Message_statementContext | undefined;
    security_statement(): Security_statementContext | undefined;
    set_statement(): Set_statementContext | undefined;
    transaction_statement(): Transaction_statementContext | undefined;
    use_statement(): Use_statementContext | undefined;
    setuser_statement(): Setuser_statementContext | undefined;
    reconfigure_statement(): Reconfigure_statementContext | undefined;
    shutdown_statement(): Shutdown_statementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_application_roleContext extends ParserRuleContext {
    _appliction_role: IdContext;
    _new_application_role_name: IdContext;
    _application_role_password: Token;
    _app_role_default_schema: IdContext;
    ALTER(): TerminalNode;
    APPLICATION(): TerminalNode;
    ROLE(): TerminalNode;
    WITH(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    NAME(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    PASSWORD(): TerminalNode | undefined;
    DEFAULT_SCHEMA(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_application_roleContext extends ParserRuleContext {
    _appliction_role: IdContext;
    _application_role_password: Token;
    _app_role_default_schema: IdContext;
    CREATE(): TerminalNode;
    APPLICATION(): TerminalNode;
    ROLE(): TerminalNode;
    WITH(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    DEFAULT_SCHEMA(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_aggregateContext extends ParserRuleContext {
    _schema_name: IdContext;
    _aggregate_name: IdContext;
    DROP(): TerminalNode;
    AGGREGATE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_application_roleContext extends ParserRuleContext {
    _rolename: IdContext;
    DROP(): TerminalNode;
    APPLICATION(): TerminalNode;
    ROLE(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assemblyContext extends ParserRuleContext {
    _assembly_name: IdContext;
    alter_assembly_start(): Alter_assembly_startContext;
    alter_assembly_clause(): Alter_assembly_clauseContext;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_startContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    ASSEMBLY(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_clauseContext extends ParserRuleContext {
    alter_assembly_from_clause(): Alter_assembly_from_clauseContext | undefined;
    alter_assembly_with_clause(): Alter_assembly_with_clauseContext | undefined;
    alter_assembly_drop_clause(): Alter_assembly_drop_clauseContext | undefined;
    alter_assembly_add_clause(): Alter_assembly_add_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_from_clauseContext extends ParserRuleContext {
    alter_assembly_from_clause_start(): Alter_assembly_from_clause_startContext;
    client_assembly_specifier(): Client_assembly_specifierContext | undefined;
    alter_assembly_file_bits(): Alter_assembly_file_bitsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_from_clause_startContext extends ParserRuleContext {
    FROM(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_drop_clauseContext extends ParserRuleContext {
    alter_assembly_drop(): Alter_assembly_dropContext;
    alter_assembly_drop_multiple_files(): Alter_assembly_drop_multiple_filesContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_drop_multiple_filesContext extends ParserRuleContext {
    ALL(): TerminalNode | undefined;
    multiple_local_files(): Multiple_local_filesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_dropContext extends ParserRuleContext {
    DROP(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_add_clauseContext extends ParserRuleContext {
    alter_asssembly_add_clause_start(): Alter_asssembly_add_clause_startContext;
    alter_assembly_client_file_clause(): Alter_assembly_client_file_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_asssembly_add_clause_startContext extends ParserRuleContext {
    ADD(): TerminalNode;
    FILE(): TerminalNode;
    FROM(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_client_file_clauseContext extends ParserRuleContext {
    alter_assembly_file_name(): Alter_assembly_file_nameContext;
    alter_assembly_as(): Alter_assembly_asContext | undefined;
    id(): IdContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_file_nameContext extends ParserRuleContext {
    STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_file_bitsContext extends ParserRuleContext {
    alter_assembly_as(): Alter_assembly_asContext;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_asContext extends ParserRuleContext {
    AS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_with_clauseContext extends ParserRuleContext {
    alter_assembly_with(): Alter_assembly_withContext;
    assembly_option(): Assembly_optionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_assembly_withContext extends ParserRuleContext {
    WITH(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Client_assembly_specifierContext extends ParserRuleContext {
    network_file_share(): Network_file_shareContext | undefined;
    local_file(): Local_fileContext | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Assembly_optionContext extends ParserRuleContext {
    PERMISSION_SET(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    SAFE(): TerminalNode | undefined;
    EXTERNAL_ACCESS(): TerminalNode | undefined;
    UNSAFE(): TerminalNode | undefined;
    VISIBILITY(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    UNCHECKED(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    assembly_option(): Assembly_optionContext | undefined;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Network_file_shareContext extends ParserRuleContext {
    network_file_start(): Network_file_startContext;
    network_computer(): Network_computerContext;
    file_path(): File_pathContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Network_computerContext extends ParserRuleContext {
    _computer_name: IdContext;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Network_file_startContext extends ParserRuleContext {
    DOUBLE_BACK_SLASH(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class File_pathContext extends ParserRuleContext {
    file_directory_path_separator(): File_directory_path_separatorContext | undefined;
    file_path(): File_pathContext | undefined;
    id(): IdContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class File_directory_path_separatorContext extends ParserRuleContext {
    BACKSLASH(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Local_fileContext extends ParserRuleContext {
    local_drive(): Local_driveContext;
    file_path(): File_pathContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Local_driveContext extends ParserRuleContext {
    DISK_DRIVE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Multiple_local_filesContext extends ParserRuleContext {
    multiple_local_file_start(): Multiple_local_file_startContext | undefined;
    local_file(): Local_fileContext;
    SINGLE_QUOTE(): TerminalNode | undefined;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Multiple_local_file_startContext extends ParserRuleContext {
    SINGLE_QUOTE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_assemblyContext extends ParserRuleContext {
    _assembly_name: IdContext;
    _owner_name: IdContext;
    CREATE(): TerminalNode;
    ASSEMBLY(): TerminalNode;
    FROM(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    AUTHORIZATION(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    PERMISSION_SET(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    BINARY(): TerminalNode[];
    BINARY(i: number): TerminalNode;
    SAFE(): TerminalNode | undefined;
    EXTERNAL_ACCESS(): TerminalNode | undefined;
    UNSAFE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_assemblyContext extends ParserRuleContext {
    _assembly_name: IdContext;
    DROP(): TerminalNode;
    ASSEMBLY(): TerminalNode;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    DEPENDENTS(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_asymmetric_keyContext extends ParserRuleContext {
    _Asym_Key_Name: IdContext;
    alter_asymmetric_key_start(): Alter_asymmetric_key_startContext;
    id(): IdContext;
    asymmetric_key_option(): Asymmetric_key_optionContext | undefined;
    REMOVE(): TerminalNode | undefined;
    PRIVATE(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_asymmetric_key_startContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    ASYMMETRIC(): TerminalNode;
    KEY(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Asymmetric_key_optionContext extends ParserRuleContext {
    asymmetric_key_option_start(): Asymmetric_key_option_startContext;
    asymmetric_key_password_change_option(): Asymmetric_key_password_change_optionContext[];
    asymmetric_key_password_change_option(i: number): Asymmetric_key_password_change_optionContext;
    RR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Asymmetric_key_option_startContext extends ParserRuleContext {
    WITH(): TerminalNode;
    PRIVATE(): TerminalNode;
    KEY(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Asymmetric_key_password_change_optionContext extends ParserRuleContext {
    DECRYPTION(): TerminalNode | undefined;
    BY(): TerminalNode;
    PASSWORD(): TerminalNode;
    EQUAL(): TerminalNode;
    STRING(): TerminalNode;
    ENCRYPTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_asymmetric_keyContext extends ParserRuleContext {
    _Asym_Key_Nam: IdContext;
    _database_principal_name: IdContext;
    _Assembly_Name: IdContext;
    _Provider_Name: IdContext;
    _provider_key_name: Token;
    _asymmetric_key_password: Token;
    CREATE(): TerminalNode;
    ASYMMETRIC(): TerminalNode;
    KEY(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    AUTHORIZATION(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    ENCRYPTION(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    FILE(): TerminalNode | undefined;
    EXECUTABLE_FILE(): TerminalNode | undefined;
    ASSEMBLY(): TerminalNode | undefined;
    PROVIDER(): TerminalNode | undefined;
    ALGORITHM(): TerminalNode | undefined;
    PROVIDER_KEY_NAME(): TerminalNode | undefined;
    CREATION_DISPOSITION(): TerminalNode | undefined;
    RSA_4096(): TerminalNode | undefined;
    RSA_3072(): TerminalNode | undefined;
    RSA_2048(): TerminalNode | undefined;
    RSA_1024(): TerminalNode | undefined;
    RSA_512(): TerminalNode | undefined;
    CREATE_NEW(): TerminalNode | undefined;
    OPEN_EXISTING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_asymmetric_keyContext extends ParserRuleContext {
    _key_name: IdContext;
    DROP(): TerminalNode;
    ASYMMETRIC(): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    id(): IdContext;
    REMOVE(): TerminalNode | undefined;
    PROVIDER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_authorizationContext extends ParserRuleContext {
    _entity: Entity_nameContext;
    alter_authorization_start(): Alter_authorization_startContext;
    entity_to(): Entity_toContext;
    authorization_grantee(): Authorization_granteeContext;
    entity_name(): Entity_nameContext;
    class_type(): Class_typeContext | undefined;
    colon_colon(): Colon_colonContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Authorization_granteeContext extends ParserRuleContext {
    _principal_name: IdContext;
    id(): IdContext | undefined;
    SCHEMA(): TerminalNode | undefined;
    OWNER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Entity_toContext extends ParserRuleContext {
    TO(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Colon_colonContext extends ParserRuleContext {
    COLON(): TerminalNode[];
    COLON(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_authorization_startContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    AUTHORIZATION(): TerminalNode;
    ON(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_authorization_for_sql_databaseContext extends ParserRuleContext {
    _entity: Entity_nameContext;
    alter_authorization_start(): Alter_authorization_startContext;
    entity_to(): Entity_toContext;
    authorization_grantee(): Authorization_granteeContext;
    entity_name(): Entity_nameContext;
    class_type_for_sql_database(): Class_type_for_sql_databaseContext | undefined;
    colon_colon(): Colon_colonContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_authorization_for_azure_dwContext extends ParserRuleContext {
    _entity: Entity_name_for_azure_dwContext;
    alter_authorization_start(): Alter_authorization_startContext;
    entity_to(): Entity_toContext;
    authorization_grantee(): Authorization_granteeContext;
    entity_name_for_azure_dw(): Entity_name_for_azure_dwContext;
    class_type_for_azure_dw(): Class_type_for_azure_dwContext | undefined;
    colon_colon(): Colon_colonContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_authorization_for_parallel_dwContext extends ParserRuleContext {
    _entity: Entity_name_for_parallel_dwContext;
    alter_authorization_start(): Alter_authorization_startContext;
    entity_to(): Entity_toContext;
    authorization_grantee(): Authorization_granteeContext;
    entity_name_for_parallel_dw(): Entity_name_for_parallel_dwContext;
    class_type_for_parallel_dw(): Class_type_for_parallel_dwContext | undefined;
    colon_colon(): Colon_colonContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Class_typeContext extends ParserRuleContext {
    OBJECT(): TerminalNode | undefined;
    ASSEMBLY(): TerminalNode | undefined;
    ASYMMETRIC(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    AVAILABILITY(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    CERTIFICATE(): TerminalNode | undefined;
    CONTRACT(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    ENDPOINT(): TerminalNode | undefined;
    FULLTEXT(): TerminalNode | undefined;
    CATALOG(): TerminalNode | undefined;
    STOPLIST(): TerminalNode | undefined;
    MESSAGE(): TerminalNode | undefined;
    REMOTE(): TerminalNode | undefined;
    SERVICE(): TerminalNode | undefined;
    BINDING(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    ROUTE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    PROPERTY(): TerminalNode | undefined;
    LIST(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    SYMMETRIC(): TerminalNode | undefined;
    XML(): TerminalNode | undefined;
    COLLECTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Class_type_for_sql_databaseContext extends ParserRuleContext {
    OBJECT(): TerminalNode | undefined;
    ASSEMBLY(): TerminalNode | undefined;
    ASYMMETRIC(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    CERTIFICATE(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    FULLTEXT(): TerminalNode | undefined;
    CATALOG(): TerminalNode | undefined;
    STOPLIST(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    PROPERTY(): TerminalNode | undefined;
    LIST(): TerminalNode | undefined;
    SYMMETRIC(): TerminalNode | undefined;
    XML(): TerminalNode | undefined;
    COLLECTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Class_type_for_azure_dwContext extends ParserRuleContext {
    SCHEMA(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Class_type_for_parallel_dwContext extends ParserRuleContext {
    DATABASE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_availability_groupContext extends ParserRuleContext {
    _group_name: IdContext;
    DROP(): TerminalNode;
    AVAILABILITY(): TerminalNode;
    GROUP(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_availability_groupContext extends ParserRuleContext {
    alter_availability_group_start(): Alter_availability_group_startContext;
    alter_availability_group_options(): Alter_availability_group_optionsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_availability_group_startContext extends ParserRuleContext {
    _group_name: IdContext;
    ALTER(): TerminalNode;
    AVAILABILITY(): TerminalNode;
    GROUP(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_availability_group_optionsContext extends ParserRuleContext {
    _milliseconds: Token;
    _database_name: IdContext;
    _server_instance: Token;
    _session_timeout: Token;
    _ag_name: Token;
    _ag_name_modified: Token;
    _listener_name: Token;
    SET(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    AUTOMATED_BACKUP_PREFERENCE(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    FAILURE_CONDITION_LEVEL(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    HEALTH_CHECK_TIMEOUT(): TerminalNode | undefined;
    DB_FAILOVER(): TerminalNode | undefined;
    REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    SECONDARY_ONLY(): TerminalNode | undefined;
    SECONDARY(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    ADD(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    id(): IdContext | undefined;
    REMOVE(): TerminalNode | undefined;
    REPLICA(): TerminalNode | undefined;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    WITH(): TerminalNode[];
    WITH(i: number): TerminalNode;
    ENDPOINT_URL(): TerminalNode | undefined;
    AVAILABILITY_MODE(): TerminalNode[];
    AVAILABILITY_MODE(i: number): TerminalNode;
    FAILOVER_MODE(): TerminalNode[];
    FAILOVER_MODE(i: number): TerminalNode;
    SEEDING_MODE(): TerminalNode[];
    SEEDING_MODE(i: number): TerminalNode;
    BACKUP_PRIORITY(): TerminalNode | undefined;
    PRIMARY_ROLE(): TerminalNode | undefined;
    ALLOW_CONNECTIONS(): TerminalNode[];
    ALLOW_CONNECTIONS(i: number): TerminalNode;
    SECONDARY_ROLE(): TerminalNode | undefined;
    SYNCHRONOUS_COMMIT(): TerminalNode[];
    SYNCHRONOUS_COMMIT(i: number): TerminalNode;
    ASYNCHRONOUS_COMMIT(): TerminalNode[];
    ASYNCHRONOUS_COMMIT(i: number): TerminalNode;
    AUTOMATIC(): TerminalNode[];
    AUTOMATIC(i: number): TerminalNode;
    MANUAL(): TerminalNode[];
    MANUAL(i: number): TerminalNode;
    READ_WRITE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    READ_ONLY(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    READ_ONLY_ROUTING_LIST(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    SESSION_TIMEOUT(): TerminalNode | undefined;
    MODIFY(): TerminalNode | undefined;
    JOIN(): TerminalNode | undefined;
    AVAILABILITY(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    LISTENER_URL(): TerminalNode[];
    LISTENER_URL(i: number): TerminalNode;
    GRANT(): TerminalNode | undefined;
    CREATE(): TerminalNode | undefined;
    ANY(): TerminalNode | undefined;
    DENY(): TerminalNode | undefined;
    FAILOVER(): TerminalNode | undefined;
    FORCE_FAILOVER_ALLOW_DATA_LOSS(): TerminalNode | undefined;
    LISTENER(): TerminalNode | undefined;
    DHCP(): TerminalNode | undefined;
    IP(): TerminalNode | undefined;
    ip_v4_failover(): Ip_v4_failoverContext[];
    ip_v4_failover(i: number): Ip_v4_failoverContext;
    PORT(): TerminalNode | undefined;
    ip_v6_failover(): Ip_v6_failoverContext[];
    ip_v6_failover(i: number): Ip_v6_failoverContext;
    RESTART(): TerminalNode | undefined;
    OFFLINE(): TerminalNode | undefined;
    DTC_SUPPORT(): TerminalNode | undefined;
    PER_DB(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Ip_v4_failoverContext extends ParserRuleContext {
    STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Ip_v6_failoverContext extends ParserRuleContext {
    STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_or_alter_broker_priorityContext extends ParserRuleContext {
    _ConversationPriorityName: IdContext;
    _RemoteServiceName: Token;
    _PriorityValue: Token;
    BROKER(): TerminalNode;
    PRIORITY(): TerminalNode;
    FOR(): TerminalNode;
    CONVERSATION(): TerminalNode;
    SET(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    CREATE(): TerminalNode | undefined;
    ALTER(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    CONTRACT_NAME(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    LOCAL_SERVICE_NAME(): TerminalNode | undefined;
    REMOTE_SERVICE_NAME(): TerminalNode | undefined;
    PRIORITY_LEVEL(): TerminalNode | undefined;
    ANY(): TerminalNode[];
    ANY(i: number): TerminalNode;
    DEFAULT(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    STRING(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    DOUBLE_FORWARD_SLASH(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_broker_priorityContext extends ParserRuleContext {
    _ConversationPriorityName: IdContext;
    DROP(): TerminalNode;
    BROKER(): TerminalNode;
    PRIORITY(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_certificateContext extends ParserRuleContext {
    _certificate_name: IdContext;
    ALTER(): TerminalNode;
    CERTIFICATE(): TerminalNode;
    id(): IdContext;
    REMOVE(): TerminalNode | undefined;
    PRIVATE_KEY(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    PRIVATE(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    ACTIVE(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    BEGIN_DIALOG(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    FILE(): TerminalNode[];
    FILE(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    DECRYPTION(): TerminalNode[];
    DECRYPTION(i: number): TerminalNode;
    BY(): TerminalNode[];
    BY(i: number): TerminalNode;
    PASSWORD(): TerminalNode[];
    PASSWORD(i: number): TerminalNode;
    ENCRYPTION(): TerminalNode[];
    ENCRYPTION(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_column_encryption_keyContext extends ParserRuleContext {
    _column_encryption_key: IdContext;
    _column_master_key_name: IdContext;
    _algorithm_name: Token;
    ALTER(): TerminalNode;
    COLUMN(): TerminalNode;
    ENCRYPTION(): TerminalNode;
    KEY(): TerminalNode;
    VALUE(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COLUMN_MASTER_KEY(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    ALGORITHM(): TerminalNode | undefined;
    ENCRYPTED_VALUE(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_column_encryption_keyContext extends ParserRuleContext {
    _column_encryption_key: IdContext;
    _column_master_key_name: IdContext;
    _algorithm_name: Token;
    _encrypted_value: Token;
    CREATE(): TerminalNode;
    COLUMN(): TerminalNode;
    ENCRYPTION(): TerminalNode;
    KEY(): TerminalNode;
    WITH(): TerminalNode;
    VALUES(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    COLUMN_MASTER_KEY(): TerminalNode[];
    COLUMN_MASTER_KEY(i: number): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    ALGORITHM(): TerminalNode[];
    ALGORITHM(i: number): TerminalNode;
    ENCRYPTED_VALUE(): TerminalNode[];
    ENCRYPTED_VALUE(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    BINARY(): TerminalNode[];
    BINARY(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_certificateContext extends ParserRuleContext {
    _certificate_name: IdContext;
    DROP(): TerminalNode;
    CERTIFICATE(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_column_encryption_keyContext extends ParserRuleContext {
    _key_name: IdContext;
    DROP(): TerminalNode;
    COLUMN(): TerminalNode;
    ENCRYPTION(): TerminalNode;
    KEY(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_column_master_keyContext extends ParserRuleContext {
    _key_name: IdContext;
    DROP(): TerminalNode;
    COLUMN(): TerminalNode;
    MASTER(): TerminalNode;
    KEY(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_contractContext extends ParserRuleContext {
    _dropped_contract_name: IdContext;
    DROP(): TerminalNode;
    CONTRACT(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_credentialContext extends ParserRuleContext {
    _credential_name: IdContext;
    DROP(): TerminalNode;
    CREDENTIAL(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_cryptograhic_providerContext extends ParserRuleContext {
    _provider_name: IdContext;
    DROP(): TerminalNode;
    CRYPTOGRAPHIC(): TerminalNode;
    PROVIDER(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_databaseContext extends ParserRuleContext {
    _database_name_or_database_snapshot_name: IdContext;
    DROP(): TerminalNode;
    DATABASE(): TerminalNode;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_database_audit_specificationContext extends ParserRuleContext {
    _audit_specification_name: IdContext;
    DROP(): TerminalNode;
    DATABASE(): TerminalNode;
    AUDIT(): TerminalNode;
    SPECIFICATION(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_database_encryption_keyContext extends ParserRuleContext {
    DROP(): TerminalNode;
    DATABASE(): TerminalNode;
    ENCRYPTION(): TerminalNode;
    KEY(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_database_scoped_credentialContext extends ParserRuleContext {
    _credential_name: IdContext;
    DROP(): TerminalNode;
    DATABASE(): TerminalNode;
    SCOPED(): TerminalNode;
    CREDENTIAL(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_defaultContext extends ParserRuleContext {
    _schema_name: IdContext;
    _default_name: IdContext;
    DROP(): TerminalNode;
    DEFAULT(): TerminalNode;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    COMMA(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_endpointContext extends ParserRuleContext {
    _endPointName: IdContext;
    DROP(): TerminalNode;
    ENDPOINT(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_external_data_sourceContext extends ParserRuleContext {
    _external_data_source_name: IdContext;
    DROP(): TerminalNode;
    EXTERNAL(): TerminalNode;
    DATA(): TerminalNode;
    SOURCE(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_external_file_formatContext extends ParserRuleContext {
    _external_file_format_name: IdContext;
    DROP(): TerminalNode;
    EXTERNAL(): TerminalNode;
    FILE(): TerminalNode;
    FORMAT(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_external_libraryContext extends ParserRuleContext {
    _library_name: IdContext;
    _owner_name: IdContext;
    DROP(): TerminalNode;
    EXTERNAL(): TerminalNode;
    LIBRARY(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    AUTHORIZATION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_external_resource_poolContext extends ParserRuleContext {
    _pool_name: IdContext;
    DROP(): TerminalNode;
    EXTERNAL(): TerminalNode;
    RESOURCE(): TerminalNode;
    POOL(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_external_tableContext extends ParserRuleContext {
    _database_name: IdContext;
    _schema_name: IdContext;
    _table: IdContext;
    DROP(): TerminalNode;
    EXTERNAL(): TerminalNode;
    TABLE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_event_notificationsContext extends ParserRuleContext {
    _notification_name: IdContext;
    _queue_name: IdContext;
    DROP(): TerminalNode;
    EVENT(): TerminalNode;
    NOTIFICATION(): TerminalNode;
    ON(): TerminalNode;
    SERVER(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    QUEUE(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_event_sessionContext extends ParserRuleContext {
    _event_session_name: IdContext;
    DROP(): TerminalNode;
    EVENT(): TerminalNode;
    SESSION(): TerminalNode;
    ON(): TerminalNode;
    SERVER(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_fulltext_catalogContext extends ParserRuleContext {
    _catalog_name: IdContext;
    DROP(): TerminalNode;
    FULLTEXT(): TerminalNode;
    CATALOG(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_fulltext_indexContext extends ParserRuleContext {
    _schema: IdContext;
    _table: IdContext;
    DROP(): TerminalNode;
    FULLTEXT(): TerminalNode;
    INDEX(): TerminalNode;
    ON(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_fulltext_stoplistContext extends ParserRuleContext {
    _stoplist_name: IdContext;
    DROP(): TerminalNode;
    FULLTEXT(): TerminalNode;
    STOPLIST(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_loginContext extends ParserRuleContext {
    _login_name: IdContext;
    DROP(): TerminalNode;
    LOGIN(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_master_keyContext extends ParserRuleContext {
    DROP(): TerminalNode;
    MASTER(): TerminalNode;
    KEY(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_message_typeContext extends ParserRuleContext {
    _message_type_name: IdContext;
    DROP(): TerminalNode;
    MESSAGE(): TerminalNode;
    TYPE(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_partition_functionContext extends ParserRuleContext {
    _partition_function_name: IdContext;
    DROP(): TerminalNode;
    PARTITION(): TerminalNode;
    FUNCTION(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_partition_schemeContext extends ParserRuleContext {
    _partition_scheme_name: IdContext;
    DROP(): TerminalNode;
    PARTITION(): TerminalNode;
    SCHEME(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_queueContext extends ParserRuleContext {
    _database_name: IdContext;
    _schema_name: IdContext;
    _queue_name: IdContext;
    DROP(): TerminalNode;
    QUEUE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_remote_service_bindingContext extends ParserRuleContext {
    _binding_name: IdContext;
    DROP(): TerminalNode;
    REMOTE(): TerminalNode;
    SERVICE(): TerminalNode;
    BINDING(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_resource_poolContext extends ParserRuleContext {
    _pool_name: IdContext;
    DROP(): TerminalNode;
    RESOURCE(): TerminalNode;
    POOL(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_db_roleContext extends ParserRuleContext {
    _role_name: IdContext;
    DROP(): TerminalNode;
    ROLE(): TerminalNode;
    id(): IdContext;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_routeContext extends ParserRuleContext {
    _route_name: IdContext;
    DROP(): TerminalNode;
    ROUTE(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_ruleContext extends ParserRuleContext {
    _schema_name: IdContext;
    _rule_name: IdContext;
    DROP(): TerminalNode;
    RULE(): TerminalNode;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    COMMA(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_schemaContext extends ParserRuleContext {
    _schema_name: IdContext;
    DROP(): TerminalNode;
    SCHEMA(): TerminalNode;
    id(): IdContext;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_search_property_listContext extends ParserRuleContext {
    _property_list_name: IdContext;
    DROP(): TerminalNode;
    SEARCH(): TerminalNode;
    PROPERTY(): TerminalNode;
    LIST(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_security_policyContext extends ParserRuleContext {
    _schema_name: IdContext;
    _security_policy_name: IdContext;
    DROP(): TerminalNode;
    SECURITY(): TerminalNode;
    POLICY(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_sequenceContext extends ParserRuleContext {
    _database_name: IdContext;
    _schema_name: IdContext;
    _sequence_name: IdContext;
    DROP(): TerminalNode;
    SEQUENCE(): TerminalNode;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    COMMA(): TerminalNode | undefined;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_server_auditContext extends ParserRuleContext {
    _audit_name: IdContext;
    DROP(): TerminalNode;
    SERVER(): TerminalNode;
    AUDIT(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_server_audit_specificationContext extends ParserRuleContext {
    _audit_specification_name: IdContext;
    DROP(): TerminalNode;
    SERVER(): TerminalNode;
    AUDIT(): TerminalNode;
    SPECIFICATION(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_server_roleContext extends ParserRuleContext {
    _role_name: IdContext;
    DROP(): TerminalNode;
    SERVER(): TerminalNode;
    ROLE(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_serviceContext extends ParserRuleContext {
    _dropped_service_name: IdContext;
    DROP(): TerminalNode;
    SERVICE(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_signatureContext extends ParserRuleContext {
    _schema_name: IdContext;
    _module_name: IdContext;
    _cert_name: IdContext;
    _Asym_key_name: IdContext;
    DROP(): TerminalNode;
    SIGNATURE(): TerminalNode;
    FROM(): TerminalNode;
    BY(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    COUNTER(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    CERTIFICATE(): TerminalNode[];
    CERTIFICATE(i: number): TerminalNode;
    ASYMMETRIC(): TerminalNode[];
    ASYMMETRIC(i: number): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_statistics_name_azure_dw_and_pdwContext extends ParserRuleContext {
    _schema_name: IdContext;
    _object_name: IdContext;
    _statistics_name: IdContext;
    DROP(): TerminalNode;
    STATISTICS(): TerminalNode;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_symmetric_keyContext extends ParserRuleContext {
    _symmetric_key_name: IdContext;
    DROP(): TerminalNode;
    SYMMETRIC(): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    id(): IdContext;
    REMOVE(): TerminalNode | undefined;
    PROVIDER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_synonymContext extends ParserRuleContext {
    _schema: IdContext;
    _synonym_name: IdContext;
    DROP(): TerminalNode;
    SYNONYM(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_userContext extends ParserRuleContext {
    _user_name: IdContext;
    DROP(): TerminalNode;
    USER(): TerminalNode;
    id(): IdContext;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_workload_groupContext extends ParserRuleContext {
    _group_name: IdContext;
    DROP(): TerminalNode;
    WORKLOAD(): TerminalNode;
    GROUP(): TerminalNode;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_xml_schema_collectionContext extends ParserRuleContext {
    _relational_schema: IdContext;
    _sql_identifier: IdContext;
    DROP(): TerminalNode;
    XML(): TerminalNode;
    SCHEMA(): TerminalNode;
    COLLECTION(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Disable_triggerContext extends ParserRuleContext {
    _schema_name: IdContext;
    _trigger_name: IdContext;
    _schema_id: IdContext;
    _object_name: IdContext;
    DISABLE(): TerminalNode;
    TRIGGER(): TerminalNode;
    ON(): TerminalNode;
    ALL(): TerminalNode[];
    ALL(i: number): TerminalNode;
    DATABASE(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Enable_triggerContext extends ParserRuleContext {
    _schema_name: IdContext;
    _trigger_name: IdContext;
    _schema_id: IdContext;
    _object_name: IdContext;
    ENABLE(): TerminalNode;
    TRIGGER(): TerminalNode;
    ON(): TerminalNode;
    ALL(): TerminalNode[];
    ALL(i: number): TerminalNode;
    DATABASE(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Lock_tableContext extends ParserRuleContext {
    _seconds: Token;
    LOCK(): TerminalNode;
    TABLE(): TerminalNode;
    table_name(): Table_nameContext;
    IN(): TerminalNode;
    MODE(): TerminalNode;
    SHARE(): TerminalNode | undefined;
    EXCLUSIVE(): TerminalNode | undefined;
    WAIT(): TerminalNode | undefined;
    NOWAIT(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Truncate_tableContext extends ParserRuleContext {
    TRUNCATE(): TerminalNode;
    TABLE(): TerminalNode;
    table_name(): Table_nameContext;
    WITH(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    PARTITIONS(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    TO(): TerminalNode[];
    TO(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_column_master_keyContext extends ParserRuleContext {
    _key_name: IdContext;
    _key_store_provider_name: Token;
    _key_path: Token;
    CREATE(): TerminalNode;
    COLUMN(): TerminalNode;
    MASTER(): TerminalNode;
    KEY(): TerminalNode;
    WITH(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    KEY_STORE_PROVIDER_NAME(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    COMMA(): TerminalNode;
    KEY_PATH(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    id(): IdContext;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_credentialContext extends ParserRuleContext {
    _credential_name: IdContext;
    _identity_name: Token;
    _secret: Token;
    ALTER(): TerminalNode;
    CREDENTIAL(): TerminalNode;
    WITH(): TerminalNode;
    IDENTITY(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    id(): IdContext;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    COMMA(): TerminalNode | undefined;
    SECRET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_credentialContext extends ParserRuleContext {
    _credential_name: IdContext;
    _identity_name: Token;
    _secret: Token;
    _cryptographic_provider_name: IdContext;
    CREATE(): TerminalNode;
    CREDENTIAL(): TerminalNode;
    WITH(): TerminalNode;
    IDENTITY(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    COMMA(): TerminalNode | undefined;
    SECRET(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    CRYPTOGRAPHIC(): TerminalNode | undefined;
    PROVIDER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_cryptographic_providerContext extends ParserRuleContext {
    _provider_name: IdContext;
    _crypto_provider_ddl_file: Token;
    ALTER(): TerminalNode;
    CRYPTOGRAPHIC(): TerminalNode;
    PROVIDER(): TerminalNode;
    id(): IdContext;
    FROM(): TerminalNode | undefined;
    FILE(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    ENABLE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_cryptographic_providerContext extends ParserRuleContext {
    _provider_name: IdContext;
    _path_of_DLL: Token;
    CREATE(): TerminalNode;
    CRYPTOGRAPHIC(): TerminalNode;
    PROVIDER(): TerminalNode;
    FROM(): TerminalNode;
    FILE(): TerminalNode;
    EQUAL(): TerminalNode;
    id(): IdContext;
    STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_event_notificationContext extends ParserRuleContext {
    _event_notification_name: IdContext;
    _queue_name: IdContext;
    _event_type_or_group: IdContext;
    _broker_service: Token;
    _broker_service_specifier_or_current_database: Token;
    CREATE(): TerminalNode;
    EVENT(): TerminalNode;
    NOTIFICATION(): TerminalNode;
    ON(): TerminalNode;
    FOR(): TerminalNode;
    TO(): TerminalNode;
    SERVICE(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    SERVER(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    QUEUE(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    FAN_IN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_or_alter_event_sessionContext extends ParserRuleContext {
    _event_session_name: IdContext;
    _event_module_guid: IdContext;
    _event_package_name: IdContext;
    _event_name: IdContext;
    _event_customizable_attributue: IdContext;
    _action_name: IdContext;
    _target_name: IdContext;
    _target_parameter_name: IdContext;
    _max_memory: Token;
    _max_dispatch_latency_seconds: Token;
    _max_event_size: Token;
    EVENT(): TerminalNode[];
    EVENT(i: number): TerminalNode;
    SESSION(): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    SERVER(): TerminalNode;
    CREATE(): TerminalNode | undefined;
    ALTER(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    ADD(): TerminalNode[];
    ADD(i: number): TerminalNode;
    DROP(): TerminalNode[];
    DROP(i: number): TerminalNode;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    TARGET(): TerminalNode[];
    TARGET(i: number): TerminalNode;
    WITH(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    STATE(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    START(): TerminalNode | undefined;
    STOP(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SET(): TerminalNode[];
    SET(i: number): TerminalNode;
    MAX_MEMORY(): TerminalNode | undefined;
    EVENT_RETENTION_MODE(): TerminalNode | undefined;
    MAX_DISPATCH_LATENCY(): TerminalNode | undefined;
    MAX_EVENT_SIZE(): TerminalNode | undefined;
    MEMORY_PARTITION_MODE(): TerminalNode | undefined;
    TRACK_CAUSALITY(): TerminalNode | undefined;
    STARTUP_STATE(): TerminalNode | undefined;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    KB(): TerminalNode[];
    KB(i: number): TerminalNode;
    MB(): TerminalNode[];
    MB(i: number): TerminalNode;
    ALLOW_SINGLE_EVENT_LOSS(): TerminalNode | undefined;
    ALLOW_MULTIPLE_EVENT_LOSS(): TerminalNode | undefined;
    NO_EVENT_LOSS(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    PER_NODE(): TerminalNode | undefined;
    PER_CPU(): TerminalNode | undefined;
    OFF(): TerminalNode[];
    OFF(i: number): TerminalNode;
    SECONDS(): TerminalNode | undefined;
    INFINITE(): TerminalNode | undefined;
    ACTION(): TerminalNode[];
    ACTION(i: number): TerminalNode;
    WHERE(): TerminalNode[];
    WHERE(i: number): TerminalNode;
    event_session_predicate_expression(): Event_session_predicate_expressionContext[];
    event_session_predicate_expression(i: number): Event_session_predicate_expressionContext;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Event_session_predicate_expressionContext extends ParserRuleContext {
    event_session_predicate_factor(): Event_session_predicate_factorContext[];
    event_session_predicate_factor(i: number): Event_session_predicate_factorContext;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    event_session_predicate_expression(): Event_session_predicate_expressionContext[];
    event_session_predicate_expression(i: number): Event_session_predicate_expressionContext;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    NOT(): TerminalNode[];
    NOT(i: number): TerminalNode;
    AND(): TerminalNode[];
    AND(i: number): TerminalNode;
    OR(): TerminalNode[];
    OR(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Event_session_predicate_factorContext extends ParserRuleContext {
    event_session_predicate_leaf(): Event_session_predicate_leafContext | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    event_session_predicate_expression(): Event_session_predicate_expressionContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Event_session_predicate_leafContext extends ParserRuleContext {
    _event_field_name: IdContext;
    _event_module_guid: IdContext;
    _event_package_name: IdContext;
    _predicate_source_name: IdContext;
    _predicate_compare_name: IdContext;
    id(): IdContext[];
    id(i: number): IdContext;
    DECIMAL(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    GREATER(): TerminalNode | undefined;
    LESS(): TerminalNode | undefined;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    EXCLAMATION(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_external_data_sourceContext extends ParserRuleContext {
    _data_source_name: IdContext;
    _location: Token;
    _resource_manager_location: Token;
    _credential_name: IdContext;
    ALTER(): TerminalNode;
    EXTERNAL(): TerminalNode;
    DATA(): TerminalNode;
    SOURCE(): TerminalNode;
    SET(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    LOCATION(): TerminalNode[];
    LOCATION(i: number): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    RESOURCE_MANAGER_LOCATION(): TerminalNode[];
    RESOURCE_MANAGER_LOCATION(i: number): TerminalNode;
    CREDENTIAL(): TerminalNode[];
    CREDENTIAL(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    WITH(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    BLOB_STORAGE(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_external_libraryContext extends ParserRuleContext {
    _library_name: IdContext;
    _owner_name: IdContext;
    _client_library: Token;
    _external_data_source_name: IdContext;
    ALTER(): TerminalNode;
    EXTERNAL(): TerminalNode;
    LIBRARY(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    SET(): TerminalNode | undefined;
    ADD(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    CONTENT(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    WITH(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    AUTHORIZATION(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    PLATFORM(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode[];
    LANGUAGE(i: number): TerminalNode;
    DATA_SOURCE(): TerminalNode[];
    DATA_SOURCE(i: number): TerminalNode;
    R(): TerminalNode[];
    R(i: number): TerminalNode;
    PYTHON(): TerminalNode[];
    PYTHON(i: number): TerminalNode;
    WINDOWS(): TerminalNode | undefined;
    LINUX(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_external_libraryContext extends ParserRuleContext {
    _library_name: IdContext;
    _owner_name: IdContext;
    _client_library: Token;
    _external_data_source_name: IdContext;
    CREATE(): TerminalNode;
    EXTERNAL(): TerminalNode;
    LIBRARY(): TerminalNode;
    FROM(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    AUTHORIZATION(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    BINARY(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    LR_BRACKET(): TerminalNode | undefined;
    CONTENT(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    STRING(): TerminalNode | undefined;
    PLATFORM(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode[];
    LANGUAGE(i: number): TerminalNode;
    DATA_SOURCE(): TerminalNode[];
    DATA_SOURCE(i: number): TerminalNode;
    R(): TerminalNode[];
    R(i: number): TerminalNode;
    PYTHON(): TerminalNode[];
    PYTHON(i: number): TerminalNode;
    WINDOWS(): TerminalNode | undefined;
    LINUX(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_external_resource_poolContext extends ParserRuleContext {
    _pool_name: IdContext;
    _max_cpu_percent: Token;
    _max_memory_percent: Token;
    _max_processes: Token;
    ALTER(): TerminalNode;
    EXTERNAL(): TerminalNode;
    RESOURCE(): TerminalNode;
    POOL(): TerminalNode;
    WITH(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    MAX_CPU_PERCENT(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    DEFAULT_DOUBLE_QUOTE(): TerminalNode | undefined;
    AFFINITY(): TerminalNode | undefined;
    CPU(): TerminalNode | undefined;
    NUMANODE(): TerminalNode | undefined;
    id(): IdContext | undefined;
    MAX_MEMORY_PERCENT(): TerminalNode | undefined;
    MAX_PROCESSES(): TerminalNode | undefined;
    AUTO(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    TO(): TerminalNode[];
    TO(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_external_resource_poolContext extends ParserRuleContext {
    _pool_name: IdContext;
    _max_cpu_percent: Token;
    _max_memory_percent: Token;
    _max_processes: Token;
    CREATE(): TerminalNode;
    EXTERNAL(): TerminalNode;
    RESOURCE(): TerminalNode;
    POOL(): TerminalNode;
    WITH(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    MAX_CPU_PERCENT(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode;
    id(): IdContext;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    AFFINITY(): TerminalNode | undefined;
    CPU(): TerminalNode | undefined;
    NUMANODE(): TerminalNode | undefined;
    MAX_MEMORY_PERCENT(): TerminalNode | undefined;
    MAX_PROCESSES(): TerminalNode | undefined;
    AUTO(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    TO(): TerminalNode[];
    TO(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_fulltext_catalogContext extends ParserRuleContext {
    _catalog_name: IdContext;
    ALTER(): TerminalNode;
    FULLTEXT(): TerminalNode;
    CATALOG(): TerminalNode;
    id(): IdContext;
    REBUILD(): TerminalNode | undefined;
    REORGANIZE(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    ACCENT_SENSITIVITY(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_fulltext_catalogContext extends ParserRuleContext {
    _catalog_name: IdContext;
    _filegroup: IdContext;
    _rootpath: Token;
    _owner_name: IdContext;
    CREATE(): TerminalNode;
    FULLTEXT(): TerminalNode;
    CATALOG(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    FILEGROUP(): TerminalNode | undefined;
    IN(): TerminalNode | undefined;
    PATH(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    ACCENT_SENSITIVITY(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_fulltext_stoplistContext extends ParserRuleContext {
    _stoplist_name: IdContext;
    _stopword: Token;
    ALTER(): TerminalNode;
    FULLTEXT(): TerminalNode;
    STOPLIST(): TerminalNode;
    id(): IdContext;
    ADD(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    DECIMAL(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_fulltext_stoplistContext extends ParserRuleContext {
    _stoplist_name: IdContext;
    _database_name: IdContext;
    _source_stoplist_name: IdContext;
    _owner_name: IdContext;
    CREATE(): TerminalNode;
    FULLTEXT(): TerminalNode;
    STOPLIST(): TerminalNode[];
    STOPLIST(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    FROM(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    SYSTEM(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_login_sql_serverContext extends ParserRuleContext {
    _login_name: IdContext;
    _password: Token;
    _password_hash: Token;
    _old_password: Token;
    _default_database: IdContext;
    _default_laguage: IdContext;
    _credential_name: IdContext;
    ALTER(): TerminalNode;
    LOGIN(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    WITH(): TerminalNode | undefined;
    CREDENTIAL(): TerminalNode[];
    CREDENTIAL(i: number): TerminalNode;
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    OLD_PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    DEFAULT_DATABASE(): TerminalNode | undefined;
    DEFAULT_LANGUAGE(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    CHECK_POLICY(): TerminalNode | undefined;
    CHECK_EXPIRATION(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    ENABLE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    OFF(): TerminalNode[];
    OFF(i: number): TerminalNode;
    PASSWORD(): TerminalNode | undefined;
    HASHED(): TerminalNode | undefined;
    MUST_CHANGE(): TerminalNode[];
    MUST_CHANGE(i: number): TerminalNode;
    UNLOCK(): TerminalNode[];
    UNLOCK(i: number): TerminalNode;
    BINARY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_login_sql_serverContext extends ParserRuleContext {
    _login_name: IdContext;
    _password: Token;
    _password_hash: Token;
    _sid: Token;
    _default_database: IdContext;
    _default_laguage: IdContext;
    _credential_name: IdContext;
    _default_language: Token;
    _certname: IdContext;
    _asym_key_name: IdContext;
    CREATE(): TerminalNode;
    LOGIN(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    WITH(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    SID(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    DEFAULT_DATABASE(): TerminalNode | undefined;
    DEFAULT_LANGUAGE(): TerminalNode | undefined;
    CHECK_EXPIRATION(): TerminalNode | undefined;
    CHECK_POLICY(): TerminalNode | undefined;
    CREDENTIAL(): TerminalNode | undefined;
    BINARY(): TerminalNode[];
    BINARY(i: number): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    OFF(): TerminalNode[];
    OFF(i: number): TerminalNode;
    WINDOWS(): TerminalNode | undefined;
    CERTIFICATE(): TerminalNode | undefined;
    ASYMMETRIC(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    HASHED(): TerminalNode | undefined;
    MUST_CHANGE(): TerminalNode[];
    MUST_CHANGE(i: number): TerminalNode;
    UNLOCK(): TerminalNode[];
    UNLOCK(i: number): TerminalNode;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_login_azure_sqlContext extends ParserRuleContext {
    _login_name: IdContext;
    _password: Token;
    _old_password: Token;
    ALTER(): TerminalNode;
    LOGIN(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    WITH(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    NAME(): TerminalNode | undefined;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    ENABLE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    OLD_PASSWORD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_login_azure_sqlContext extends ParserRuleContext {
    _login_name: IdContext;
    _sid: Token;
    CREATE(): TerminalNode;
    LOGIN(): TerminalNode;
    WITH(): TerminalNode;
    PASSWORD(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    STRING(): TerminalNode;
    id(): IdContext;
    SID(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_login_azure_sql_dw_and_pdwContext extends ParserRuleContext {
    _login_name: IdContext;
    _password: Token;
    _old_password: Token;
    ALTER(): TerminalNode;
    LOGIN(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    WITH(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    NAME(): TerminalNode | undefined;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    ENABLE(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    OLD_PASSWORD(): TerminalNode | undefined;
    MUST_CHANGE(): TerminalNode[];
    MUST_CHANGE(i: number): TerminalNode;
    UNLOCK(): TerminalNode[];
    UNLOCK(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_login_pdwContext extends ParserRuleContext {
    _loginName: IdContext;
    _password: Token;
    CREATE(): TerminalNode;
    LOGIN(): TerminalNode;
    id(): IdContext;
    WITH(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    WINDOWS(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    STRING(): TerminalNode | undefined;
    MUST_CHANGE(): TerminalNode | undefined;
    CHECK_POLICY(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_master_key_sql_serverContext extends ParserRuleContext {
    _password: Token;
    _encryption_password: Token;
    ALTER(): TerminalNode;
    MASTER(): TerminalNode[];
    MASTER(i: number): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    REGENERATE(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    ENCRYPTION(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    SERVICE(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_master_key_sql_serverContext extends ParserRuleContext {
    _password: Token;
    CREATE(): TerminalNode;
    MASTER(): TerminalNode;
    KEY(): TerminalNode;
    ENCRYPTION(): TerminalNode;
    BY(): TerminalNode;
    PASSWORD(): TerminalNode;
    EQUAL(): TerminalNode;
    STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_master_key_azure_sqlContext extends ParserRuleContext {
    _password: Token;
    _encryption_password: Token;
    ALTER(): TerminalNode;
    MASTER(): TerminalNode[];
    MASTER(i: number): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    REGENERATE(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    ENCRYPTION(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    SERVICE(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_master_key_azure_sqlContext extends ParserRuleContext {
    _password: Token;
    CREATE(): TerminalNode;
    MASTER(): TerminalNode;
    KEY(): TerminalNode;
    ENCRYPTION(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_message_typeContext extends ParserRuleContext {
    _message_type_name: IdContext;
    _schema_collection_name: IdContext;
    ALTER(): TerminalNode;
    MESSAGE(): TerminalNode;
    TYPE(): TerminalNode;
    VALIDATION(): TerminalNode;
    EQUAL(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    NONE(): TerminalNode | undefined;
    EMPTY(): TerminalNode | undefined;
    WELL_FORMED_XML(): TerminalNode | undefined;
    VALID_XML(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    COLLECTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_partition_functionContext extends ParserRuleContext {
    _partition_function_name: IdContext;
    ALTER(): TerminalNode;
    PARTITION(): TerminalNode;
    FUNCTION(): TerminalNode;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    RANGE(): TerminalNode;
    DECIMAL(): TerminalNode;
    id(): IdContext;
    SPLIT(): TerminalNode | undefined;
    MERGE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_partition_schemeContext extends ParserRuleContext {
    _partition_scheme_name: IdContext;
    _file_group_name: IdContext;
    ALTER(): TerminalNode;
    PARTITION(): TerminalNode;
    SCHEME(): TerminalNode;
    NEXT(): TerminalNode;
    USED(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_remote_service_bindingContext extends ParserRuleContext {
    _binding_name: IdContext;
    _user_name: IdContext;
    ALTER(): TerminalNode;
    REMOTE(): TerminalNode;
    SERVICE(): TerminalNode;
    BINDING(): TerminalNode;
    WITH(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    USER(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    COMMA(): TerminalNode | undefined;
    ANONYMOUS(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_remote_service_bindingContext extends ParserRuleContext {
    _binding_name: IdContext;
    _owner_name: IdContext;
    _remote_service_name: Token;
    _user_name: IdContext;
    CREATE(): TerminalNode;
    REMOTE(): TerminalNode;
    SERVICE(): TerminalNode[];
    SERVICE(i: number): TerminalNode;
    BINDING(): TerminalNode;
    TO(): TerminalNode;
    WITH(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    STRING(): TerminalNode;
    AUTHORIZATION(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    COMMA(): TerminalNode | undefined;
    ANONYMOUS(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_resource_poolContext extends ParserRuleContext {
    _pool_name: IdContext;
    CREATE(): TerminalNode;
    RESOURCE(): TerminalNode;
    POOL(): TerminalNode;
    id(): IdContext;
    WITH(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    MIN_CPU_PERCENT(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    MAX_CPU_PERCENT(): TerminalNode | undefined;
    CAP_CPU_PERCENT(): TerminalNode | undefined;
    AFFINITY(): TerminalNode | undefined;
    SCHEDULER(): TerminalNode | undefined;
    MIN_MEMORY_PERCENT(): TerminalNode | undefined;
    MAX_MEMORY_PERCENT(): TerminalNode | undefined;
    MIN_IOPS_PER_VOLUME(): TerminalNode | undefined;
    MAX_IOPS_PER_VOLUME(): TerminalNode | undefined;
    AUTO(): TerminalNode | undefined;
    NUMANODE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    TO(): TerminalNode[];
    TO(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_resource_governorContext extends ParserRuleContext {
    _schema_name: IdContext;
    _function_name: IdContext;
    _max_outstanding_io_per_volume: Token;
    ALTER(): TerminalNode;
    RESOURCE(): TerminalNode;
    GOVERNOR(): TerminalNode;
    WITH(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    CLASSIFIER_FUNCTION(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    RESET(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    MAX_OUTSTANDING_IO_PER_VOLUME(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    RECONFIGURE(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_db_roleContext extends ParserRuleContext {
    _role_name: IdContext;
    _database_principal: IdContext;
    _new_role_name: IdContext;
    ALTER(): TerminalNode;
    ROLE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    MEMBER(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_db_roleContext extends ParserRuleContext {
    _role_name: IdContext;
    _owner_name: IdContext;
    CREATE(): TerminalNode;
    ROLE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    AUTHORIZATION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_routeContext extends ParserRuleContext {
    _route_name: IdContext;
    _owner_name: IdContext;
    _route_service_name: Token;
    _broker_instance_identifier: Token;
    CREATE(): TerminalNode;
    ROUTE(): TerminalNode;
    WITH(): TerminalNode;
    ADDRESS(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    AUTHORIZATION(): TerminalNode | undefined;
    SERVICE_NAME(): TerminalNode | undefined;
    BROKER_INSTANCE(): TerminalNode | undefined;
    LIFETIME(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    MIRROR_ADDRESS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_ruleContext extends ParserRuleContext {
    _schema_name: IdContext;
    _rule_name: IdContext;
    CREATE(): TerminalNode;
    RULE(): TerminalNode;
    AS(): TerminalNode;
    search_condition(): Search_conditionContext;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_schema_sqlContext extends ParserRuleContext {
    _schema_name: IdContext;
    ALTER(): TerminalNode;
    SCHEMA(): TerminalNode[];
    SCHEMA(i: number): TerminalNode;
    TRANSFER(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    COLON(): TerminalNode[];
    COLON(i: number): TerminalNode;
    DOT(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    XML(): TerminalNode | undefined;
    COLLECTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_schemaContext extends ParserRuleContext {
    _schema_name: IdContext;
    _owner_name: IdContext;
    _object_name: IdContext;
    CREATE(): TerminalNode;
    SCHEMA(): TerminalNode[];
    SCHEMA(i: number): TerminalNode;
    AUTHORIZATION(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    create_table(): Create_tableContext[];
    create_table(i: number): Create_tableContext;
    create_view(): Create_viewContext[];
    create_view(i: number): Create_viewContext;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    TO(): TerminalNode[];
    TO(i: number): TerminalNode;
    REVOKE(): TerminalNode[];
    REVOKE(i: number): TerminalNode;
    FROM(): TerminalNode[];
    FROM(i: number): TerminalNode;
    GRANT(): TerminalNode[];
    GRANT(i: number): TerminalNode;
    DENY(): TerminalNode[];
    DENY(i: number): TerminalNode;
    SELECT(): TerminalNode[];
    SELECT(i: number): TerminalNode;
    INSERT(): TerminalNode[];
    INSERT(i: number): TerminalNode;
    DELETE(): TerminalNode[];
    DELETE(i: number): TerminalNode;
    UPDATE(): TerminalNode[];
    UPDATE(i: number): TerminalNode;
    COLON(): TerminalNode[];
    COLON(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
    _schema_name: IdContext;
    _owner_name: IdContext;
    CREATE(): TerminalNode;
    SCHEMA(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    AUTHORIZATION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
    _schema_name: IdContext;
    ALTER(): TerminalNode;
    SCHEMA(): TerminalNode;
    TRANSFER(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    OBJECT(): TerminalNode | undefined;
    COLON(): TerminalNode[];
    COLON(i: number): TerminalNode;
    DOT(): TerminalNode | undefined;
    ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_search_property_listContext extends ParserRuleContext {
    _new_list_name: IdContext;
    _database_name: IdContext;
    _source_list_name: IdContext;
    _owner_name: IdContext;
    CREATE(): TerminalNode;
    SEARCH(): TerminalNode;
    PROPERTY(): TerminalNode;
    LIST(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    FROM(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_security_policyContext extends ParserRuleContext {
    _schema_name: IdContext;
    _security_policy_name: IdContext;
    _tvf_schema_name: IdContext;
    _security_predicate_function_name: IdContext;
    _column_name_or_arguments: IdContext;
    _table_schema_name: IdContext;
    _name: IdContext;
    CREATE(): TerminalNode;
    SECURITY(): TerminalNode;
    POLICY(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    ADD(): TerminalNode[];
    ADD(i: number): TerminalNode;
    PREDICATE(): TerminalNode[];
    PREDICATE(i: number): TerminalNode;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    WITH(): TerminalNode | undefined;
    STATE(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    REPLICATION(): TerminalNode | undefined;
    OFF(): TerminalNode[];
    OFF(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    AFTER(): TerminalNode[];
    AFTER(i: number): TerminalNode;
    BEFORE(): TerminalNode[];
    BEFORE(i: number): TerminalNode;
    SCHEMABINDING(): TerminalNode | undefined;
    FILTER(): TerminalNode[];
    FILTER(i: number): TerminalNode;
    BLOCK(): TerminalNode[];
    BLOCK(i: number): TerminalNode;
    INSERT(): TerminalNode[];
    INSERT(i: number): TerminalNode;
    UPDATE(): TerminalNode[];
    UPDATE(i: number): TerminalNode;
    DELETE(): TerminalNode[];
    DELETE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_sequenceContext extends ParserRuleContext {
    _schema_name: IdContext;
    _sequence_name: IdContext;
    _sequnce_increment: Token;
    ALTER(): TerminalNode;
    SEQUENCE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode | undefined;
    RESTART(): TerminalNode | undefined;
    INCREMENT(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    MINVALUE(): TerminalNode | undefined;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    NO(): TerminalNode[];
    NO(i: number): TerminalNode;
    MAXVALUE(): TerminalNode | undefined;
    CYCLE(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_sequenceContext extends ParserRuleContext {
    _schema_name: IdContext;
    _sequence_name: IdContext;
    CREATE(): TerminalNode;
    SEQUENCE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    data_type(): Data_typeContext | undefined;
    START(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    INCREMENT(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    MINVALUE(): TerminalNode | undefined;
    NO(): TerminalNode[];
    NO(i: number): TerminalNode;
    MAXVALUE(): TerminalNode | undefined;
    CYCLE(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_server_auditContext extends ParserRuleContext {
    _audit_name: IdContext;
    _filepath: Token;
    _max_rollover_files: Token;
    _max_files: Token;
    _queue_delay: Token;
    _event_field_name: IdContext;
    _new_audit_name: IdContext;
    ALTER(): TerminalNode;
    SERVER(): TerminalNode;
    AUDIT(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    REMOVE(): TerminalNode | undefined;
    WHERE(): TerminalNode | undefined;
    MODIFY(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    TO(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    FILE(): TerminalNode | undefined;
    APPLICATION_LOG(): TerminalNode | undefined;
    SECURITY_LOG(): TerminalNode | undefined;
    QUEUE_DELAY(): TerminalNode[];
    QUEUE_DELAY(i: number): TerminalNode;
    ON_FAILURE(): TerminalNode[];
    ON_FAILURE(i: number): TerminalNode;
    STATE(): TerminalNode[];
    STATE(i: number): TerminalNode;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    AND(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    CONTINUE(): TerminalNode[];
    CONTINUE(i: number): TerminalNode;
    SHUTDOWN(): TerminalNode[];
    SHUTDOWN(i: number): TerminalNode;
    FAIL_OPERATION(): TerminalNode[];
    FAIL_OPERATION(i: number): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    OFF(): TerminalNode[];
    OFF(i: number): TerminalNode;
    GREATER(): TerminalNode | undefined;
    LESS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    NOT(): TerminalNode | undefined;
    EXCLAMATION(): TerminalNode | undefined;
    FILEPATH(): TerminalNode[];
    FILEPATH(i: number): TerminalNode;
    MAXSIZE(): TerminalNode[];
    MAXSIZE(i: number): TerminalNode;
    MAX_ROLLOVER_FILES(): TerminalNode[];
    MAX_ROLLOVER_FILES(i: number): TerminalNode;
    MAX_FILES(): TerminalNode[];
    MAX_FILES(i: number): TerminalNode;
    RESERVE_DISK_SPACE(): TerminalNode[];
    RESERVE_DISK_SPACE(i: number): TerminalNode;
    UNLIMITED(): TerminalNode[];
    UNLIMITED(i: number): TerminalNode;
    MB(): TerminalNode[];
    MB(i: number): TerminalNode;
    GB(): TerminalNode[];
    GB(i: number): TerminalNode;
    TB(): TerminalNode[];
    TB(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_server_auditContext extends ParserRuleContext {
    _audit_name: IdContext;
    _filepath: Token;
    _max_rollover_files: Token;
    _max_files: Token;
    _queue_delay: Token;
    _audit_guid: IdContext;
    _event_field_name: IdContext;
    _new_audit_name: IdContext;
    CREATE(): TerminalNode;
    SERVER(): TerminalNode;
    AUDIT(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    REMOVE(): TerminalNode | undefined;
    WHERE(): TerminalNode | undefined;
    MODIFY(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    TO(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    FILE(): TerminalNode | undefined;
    APPLICATION_LOG(): TerminalNode | undefined;
    SECURITY_LOG(): TerminalNode | undefined;
    QUEUE_DELAY(): TerminalNode[];
    QUEUE_DELAY(i: number): TerminalNode;
    ON_FAILURE(): TerminalNode[];
    ON_FAILURE(i: number): TerminalNode;
    STATE(): TerminalNode[];
    STATE(i: number): TerminalNode;
    AUDIT_GUID(): TerminalNode[];
    AUDIT_GUID(i: number): TerminalNode;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    AND(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    CONTINUE(): TerminalNode[];
    CONTINUE(i: number): TerminalNode;
    SHUTDOWN(): TerminalNode[];
    SHUTDOWN(i: number): TerminalNode;
    FAIL_OPERATION(): TerminalNode[];
    FAIL_OPERATION(i: number): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    OFF(): TerminalNode[];
    OFF(i: number): TerminalNode;
    GREATER(): TerminalNode | undefined;
    LESS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    NOT(): TerminalNode | undefined;
    EXCLAMATION(): TerminalNode | undefined;
    FILEPATH(): TerminalNode[];
    FILEPATH(i: number): TerminalNode;
    MAXSIZE(): TerminalNode[];
    MAXSIZE(i: number): TerminalNode;
    MAX_ROLLOVER_FILES(): TerminalNode[];
    MAX_ROLLOVER_FILES(i: number): TerminalNode;
    MAX_FILES(): TerminalNode[];
    MAX_FILES(i: number): TerminalNode;
    RESERVE_DISK_SPACE(): TerminalNode[];
    RESERVE_DISK_SPACE(i: number): TerminalNode;
    UNLIMITED(): TerminalNode[];
    UNLIMITED(i: number): TerminalNode;
    MB(): TerminalNode[];
    MB(i: number): TerminalNode;
    GB(): TerminalNode[];
    GB(i: number): TerminalNode;
    TB(): TerminalNode[];
    TB(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_server_audit_specificationContext extends ParserRuleContext {
    _audit_specification_name: IdContext;
    _audit_name: IdContext;
    _audit_action_group_name: IdContext;
    ALTER(): TerminalNode;
    SERVER(): TerminalNode[];
    SERVER(i: number): TerminalNode;
    AUDIT(): TerminalNode[];
    AUDIT(i: number): TerminalNode;
    SPECIFICATION(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    FOR(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    WITH(): TerminalNode | undefined;
    STATE(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    ADD(): TerminalNode[];
    ADD(i: number): TerminalNode;
    DROP(): TerminalNode[];
    DROP(i: number): TerminalNode;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_server_audit_specificationContext extends ParserRuleContext {
    _audit_specification_name: IdContext;
    _audit_name: IdContext;
    _audit_action_group_name: IdContext;
    CREATE(): TerminalNode;
    SERVER(): TerminalNode[];
    SERVER(i: number): TerminalNode;
    AUDIT(): TerminalNode[];
    AUDIT(i: number): TerminalNode;
    SPECIFICATION(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    FOR(): TerminalNode | undefined;
    ADD(): TerminalNode[];
    ADD(i: number): TerminalNode;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    WITH(): TerminalNode | undefined;
    STATE(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_server_configurationContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    SERVER(): TerminalNode;
    CONFIGURATION(): TerminalNode;
    SET(): TerminalNode[];
    SET(i: number): TerminalNode;
    PROCESS(): TerminalNode | undefined;
    AFFINITY(): TerminalNode | undefined;
    DIAGNOSTICS(): TerminalNode | undefined;
    LOG(): TerminalNode | undefined;
    FAILOVER(): TerminalNode | undefined;
    CLUSTER(): TerminalNode | undefined;
    PROPERTY(): TerminalNode | undefined;
    HADR(): TerminalNode | undefined;
    CONTEXT(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    BUFFER(): TerminalNode | undefined;
    POOL(): TerminalNode | undefined;
    EXTENSION(): TerminalNode | undefined;
    SOFTNUMA(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    CPU(): TerminalNode | undefined;
    NUMANODE(): TerminalNode | undefined;
    PATH(): TerminalNode | undefined;
    MAX_SIZE(): TerminalNode | undefined;
    MAX_FILES(): TerminalNode | undefined;
    VERBOSELOGGING(): TerminalNode | undefined;
    SQLDUMPERFLAGS(): TerminalNode | undefined;
    SQLDUMPERPATH(): TerminalNode | undefined;
    SQLDUMPERTIMEOUT(): TerminalNode | undefined;
    FAILURECONDITIONLEVEL(): TerminalNode | undefined;
    HEALTHCHECKTIMEOUT(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    FILENAME(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SIZE(): TerminalNode | undefined;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    KB(): TerminalNode | undefined;
    MB(): TerminalNode | undefined;
    GB(): TerminalNode | undefined;
    AUTO(): TerminalNode | undefined;
    TO(): TerminalNode[];
    TO(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_server_roleContext extends ParserRuleContext {
    _server_role_name: IdContext;
    _server_principal: IdContext;
    _new_server_role_name: IdContext;
    ALTER(): TerminalNode;
    SERVER(): TerminalNode;
    ROLE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    MEMBER(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_server_roleContext extends ParserRuleContext {
    _server_role: IdContext;
    _server_principal: IdContext;
    CREATE(): TerminalNode;
    SERVER(): TerminalNode;
    ROLE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    AUTHORIZATION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_server_role_pdwContext extends ParserRuleContext {
    _server_role_name: IdContext;
    _login: IdContext;
    ALTER(): TerminalNode;
    SERVER(): TerminalNode;
    ROLE(): TerminalNode;
    MEMBER(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_serviceContext extends ParserRuleContext {
    _modified_service_name: IdContext;
    _schema_name: IdContext;
    _queue_name: IdContext;
    _modified_contract_name: IdContext;
    ALTER(): TerminalNode;
    SERVICE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    ON(): TerminalNode | undefined;
    QUEUE(): TerminalNode | undefined;
    ADD(): TerminalNode[];
    ADD(i: number): TerminalNode;
    DROP(): TerminalNode[];
    DROP(i: number): TerminalNode;
    DOT(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_serviceContext extends ParserRuleContext {
    _create_service_name: IdContext;
    _owner_name: IdContext;
    _schema_name: IdContext;
    _queue_name: IdContext;
    CREATE(): TerminalNode;
    SERVICE(): TerminalNode;
    ON(): TerminalNode;
    QUEUE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    AUTHORIZATION(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_service_master_keyContext extends ParserRuleContext {
    _acold_account_name: Token;
    _old_password: Token;
    _new_account_name: Token;
    _new_password: Token;
    ALTER(): TerminalNode;
    SERVICE(): TerminalNode;
    MASTER(): TerminalNode;
    KEY(): TerminalNode;
    REGENERATE(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    OLD_ACCOUNT(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    COMMA(): TerminalNode | undefined;
    OLD_PASSWORD(): TerminalNode | undefined;
    NEW_ACCOUNT(): TerminalNode | undefined;
    NEW_PASSWORD(): TerminalNode | undefined;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_symmetric_keyContext extends ParserRuleContext {
    _key_name: IdContext;
    _certificate_name: IdContext;
    _password: Token;
    _symmetric_key_name: IdContext;
    _Asym_key_name: IdContext;
    ALTER(): TerminalNode;
    SYMMETRIC(): TerminalNode[];
    SYMMETRIC(i: number): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    ENCRYPTION(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    ADD(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    CERTIFICATE(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    ASYMMETRIC(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_symmetric_keyContext extends ParserRuleContext {
    _key_name: IdContext;
    _owner_name: IdContext;
    _provider_name: IdContext;
    _key_pass_phrase: Token;
    _identity_phrase: Token;
    _provider_key_name: Token;
    _certificate_name: IdContext;
    _password: Token;
    _symmetric_key_name: IdContext;
    _asym_key_name: IdContext;
    ALTER(): TerminalNode;
    SYMMETRIC(): TerminalNode[];
    SYMMETRIC(i: number): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    WITH(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    PROVIDER(): TerminalNode | undefined;
    ENCRYPTION(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    KEY_SOURCE(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    ALGORITHM(): TerminalNode | undefined;
    IDENTITY_VALUE(): TerminalNode | undefined;
    PROVIDER_KEY_NAME(): TerminalNode | undefined;
    CREATION_DISPOSITION(): TerminalNode | undefined;
    CERTIFICATE(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    ASYMMETRIC(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    DES(): TerminalNode | undefined;
    TRIPLE_DES(): TerminalNode | undefined;
    TRIPLE_DES_3KEY(): TerminalNode | undefined;
    RC2(): TerminalNode | undefined;
    RC4(): TerminalNode | undefined;
    RC4_128(): TerminalNode | undefined;
    DESX(): TerminalNode | undefined;
    AES_128(): TerminalNode | undefined;
    AES_192(): TerminalNode | undefined;
    AES_256(): TerminalNode | undefined;
    CREATE_NEW(): TerminalNode | undefined;
    OPEN_EXISTING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_synonymContext extends ParserRuleContext {
    _schema_name_1: IdContext;
    _synonym_name: IdContext;
    _server_name: IdContext;
    _database_name: IdContext;
    _schema_name_2: IdContext;
    _object_name: IdContext;
    _database_or_schema2: IdContext;
    _schema_id_2_or_object_name: IdContext;
    CREATE(): TerminalNode;
    SYNONYM(): TerminalNode;
    FOR(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_userContext extends ParserRuleContext {
    _username: IdContext;
    _newusername: IdContext;
    _schema_name: IdContext;
    _loginame: IdContext;
    _lcid: Token;
    _language_name_or_alias: IdContext;
    ALTER(): TerminalNode;
    USER(): TerminalNode;
    WITH(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    NAME(): TerminalNode[];
    NAME(i: number): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    DEFAULT_SCHEMA(): TerminalNode[];
    DEFAULT_SCHEMA(i: number): TerminalNode;
    LOGIN(): TerminalNode[];
    LOGIN(i: number): TerminalNode;
    PASSWORD(): TerminalNode[];
    PASSWORD(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    DEFAULT_LANGUAGE(): TerminalNode[];
    DEFAULT_LANGUAGE(i: number): TerminalNode;
    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(): TerminalNode[];
    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(i: number): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    OFF(): TerminalNode[];
    OFF(i: number): TerminalNode;
    NULL(): TerminalNode[];
    NULL(i: number): TerminalNode;
    NONE(): TerminalNode[];
    NONE(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    OLD_PASSWORD(): TerminalNode[];
    OLD_PASSWORD(i: number): TerminalNode;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_userContext extends ParserRuleContext {
    _user_name: IdContext;
    _login_name: IdContext;
    _schema_name: IdContext;
    _windows_principal: IdContext;
    _language_name_or_alias: IdContext;
    _password: Token;
    _Azure_Active_Directory_principal: IdContext;
    _cert_name: IdContext;
    _asym_key_name: IdContext;
    CREATE(): TerminalNode;
    USER(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    LOGIN(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    DEFAULT_SCHEMA(): TerminalNode[];
    DEFAULT_SCHEMA(i: number): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(): TerminalNode[];
    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(i: number): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    OFF(): TerminalNode[];
    OFF(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    PASSWORD(): TerminalNode | undefined;
    EXTERNAL(): TerminalNode | undefined;
    PROVIDER(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    DEFAULT_LANGUAGE(): TerminalNode[];
    DEFAULT_LANGUAGE(i: number): TerminalNode;
    SID(): TerminalNode[];
    SID(i: number): TerminalNode;
    BINARY(): TerminalNode[];
    BINARY(i: number): TerminalNode;
    NONE(): TerminalNode[];
    NONE(i: number): TerminalNode;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    WITHOUT(): TerminalNode | undefined;
    CERTIFICATE(): TerminalNode | undefined;
    ASYMMETRIC(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_user_azure_sql_dwContext extends ParserRuleContext {
    _user_name: IdContext;
    _login_name: IdContext;
    _schema_name: IdContext;
    _Azure_Active_Directory_principal: IdContext;
    CREATE(): TerminalNode;
    USER(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    LOGIN(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    DEFAULT_SCHEMA(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    EXTERNAL(): TerminalNode | undefined;
    PROVIDER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_user_azure_sqlContext extends ParserRuleContext {
    _username: IdContext;
    _newusername: IdContext;
    _schema_name: IdContext;
    _loginame: IdContext;
    ALTER(): TerminalNode;
    USER(): TerminalNode;
    WITH(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    NAME(): TerminalNode[];
    NAME(i: number): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    DEFAULT_SCHEMA(): TerminalNode[];
    DEFAULT_SCHEMA(i: number): TerminalNode;
    LOGIN(): TerminalNode[];
    LOGIN(i: number): TerminalNode;
    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(): TerminalNode[];
    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(i: number): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    OFF(): TerminalNode[];
    OFF(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_workload_groupContext extends ParserRuleContext {
    _workload_group_group_name: IdContext;
    _request_max_memory_grant: Token;
    _request_max_cpu_time_sec: Token;
    _request_memory_grant_timeout_sec: Token;
    _max_dop: Token;
    _group_max_requests: Token;
    _workload_group_pool_name: IdContext;
    ALTER(): TerminalNode;
    WORKLOAD(): TerminalNode;
    GROUP(): TerminalNode;
    DEFAULT_DOUBLE_QUOTE(): TerminalNode[];
    DEFAULT_DOUBLE_QUOTE(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    WITH(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    IMPORTANCE(): TerminalNode[];
    IMPORTANCE(i: number): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    REQUEST_MAX_MEMORY_GRANT_PERCENT(): TerminalNode[];
    REQUEST_MAX_MEMORY_GRANT_PERCENT(i: number): TerminalNode;
    REQUEST_MAX_CPU_TIME_SEC(): TerminalNode[];
    REQUEST_MAX_CPU_TIME_SEC(i: number): TerminalNode;
    REQUEST_MEMORY_GRANT_TIMEOUT_SEC(): TerminalNode[];
    REQUEST_MEMORY_GRANT_TIMEOUT_SEC(i: number): TerminalNode;
    MAX_DOP(): TerminalNode[];
    MAX_DOP(i: number): TerminalNode;
    GROUP_MAX_REQUESTS(): TerminalNode[];
    GROUP_MAX_REQUESTS(i: number): TerminalNode;
    LOW(): TerminalNode[];
    LOW(i: number): TerminalNode;
    MEDIUM(): TerminalNode[];
    MEDIUM(i: number): TerminalNode;
    HIGH(): TerminalNode[];
    HIGH(i: number): TerminalNode;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_workload_groupContext extends ParserRuleContext {
    _workload_group_group_name: IdContext;
    _request_max_memory_grant: Token;
    _request_max_cpu_time_sec: Token;
    _request_memory_grant_timeout_sec: Token;
    _max_dop: Token;
    _group_max_requests: Token;
    _workload_group_pool_name: IdContext;
    _external_pool_name: IdContext;
    CREATE(): TerminalNode;
    WORKLOAD(): TerminalNode;
    GROUP(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    WITH(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    IMPORTANCE(): TerminalNode[];
    IMPORTANCE(i: number): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    REQUEST_MAX_MEMORY_GRANT_PERCENT(): TerminalNode[];
    REQUEST_MAX_MEMORY_GRANT_PERCENT(i: number): TerminalNode;
    REQUEST_MAX_CPU_TIME_SEC(): TerminalNode[];
    REQUEST_MAX_CPU_TIME_SEC(i: number): TerminalNode;
    REQUEST_MEMORY_GRANT_TIMEOUT_SEC(): TerminalNode[];
    REQUEST_MEMORY_GRANT_TIMEOUT_SEC(i: number): TerminalNode;
    MAX_DOP(): TerminalNode[];
    MAX_DOP(i: number): TerminalNode;
    GROUP_MAX_REQUESTS(): TerminalNode[];
    GROUP_MAX_REQUESTS(i: number): TerminalNode;
    DEFAULT_DOUBLE_QUOTE(): TerminalNode[];
    DEFAULT_DOUBLE_QUOTE(i: number): TerminalNode;
    EXTERNAL(): TerminalNode | undefined;
    LOW(): TerminalNode[];
    LOW(i: number): TerminalNode;
    MEDIUM(): TerminalNode[];
    MEDIUM(i: number): TerminalNode;
    HIGH(): TerminalNode[];
    HIGH(i: number): TerminalNode;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_xml_schema_collectionContext extends ParserRuleContext {
    _relational_schema: IdContext;
    _sql_identifier: IdContext;
    CREATE(): TerminalNode;
    XML(): TerminalNode;
    SCHEMA(): TerminalNode;
    COLLECTION(): TerminalNode;
    AS(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    STRING(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_queueContext extends ParserRuleContext {
    _queue_name: IdContext;
    _filegroup: IdContext;
    CREATE(): TerminalNode;
    QUEUE(): TerminalNode;
    full_table_name(): Full_table_nameContext | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    queue_settings(): Queue_settingsContext | undefined;
    ON(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Queue_settingsContext extends ParserRuleContext {
    _max_readers: Token;
    _user_name: Token;
    WITH(): TerminalNode;
    STATUS(): TerminalNode[];
    STATUS(i: number): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    RETENTION(): TerminalNode | undefined;
    ACTIVATION(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    POISON_MESSAGE_HANDLING(): TerminalNode | undefined;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    OFF(): TerminalNode[];
    OFF(i: number): TerminalNode;
    DROP(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    PROCEDURE_NAME(): TerminalNode | undefined;
    func_proc_name_database_schema(): Func_proc_name_database_schemaContext | undefined;
    MAX_QUEUE_READERS(): TerminalNode | undefined;
    EXECUTE(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    SELF(): TerminalNode | undefined;
    OWNER(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_queueContext extends ParserRuleContext {
    _queue_name: IdContext;
    ALTER(): TerminalNode;
    QUEUE(): TerminalNode;
    full_table_name(): Full_table_nameContext | undefined;
    queue_settings(): Queue_settingsContext | undefined;
    queue_action(): Queue_actionContext | undefined;
    id(): IdContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Queue_actionContext extends ParserRuleContext {
    REBUILD(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    queue_rebuild_options(): Queue_rebuild_optionsContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    REORGANIZE(): TerminalNode | undefined;
    LOB_COMPACTION(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    MOVE(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    id(): IdContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Queue_rebuild_optionsContext extends ParserRuleContext {
    MAXDOP(): TerminalNode;
    EQUAL(): TerminalNode;
    DECIMAL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_contractContext extends ParserRuleContext {
    _owner_name: IdContext;
    _message_type_name: IdContext;
    CREATE(): TerminalNode;
    CONTRACT(): TerminalNode;
    contract_name(): Contract_nameContext;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    AUTHORIZATION(): TerminalNode | undefined;
    SENT(): TerminalNode[];
    SENT(i: number): TerminalNode;
    BY(): TerminalNode[];
    BY(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    INITIATOR(): TerminalNode[];
    INITIATOR(i: number): TerminalNode;
    TARGET(): TerminalNode[];
    TARGET(i: number): TerminalNode;
    ANY(): TerminalNode[];
    ANY(i: number): TerminalNode;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Conversation_statementContext extends ParserRuleContext {
    begin_conversation_timer(): Begin_conversation_timerContext | undefined;
    begin_conversation_dialog(): Begin_conversation_dialogContext | undefined;
    end_conversation(): End_conversationContext | undefined;
    get_conversation(): Get_conversationContext | undefined;
    send_conversation(): Send_conversationContext | undefined;
    waitfor_conversation(): Waitfor_conversationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Message_statementContext extends ParserRuleContext {
    _message_type_name: IdContext;
    _owner_name: IdContext;
    _schema_collection_name: IdContext;
    CREATE(): TerminalNode;
    MESSAGE(): TerminalNode;
    TYPE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    VALIDATION(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    EMPTY(): TerminalNode | undefined;
    WELL_FORMED_XML(): TerminalNode | undefined;
    VALID_XML(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    COLLECTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Merge_statementContext extends ParserRuleContext {
    MERGE(): TerminalNode;
    ddl_object(): Ddl_objectContext;
    USING(): TerminalNode;
    table_sources(): Table_sourcesContext;
    ON(): TerminalNode;
    search_condition(): Search_conditionContext;
    SEMI(): TerminalNode;
    with_expression(): With_expressionContext | undefined;
    TOP(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    INTO(): TerminalNode | undefined;
    insert_with_table_hints(): Insert_with_table_hintsContext | undefined;
    as_table_alias(): As_table_aliasContext | undefined;
    when_matches(): When_matchesContext[];
    when_matches(i: number): When_matchesContext;
    output_clause(): Output_clauseContext | undefined;
    option_clause(): Option_clauseContext | undefined;
    PERCENT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class When_matchesContext extends ParserRuleContext {
    WHEN(): TerminalNode[];
    WHEN(i: number): TerminalNode;
    MATCHED(): TerminalNode[];
    MATCHED(i: number): TerminalNode;
    THEN(): TerminalNode[];
    THEN(i: number): TerminalNode;
    merge_matched(): Merge_matchedContext[];
    merge_matched(i: number): Merge_matchedContext;
    AND(): TerminalNode[];
    AND(i: number): TerminalNode;
    search_condition(): Search_conditionContext[];
    search_condition(i: number): Search_conditionContext;
    NOT(): TerminalNode[];
    NOT(i: number): TerminalNode;
    merge_not_matched(): Merge_not_matchedContext | undefined;
    BY(): TerminalNode[];
    BY(i: number): TerminalNode;
    TARGET(): TerminalNode | undefined;
    SOURCE(): TerminalNode[];
    SOURCE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Merge_matchedContext extends ParserRuleContext {
    UPDATE(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    update_elem_merge(): Update_elem_mergeContext[];
    update_elem_merge(i: number): Update_elem_mergeContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    DELETE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Merge_not_matchedContext extends ParserRuleContext {
    INSERT(): TerminalNode;
    table_value_constructor(): Table_value_constructorContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    VALUES(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    column_name_list(): Column_name_listContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Delete_statementContext extends ParserRuleContext {
    _cursor_var: Token;
    DELETE(): TerminalNode;
    delete_statement_from(): Delete_statement_fromContext;
    with_expression(): With_expressionContext | undefined;
    TOP(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    FROM(): TerminalNode[];
    FROM(i: number): TerminalNode;
    insert_with_table_hints(): Insert_with_table_hintsContext | undefined;
    output_clause(): Output_clauseContext | undefined;
    table_sources(): Table_sourcesContext | undefined;
    WHERE(): TerminalNode | undefined;
    for_clause(): For_clauseContext | undefined;
    option_clause(): Option_clauseContext | undefined;
    SEMI(): TerminalNode | undefined;
    search_condition(): Search_conditionContext | undefined;
    CURRENT(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    PERCENT(): TerminalNode | undefined;
    cursor_name(): Cursor_nameContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Delete_statement_fromContext extends ParserRuleContext {
    _table_var: Token;
    ddl_object(): Ddl_objectContext | undefined;
    table_alias(): Table_aliasContext | undefined;
    rowset_function_limited(): Rowset_function_limitedContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Insert_statementContext extends ParserRuleContext {
    INSERT(): TerminalNode;
    insert_statement_value(): Insert_statement_valueContext;
    ddl_object(): Ddl_objectContext | undefined;
    rowset_function_limited(): Rowset_function_limitedContext | undefined;
    with_expression(): With_expressionContext | undefined;
    TOP(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    expression(): ExpressionContext | undefined;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    INTO(): TerminalNode | undefined;
    insert_with_table_hints(): Insert_with_table_hintsContext | undefined;
    insert_column_name_list(): Insert_column_name_listContext | undefined;
    output_clause(): Output_clauseContext | undefined;
    for_clause(): For_clauseContext | undefined;
    option_clause(): Option_clauseContext | undefined;
    SEMI(): TerminalNode | undefined;
    PERCENT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Insert_statement_valueContext extends ParserRuleContext {
    table_value_constructor(): Table_value_constructorContext | undefined;
    derived_table(): Derived_tableContext | undefined;
    execute_statement(): Execute_statementContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    VALUES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Receive_statementContext extends ParserRuleContext {
    _table_variable: IdContext;
    _where: Search_conditionContext;
    RECEIVE(): TerminalNode;
    FROM(): TerminalNode;
    full_table_name(): Full_table_nameContext;
    ALL(): TerminalNode | undefined;
    DISTINCT(): TerminalNode | undefined;
    top_clause(): Top_clauseContext | undefined;
    STAR(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode[];
    LOCAL_ID(i: number): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    INTO(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    id(): IdContext | undefined;
    WHERE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    search_condition(): Search_conditionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Select_statement_standaloneContext extends ParserRuleContext {
    select_statement(): Select_statementContext;
    with_expression(): With_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Select_statementContext extends ParserRuleContext {
    query_expression(): Query_expressionContext;
    order_by_clause(): Order_by_clauseContext | undefined;
    for_clause(): For_clauseContext | undefined;
    option_clause(): Option_clauseContext | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class TimeContext extends ParserRuleContext {
    LOCAL_ID(): TerminalNode | undefined;
    constant(): ConstantContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Update_statementContext extends ParserRuleContext {
    _cursor_var: Token;
    UPDATE(): TerminalNode;
    SET(): TerminalNode;
    update_elem(): Update_elemContext[];
    update_elem(i: number): Update_elemContext;
    ddl_object(): Ddl_objectContext | undefined;
    rowset_function_limited(): Rowset_function_limitedContext | undefined;
    with_expression(): With_expressionContext | undefined;
    TOP(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    with_table_hints(): With_table_hintsContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    output_clause(): Output_clauseContext | undefined;
    FROM(): TerminalNode | undefined;
    table_sources(): Table_sourcesContext | undefined;
    WHERE(): TerminalNode | undefined;
    for_clause(): For_clauseContext | undefined;
    option_clause(): Option_clauseContext | undefined;
    SEMI(): TerminalNode | undefined;
    search_condition(): Search_conditionContext | undefined;
    CURRENT(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    PERCENT(): TerminalNode | undefined;
    cursor_name(): Cursor_nameContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Output_clauseContext extends ParserRuleContext {
    OUTPUT(): TerminalNode;
    output_dml_list_elem(): Output_dml_list_elemContext[];
    output_dml_list_elem(i: number): Output_dml_list_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    INTO(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    table_name(): Table_nameContext | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    column_name_list(): Column_name_listContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Output_dml_list_elemContext extends ParserRuleContext {
    output_column_name(): Output_column_nameContext | undefined;
    expression(): ExpressionContext | undefined;
    as_column_alias(): As_column_aliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Output_column_nameContext extends ParserRuleContext {
    DOT(): TerminalNode | undefined;
    DELETED(): TerminalNode | undefined;
    INSERTED(): TerminalNode | undefined;
    table_name(): Table_nameContext | undefined;
    STAR(): TerminalNode | undefined;
    id(): IdContext | undefined;
    DOLLAR_ACTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_databaseContext extends ParserRuleContext {
    _database: IdContext;
    _collation_name: IdContext;
    CREATE(): TerminalNode;
    DATABASE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    CONTAINMENT(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    database_file_spec(): Database_file_specContext[];
    database_file_spec(i: number): Database_file_specContext;
    LOG(): TerminalNode | undefined;
    COLLATE(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    create_database_option(): Create_database_optionContext[];
    create_database_option(i: number): Create_database_optionContext;
    NONE(): TerminalNode | undefined;
    PARTIAL(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_indexContext extends ParserRuleContext {
    _where: Search_conditionContext;
    CREATE(): TerminalNode;
    INDEX(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    table_name(): Table_nameContext;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    column_name_list_with_order(): Column_name_list_with_orderContext;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    UNIQUE(): TerminalNode | undefined;
    clustered(): ClusteredContext | undefined;
    INCLUDE(): TerminalNode | undefined;
    column_name_list(): Column_name_listContext | undefined;
    WHERE(): TerminalNode | undefined;
    index_options(): Index_optionsContext | undefined;
    SEMI(): TerminalNode | undefined;
    search_condition(): Search_conditionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_xml_indexContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    XML(): TerminalNode[];
    XML(i: number): TerminalNode;
    INDEX(): TerminalNode[];
    INDEX(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    ON(): TerminalNode;
    table_name(): Table_nameContext;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    PRIMARY(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    index_options(): Index_optionsContext | undefined;
    SEMI(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    VALUE(): TerminalNode | undefined;
    PATH(): TerminalNode | undefined;
    PROPERTY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_or_alter_procedureContext extends ParserRuleContext {
    _proc: Token;
    _procName: Func_proc_name_schemaContext;
    AS(): TerminalNode;
    func_proc_name_schema(): Func_proc_name_schemaContext;
    ALTER(): TerminalNode | undefined;
    PROC(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    procedure_param(): Procedure_paramContext[];
    procedure_param(i: number): Procedure_paramContext;
    WITH(): TerminalNode | undefined;
    procedure_option(): Procedure_optionContext[];
    procedure_option(i: number): Procedure_optionContext;
    FOR(): TerminalNode | undefined;
    REPLICATION(): TerminalNode | undefined;
    sql_clauses(): Sql_clausesContext[];
    sql_clauses(i: number): Sql_clausesContext;
    CREATE(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_or_alter_triggerContext extends ParserRuleContext {
    create_or_alter_dml_trigger(): Create_or_alter_dml_triggerContext | undefined;
    create_or_alter_ddl_trigger(): Create_or_alter_ddl_triggerContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_or_alter_dml_triggerContext extends ParserRuleContext {
    TRIGGER(): TerminalNode;
    simple_name(): Simple_nameContext;
    ON(): TerminalNode;
    table_name(): Table_nameContext;
    dml_trigger_operation(): Dml_trigger_operationContext[];
    dml_trigger_operation(i: number): Dml_trigger_operationContext;
    AS(): TerminalNode;
    ALTER(): TerminalNode | undefined;
    FOR(): TerminalNode[];
    FOR(i: number): TerminalNode;
    AFTER(): TerminalNode | undefined;
    INSTEAD(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    WITH(): TerminalNode[];
    WITH(i: number): TerminalNode;
    dml_trigger_option(): Dml_trigger_optionContext[];
    dml_trigger_option(i: number): Dml_trigger_optionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    APPEND(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    REPLICATION(): TerminalNode | undefined;
    sql_clauses(): Sql_clausesContext[];
    sql_clauses(i: number): Sql_clausesContext;
    CREATE(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Dml_trigger_optionContext extends ParserRuleContext {
    ENCRYPTION(): TerminalNode | undefined;
    execute_clause(): Execute_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Dml_trigger_operationContext extends ParserRuleContext {
    INSERT(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    DELETE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_or_alter_ddl_triggerContext extends ParserRuleContext {
    TRIGGER(): TerminalNode;
    simple_name(): Simple_nameContext;
    ON(): TerminalNode;
    ddl_trigger_operation(): Ddl_trigger_operationContext;
    AS(): TerminalNode;
    FOR(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    ALTER(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    dml_trigger_option(): Dml_trigger_optionContext[];
    dml_trigger_option(i: number): Dml_trigger_optionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    dml_trigger_operation(): Dml_trigger_operationContext[];
    dml_trigger_operation(i: number): Dml_trigger_operationContext;
    sql_clauses(): Sql_clausesContext[];
    sql_clauses(i: number): Sql_clausesContext;
    CREATE(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Ddl_trigger_operationContext extends ParserRuleContext {
    simple_id(): Simple_idContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_or_alter_functionContext extends ParserRuleContext {
    _funcName: Func_proc_name_schemaContext;
    FUNCTION(): TerminalNode;
    func_proc_name_schema(): Func_proc_name_schemaContext;
    ALTER(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    func_body_returns_select(): Func_body_returns_selectContext | undefined;
    func_body_returns_table(): Func_body_returns_tableContext | undefined;
    func_body_returns_scalar(): Func_body_returns_scalarContext | undefined;
    SEMI(): TerminalNode | undefined;
    CREATE(): TerminalNode | undefined;
    procedure_param(): Procedure_paramContext[];
    procedure_param(i: number): Procedure_paramContext;
    OR(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Func_body_returns_selectContext extends ParserRuleContext {
    RETURNS(): TerminalNode;
    TABLE(): TerminalNode;
    RETURN(): TerminalNode;
    LR_BRACKET(): TerminalNode | undefined;
    select_statement_standalone(): Select_statement_standaloneContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    function_option(): Function_optionContext[];
    function_option(i: number): Function_optionContext;
    AS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Func_body_returns_tableContext extends ParserRuleContext {
    RETURNS(): TerminalNode;
    LOCAL_ID(): TerminalNode;
    table_type_definition(): Table_type_definitionContext;
    BEGIN(): TerminalNode;
    RETURN(): TerminalNode;
    END(): TerminalNode;
    WITH(): TerminalNode | undefined;
    function_option(): Function_optionContext[];
    function_option(i: number): Function_optionContext;
    AS(): TerminalNode | undefined;
    sql_clauses(): Sql_clausesContext[];
    sql_clauses(i: number): Sql_clausesContext;
    SEMI(): TerminalNode[];
    SEMI(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Func_body_returns_scalarContext extends ParserRuleContext {
    _ret: ExpressionContext;
    RETURNS(): TerminalNode;
    data_type(): Data_typeContext;
    BEGIN(): TerminalNode;
    RETURN(): TerminalNode;
    END(): TerminalNode;
    expression(): ExpressionContext;
    WITH(): TerminalNode | undefined;
    function_option(): Function_optionContext[];
    function_option(i: number): Function_optionContext;
    AS(): TerminalNode | undefined;
    sql_clauses(): Sql_clausesContext[];
    sql_clauses(i: number): Sql_clausesContext;
    SEMI(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Procedure_paramContext extends ParserRuleContext {
    _type_schema: IdContext;
    _default_val: Default_valueContext;
    LOCAL_ID(): TerminalNode;
    data_type(): Data_typeContext;
    AS(): TerminalNode | undefined;
    DOT(): TerminalNode | undefined;
    VARYING(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    id(): IdContext | undefined;
    default_value(): Default_valueContext | undefined;
    OUT(): TerminalNode | undefined;
    OUTPUT(): TerminalNode | undefined;
    READONLY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Procedure_optionContext extends ParserRuleContext {
    ENCRYPTION(): TerminalNode | undefined;
    RECOMPILE(): TerminalNode | undefined;
    execute_clause(): Execute_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Function_optionContext extends ParserRuleContext {
    ENCRYPTION(): TerminalNode | undefined;
    SCHEMABINDING(): TerminalNode | undefined;
    RETURNS(): TerminalNode | undefined;
    NULL(): TerminalNode[];
    NULL(i: number): TerminalNode;
    ON(): TerminalNode | undefined;
    INPUT(): TerminalNode | undefined;
    CALLED(): TerminalNode | undefined;
    execute_clause(): Execute_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_statisticsContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    STATISTICS(): TerminalNode;
    id(): IdContext;
    ON(): TerminalNode;
    table_name(): Table_nameContext;
    LR_BRACKET(): TerminalNode;
    column_name_list(): Column_name_listContext;
    RR_BRACKET(): TerminalNode;
    WITH(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    FULLSCAN(): TerminalNode | undefined;
    SAMPLE(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    STATS_STREAM(): TerminalNode | undefined;
    PERCENT(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    NORECOMPUTE(): TerminalNode | undefined;
    INCREMENTAL(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    on_off(): On_offContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Update_statisticsContext extends ParserRuleContext {
    UPDATE(): TerminalNode;
    STATISTICS(): TerminalNode;
    full_table_name(): Full_table_nameContext;
    id(): IdContext | undefined;
    USING(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    VALUES(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_tableContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    TABLE(): TerminalNode;
    table_name(): Table_nameContext;
    LR_BRACKET(): TerminalNode;
    column_def_table_constraints(): Column_def_table_constraintsContext;
    RR_BRACKET(): TerminalNode;
    table_indices(): Table_indicesContext[];
    table_indices(i: number): Table_indicesContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    LOCK(): TerminalNode | undefined;
    simple_id(): Simple_idContext | undefined;
    table_options(): Table_optionsContext[];
    table_options(i: number): Table_optionsContext;
    ON(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    DEFAULT(): TerminalNode[];
    DEFAULT(i: number): TerminalNode;
    TEXTIMAGE_ON(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_indicesContext extends ParserRuleContext {
    INDEX(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    LR_BRACKET(): TerminalNode;
    column_name_list_with_order(): Column_name_list_with_orderContext;
    RR_BRACKET(): TerminalNode;
    index_options(): Index_optionsContext | undefined;
    ON(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    CLUSTERED(): TerminalNode | undefined;
    NONCLUSTERED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_optionsContext extends ParserRuleContext {
    WITH(): TerminalNode;
    LR_BRACKET(): TerminalNode | undefined;
    index_option(): Index_optionContext[];
    index_option(i: number): Index_optionContext;
    RR_BRACKET(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_viewContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    VIEW(): TerminalNode;
    simple_name(): Simple_nameContext;
    AS(): TerminalNode;
    select_statement_standalone(): Select_statement_standaloneContext;
    LR_BRACKET(): TerminalNode | undefined;
    column_name_list(): Column_name_listContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    WITH(): TerminalNode[];
    WITH(i: number): TerminalNode;
    view_attribute(): View_attributeContext[];
    view_attribute(i: number): View_attributeContext;
    CHECK(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class View_attributeContext extends ParserRuleContext {
    ENCRYPTION(): TerminalNode | undefined;
    SCHEMABINDING(): TerminalNode | undefined;
    VIEW_METADATA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_tableContext extends ParserRuleContext {
    _constraint: IdContext;
    _fk: Column_name_listContext;
    _pk: Column_name_listContext;
    ALTER(): TerminalNode[];
    ALTER(i: number): TerminalNode;
    TABLE(): TerminalNode[];
    TABLE(i: number): TerminalNode;
    table_name(): Table_nameContext[];
    table_name(i: number): Table_nameContext;
    SET(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    LOCK_ESCALATION(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    ADD(): TerminalNode | undefined;
    column_def_table_constraints(): Column_def_table_constraintsContext | undefined;
    COLUMN(): TerminalNode | undefined;
    column_definition(): Column_definitionContext | undefined;
    DROP(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    CONSTRAINT(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    CHECK(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    REBUILD(): TerminalNode | undefined;
    table_options(): Table_optionsContext | undefined;
    AUTO(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    column_name_list(): Column_name_listContext[];
    column_name_list(i: number): Column_name_listContext;
    ENABLE(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_databaseContext extends ParserRuleContext {
    _database: IdContext;
    _new_name: IdContext;
    _collation: IdContext;
    ALTER(): TerminalNode;
    DATABASE(): TerminalNode;
    CURRENT(): TerminalNode | undefined;
    MODIFY(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    COLLATE(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    database_optionspec(): Database_optionspecContext | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    SEMI(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    termination(): TerminationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Database_optionspecContext extends ParserRuleContext {
    auto_option(): Auto_optionContext | undefined;
    change_tracking_option(): Change_tracking_optionContext | undefined;
    containment_option(): Containment_optionContext | undefined;
    cursor_option(): Cursor_optionContext | undefined;
    database_mirroring_option(): Database_mirroring_optionContext | undefined;
    date_correlation_optimization_option(): Date_correlation_optimization_optionContext | undefined;
    db_encryption_option(): Db_encryption_optionContext | undefined;
    db_state_option(): Db_state_optionContext | undefined;
    db_update_option(): Db_update_optionContext | undefined;
    db_user_access_option(): Db_user_access_optionContext | undefined;
    delayed_durability_option(): Delayed_durability_optionContext | undefined;
    external_access_option(): External_access_optionContext | undefined;
    FILESTREAM(): TerminalNode | undefined;
    database_filestream_option(): Database_filestream_optionContext | undefined;
    hadr_options(): Hadr_optionsContext | undefined;
    mixed_page_allocation_option(): Mixed_page_allocation_optionContext | undefined;
    parameterization_option(): Parameterization_optionContext | undefined;
    recovery_option(): Recovery_optionContext | undefined;
    service_broker_option(): Service_broker_optionContext | undefined;
    snapshot_option(): Snapshot_optionContext | undefined;
    sql_option(): Sql_optionContext | undefined;
    target_recovery_time_option(): Target_recovery_time_optionContext | undefined;
    termination(): TerminationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Auto_optionContext extends ParserRuleContext {
    AUTO_CLOSE(): TerminalNode | undefined;
    on_off(): On_offContext | undefined;
    AUTO_CREATE_STATISTICS(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    INCREMENTAL(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    AUTO_SHRINK(): TerminalNode | undefined;
    AUTO_UPDATE_STATISTICS(): TerminalNode | undefined;
    AUTO_UPDATE_STATISTICS_ASYNC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Change_tracking_optionContext extends ParserRuleContext {
    CHANGE_TRACKING(): TerminalNode;
    EQUAL(): TerminalNode;
    OFF(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    change_tracking_option_list(): Change_tracking_option_listContext[];
    change_tracking_option_list(i: number): Change_tracking_option_listContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Change_tracking_option_listContext extends ParserRuleContext {
    AUTO_CLEANUP(): TerminalNode | undefined;
    EQUAL(): TerminalNode;
    on_off(): On_offContext | undefined;
    CHANGE_RETENTION(): TerminalNode | undefined;
    DAYS(): TerminalNode | undefined;
    HOURS(): TerminalNode | undefined;
    MINUTES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Containment_optionContext extends ParserRuleContext {
    CONTAINMENT(): TerminalNode;
    EQUAL(): TerminalNode;
    NONE(): TerminalNode | undefined;
    PARTIAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Cursor_optionContext extends ParserRuleContext {
    CURSOR_CLOSE_ON_COMMIT(): TerminalNode | undefined;
    on_off(): On_offContext | undefined;
    CURSOR_DEFAULT(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Alter_endpointContext extends ParserRuleContext {
    _endpointname: IdContext;
    _login: IdContext;
    _state: Token;
    _port: Token;
    _cert_name: IdContext;
    ALTER(): TerminalNode;
    ENDPOINT(): TerminalNode;
    AS(): TerminalNode;
    TCP(): TerminalNode;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    LISTENER_PORT(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    TSQL(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    SERVICE_BROKER(): TerminalNode | undefined;
    AUTHENTICATION(): TerminalNode | undefined;
    DATABASE_MIRRORING(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    STATE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    LISTENER_IP(): TerminalNode | undefined;
    WITNESS(): TerminalNode | undefined;
    PARTNER(): TerminalNode | undefined;
    ALL(): TerminalNode[];
    ALL(i: number): TerminalNode;
    IPV4_ADDR(): TerminalNode | undefined;
    IPV6_ADDR(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    WINDOWS(): TerminalNode | undefined;
    CERTIFICATE(): TerminalNode | undefined;
    ENCRYPTION(): TerminalNode | undefined;
    MESSAGE_FORWARDING(): TerminalNode | undefined;
    MESSAGE_FORWARD_SIZE(): TerminalNode | undefined;
    STARTED(): TerminalNode | undefined;
    STOPPED(): TerminalNode | undefined;
    DISABLED(): TerminalNode[];
    DISABLED(i: number): TerminalNode;
    SUPPORTED(): TerminalNode | undefined;
    REQUIRED(): TerminalNode | undefined;
    ENABLED(): TerminalNode | undefined;
    NTLM(): TerminalNode | undefined;
    KERBEROS(): TerminalNode | undefined;
    NEGOTIATE(): TerminalNode | undefined;
    ALGORITHM(): TerminalNode | undefined;
    AES(): TerminalNode | undefined;
    RC4(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Database_mirroring_optionContext extends ParserRuleContext {
    mirroring_set_option(): Mirroring_set_optionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Mirroring_set_optionContext extends ParserRuleContext {
    mirroring_partner(): Mirroring_partnerContext | undefined;
    partner_option(): Partner_optionContext | undefined;
    mirroring_witness(): Mirroring_witnessContext | undefined;
    witness_option(): Witness_optionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Mirroring_partnerContext extends ParserRuleContext {
    PARTNER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Mirroring_witnessContext extends ParserRuleContext {
    WITNESS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Witness_partner_equalContext extends ParserRuleContext {
    EQUAL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Partner_optionContext extends ParserRuleContext {
    witness_partner_equal(): Witness_partner_equalContext | undefined;
    partner_server(): Partner_serverContext | undefined;
    FAILOVER(): TerminalNode | undefined;
    FORCE_SERVICE_ALLOW_DATA_LOSS(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    RESUME(): TerminalNode | undefined;
    SAFETY(): TerminalNode | undefined;
    FULL(): TerminalNode | undefined;
    SUSPEND(): TerminalNode | undefined;
    TIMEOUT(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Witness_optionContext extends ParserRuleContext {
    witness_partner_equal(): Witness_partner_equalContext | undefined;
    witness_server(): Witness_serverContext | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Witness_serverContext extends ParserRuleContext {
    partner_server(): Partner_serverContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Partner_serverContext extends ParserRuleContext {
    partner_server_tcp_prefix(): Partner_server_tcp_prefixContext;
    host(): HostContext;
    mirroring_host_port_seperator(): Mirroring_host_port_seperatorContext;
    port_number(): Port_numberContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Mirroring_host_port_seperatorContext extends ParserRuleContext {
    COLON(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Partner_server_tcp_prefixContext extends ParserRuleContext {
    TCP(): TerminalNode;
    COLON(): TerminalNode;
    DOUBLE_FORWARD_SLASH(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Port_numberContext extends ParserRuleContext {
    _port: Token;
    DECIMAL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class HostContext extends ParserRuleContext {
    id(): IdContext | undefined;
    DOT(): TerminalNode | undefined;
    host(): HostContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Date_correlation_optimization_optionContext extends ParserRuleContext {
    DATE_CORRELATION_OPTIMIZATION(): TerminalNode;
    on_off(): On_offContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Db_encryption_optionContext extends ParserRuleContext {
    ENCRYPTION(): TerminalNode;
    on_off(): On_offContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Db_state_optionContext extends ParserRuleContext {
    ONLINE(): TerminalNode | undefined;
    OFFLINE(): TerminalNode | undefined;
    EMERGENCY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Db_update_optionContext extends ParserRuleContext {
    READ_ONLY(): TerminalNode | undefined;
    READ_WRITE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Db_user_access_optionContext extends ParserRuleContext {
    SINGLE_USER(): TerminalNode | undefined;
    RESTRICTED_USER(): TerminalNode | undefined;
    MULTI_USER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Delayed_durability_optionContext extends ParserRuleContext {
    DELAYED_DURABILITY(): TerminalNode;
    EQUAL(): TerminalNode;
    DISABLED(): TerminalNode | undefined;
    ALLOWED(): TerminalNode | undefined;
    FORCED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class External_access_optionContext extends ParserRuleContext {
    DB_CHAINING(): TerminalNode | undefined;
    on_off(): On_offContext | undefined;
    TRUSTWORTHY(): TerminalNode | undefined;
    DEFAULT_LANGUAGE(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    id(): IdContext | undefined;
    STRING(): TerminalNode | undefined;
    DEFAULT_FULLTEXT_LANGUAGE(): TerminalNode | undefined;
    NESTED_TRIGGERS(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    TRANSFORM_NOISE_WORDS(): TerminalNode | undefined;
    TWO_DIGIT_YEAR_CUTOFF(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Hadr_optionsContext extends ParserRuleContext {
    _availability_group_name: IdContext;
    HADR(): TerminalNode;
    SUSPEND(): TerminalNode | undefined;
    RESUME(): TerminalNode | undefined;
    AVAILABILITY(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    id(): IdContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Mixed_page_allocation_optionContext extends ParserRuleContext {
    MIXED_PAGE_ALLOCATION(): TerminalNode;
    OFF(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Parameterization_optionContext extends ParserRuleContext {
    PARAMETERIZATION(): TerminalNode;
    SIMPLE(): TerminalNode | undefined;
    FORCED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Recovery_optionContext extends ParserRuleContext {
    RECOVERY(): TerminalNode | undefined;
    FULL(): TerminalNode | undefined;
    BULK_LOGGED(): TerminalNode | undefined;
    SIMPLE(): TerminalNode | undefined;
    TORN_PAGE_DETECTION(): TerminalNode | undefined;
    on_off(): On_offContext | undefined;
    PAGE_VERIFY(): TerminalNode | undefined;
    CHECKSUM(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Service_broker_optionContext extends ParserRuleContext {
    ENABLE_BROKER(): TerminalNode | undefined;
    DISABLE_BROKER(): TerminalNode | undefined;
    NEW_BROKER(): TerminalNode | undefined;
    ERROR_BROKER_CONVERSATIONS(): TerminalNode | undefined;
    HONOR_BROKER_PRIORITY(): TerminalNode | undefined;
    on_off(): On_offContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Snapshot_optionContext extends ParserRuleContext {
    _MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT: Token;
    ALLOW_SNAPSHOT_ISOLATION(): TerminalNode | undefined;
    on_off(): On_offContext | undefined;
    READ_COMMITTED_SNAPSHOT(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Sql_optionContext extends ParserRuleContext {
    ANSI_NULL_DEFAULT(): TerminalNode | undefined;
    on_off(): On_offContext | undefined;
    ANSI_NULLS(): TerminalNode | undefined;
    ANSI_PADDING(): TerminalNode | undefined;
    ANSI_WARNINGS(): TerminalNode | undefined;
    ARITHABORT(): TerminalNode | undefined;
    COMPATIBILITY_LEVEL(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    CONCAT_NULL_YIELDS_NULL(): TerminalNode | undefined;
    NUMERIC_ROUNDABORT(): TerminalNode | undefined;
    QUOTED_IDENTIFIER(): TerminalNode | undefined;
    RECURSIVE_TRIGGERS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Target_recovery_time_optionContext extends ParserRuleContext {
    TARGET_RECOVERY_TIME(): TerminalNode;
    EQUAL(): TerminalNode;
    DECIMAL(): TerminalNode;
    SECONDS(): TerminalNode | undefined;
    MINUTES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class TerminationContext extends ParserRuleContext {
    _seconds: Token;
    ROLLBACK(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    NO_WAIT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_indexContext extends ParserRuleContext {
    DROP(): TerminalNode;
    INDEX(): TerminalNode;
    drop_relational_or_xml_or_spatial_index(): Drop_relational_or_xml_or_spatial_indexContext[];
    drop_relational_or_xml_or_spatial_index(i: number): Drop_relational_or_xml_or_spatial_indexContext;
    drop_backward_compatible_index(): Drop_backward_compatible_indexContext[];
    drop_backward_compatible_index(i: number): Drop_backward_compatible_indexContext;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_relational_or_xml_or_spatial_indexContext extends ParserRuleContext {
    _index_name: IdContext;
    ON(): TerminalNode;
    full_table_name(): Full_table_nameContext;
    id(): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_backward_compatible_indexContext extends ParserRuleContext {
    _owner_name: IdContext;
    _table_or_view_name: IdContext;
    _index_name: IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_procedureContext extends ParserRuleContext {
    _proc: Token;
    DROP(): TerminalNode;
    func_proc_name_schema(): Func_proc_name_schemaContext[];
    func_proc_name_schema(i: number): Func_proc_name_schemaContext;
    PROC(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_triggerContext extends ParserRuleContext {
    drop_dml_trigger(): Drop_dml_triggerContext | undefined;
    drop_ddl_trigger(): Drop_ddl_triggerContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_dml_triggerContext extends ParserRuleContext {
    DROP(): TerminalNode;
    TRIGGER(): TerminalNode;
    simple_name(): Simple_nameContext[];
    simple_name(i: number): Simple_nameContext;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_ddl_triggerContext extends ParserRuleContext {
    DROP(): TerminalNode;
    TRIGGER(): TerminalNode;
    simple_name(): Simple_nameContext[];
    simple_name(i: number): Simple_nameContext;
    ON(): TerminalNode;
    DATABASE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_functionContext extends ParserRuleContext {
    DROP(): TerminalNode;
    FUNCTION(): TerminalNode;
    func_proc_name_schema(): Func_proc_name_schemaContext[];
    func_proc_name_schema(i: number): Func_proc_name_schemaContext;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_statisticsContext extends ParserRuleContext {
    _name: IdContext;
    DROP(): TerminalNode;
    STATISTICS(): TerminalNode;
    SEMI(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    table_name(): Table_nameContext[];
    table_name(i: number): Table_nameContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_tableContext extends ParserRuleContext {
    DROP(): TerminalNode;
    TABLE(): TerminalNode;
    table_name(): Table_nameContext;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_viewContext extends ParserRuleContext {
    DROP(): TerminalNode;
    VIEW(): TerminalNode;
    simple_name(): Simple_nameContext[];
    simple_name(i: number): Simple_nameContext;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_typeContext extends ParserRuleContext {
    _name: Simple_nameContext;
    CREATE(): TerminalNode;
    TYPE(): TerminalNode;
    simple_name(): Simple_nameContext;
    FROM(): TerminalNode | undefined;
    data_type(): Data_typeContext | undefined;
    default_value(): Default_valueContext | undefined;
    AS(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    column_def_table_constraints(): Column_def_table_constraintsContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Drop_typeContext extends ParserRuleContext {
    _name: Simple_nameContext;
    DROP(): TerminalNode;
    TYPE(): TerminalNode;
    simple_name(): Simple_nameContext;
    IF(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Rowset_function_limitedContext extends ParserRuleContext {
    openquery(): OpenqueryContext | undefined;
    opendatasource(): OpendatasourceContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class OpenqueryContext extends ParserRuleContext {
    _linked_server: IdContext;
    _query: Token;
    OPENQUERY(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    id(): IdContext;
    STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class OpendatasourceContext extends ParserRuleContext {
    _provider: Token;
    _init: Token;
    _database: IdContext;
    _scheme: IdContext;
    _table: IdContext;
    OPENDATASOURCE(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Declare_statementContext extends ParserRuleContext {
    _declare_local: Declare_localContext;
    _loc: Declare_localContext[];
    _xml_declaration: Xml_declarationContext;
    _xml_dec: Xml_declarationContext[];
    DECLARE(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    table_type_definition(): Table_type_definitionContext | undefined;
    AS(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    declare_local(): Declare_localContext[];
    declare_local(i: number): Declare_localContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    xml_type_definition(): Xml_type_definitionContext | undefined;
    WITH(): TerminalNode | undefined;
    XMLNAMESPACES(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    xml_declaration(): Xml_declarationContext[];
    xml_declaration(i: number): Xml_declarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Xml_declarationContext extends ParserRuleContext {
    _xml_namespace_uri: Token;
    AS(): TerminalNode | undefined;
    id(): IdContext | undefined;
    STRING(): TerminalNode;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Cursor_statementContext extends ParserRuleContext {
    CLOSE(): TerminalNode | undefined;
    cursor_name(): Cursor_nameContext | undefined;
    GLOBAL(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    DEALLOCATE(): TerminalNode | undefined;
    CURSOR(): TerminalNode | undefined;
    declare_cursor(): Declare_cursorContext | undefined;
    fetch_cursor(): Fetch_cursorContext | undefined;
    OPEN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Backup_databaseContext extends ParserRuleContext {
    _database_name: IdContext;
    _file_or_filegroup: Token;
    _logical_device_name: IdContext;
    _backup_set_name: IdContext;
    _medianame: Token;
    _stats_percent: Token;
    _encryptor_name: IdContext;
    BACKUP(): TerminalNode;
    DATABASE(): TerminalNode;
    TO(): TerminalNode[];
    TO(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    READ_WRITE_FILEGROUPS(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    WITH(): TerminalNode | undefined;
    FILE(): TerminalNode[];
    FILE(i: number): TerminalNode;
    FILEGROUP(): TerminalNode[];
    FILEGROUP(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    DISK(): TerminalNode[];
    DISK(i: number): TerminalNode;
    TAPE(): TerminalNode[];
    TAPE(i: number): TerminalNode;
    URL(): TerminalNode[];
    URL(i: number): TerminalNode;
    MIRROR(): TerminalNode[];
    MIRROR(i: number): TerminalNode;
    DIFFERENTIAL(): TerminalNode[];
    DIFFERENTIAL(i: number): TerminalNode;
    COPY_ONLY(): TerminalNode[];
    COPY_ONLY(i: number): TerminalNode;
    DESCRIPTION(): TerminalNode[];
    DESCRIPTION(i: number): TerminalNode;
    NAME(): TerminalNode[];
    NAME(i: number): TerminalNode;
    CREDENTIAL(): TerminalNode[];
    CREDENTIAL(i: number): TerminalNode;
    FILE_SNAPSHOT(): TerminalNode[];
    FILE_SNAPSHOT(i: number): TerminalNode;
    MEDIADESCRIPTION(): TerminalNode[];
    MEDIADESCRIPTION(i: number): TerminalNode;
    MEDIANAME(): TerminalNode[];
    MEDIANAME(i: number): TerminalNode;
    BLOCKSIZE(): TerminalNode[];
    BLOCKSIZE(i: number): TerminalNode;
    BUFFERCOUNT(): TerminalNode[];
    BUFFERCOUNT(i: number): TerminalNode;
    MAXTRANSFER(): TerminalNode[];
    MAXTRANSFER(i: number): TerminalNode;
    RESTART(): TerminalNode[];
    RESTART(i: number): TerminalNode;
    STATS(): TerminalNode[];
    STATS(i: number): TerminalNode;
    ENCRYPTION(): TerminalNode[];
    ENCRYPTION(i: number): TerminalNode;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    ALGORITHM(): TerminalNode[];
    ALGORITHM(i: number): TerminalNode;
    SERVER(): TerminalNode[];
    SERVER(i: number): TerminalNode;
    CERTIFICATE(): TerminalNode[];
    CERTIFICATE(i: number): TerminalNode;
    COMPRESSION(): TerminalNode[];
    COMPRESSION(i: number): TerminalNode;
    NO_COMPRESSION(): TerminalNode[];
    NO_COMPRESSION(i: number): TerminalNode;
    NOINIT(): TerminalNode[];
    NOINIT(i: number): TerminalNode;
    INIT(): TerminalNode[];
    INIT(i: number): TerminalNode;
    NOSKIP(): TerminalNode[];
    NOSKIP(i: number): TerminalNode;
    SKIP_KEYWORD(): TerminalNode[];
    SKIP_KEYWORD(i: number): TerminalNode;
    NOFORMAT(): TerminalNode[];
    NOFORMAT(i: number): TerminalNode;
    FORMAT(): TerminalNode[];
    FORMAT(i: number): TerminalNode;
    NO_CHECKSUM(): TerminalNode[];
    NO_CHECKSUM(i: number): TerminalNode;
    CHECKSUM(): TerminalNode[];
    CHECKSUM(i: number): TerminalNode;
    STOP_ON_ERROR(): TerminalNode[];
    STOP_ON_ERROR(i: number): TerminalNode;
    CONTINUE_AFTER_ERROR(): TerminalNode[];
    CONTINUE_AFTER_ERROR(i: number): TerminalNode;
    REWIND(): TerminalNode[];
    REWIND(i: number): TerminalNode;
    NOREWIND(): TerminalNode[];
    NOREWIND(i: number): TerminalNode;
    LOAD(): TerminalNode[];
    LOAD(i: number): TerminalNode;
    NOUNLOAD(): TerminalNode[];
    NOUNLOAD(i: number): TerminalNode;
    AES_128(): TerminalNode[];
    AES_128(i: number): TerminalNode;
    AES_192(): TerminalNode[];
    AES_192(i: number): TerminalNode;
    AES_256(): TerminalNode[];
    AES_256(i: number): TerminalNode;
    TRIPLE_DES_3KEY(): TerminalNode[];
    TRIPLE_DES_3KEY(i: number): TerminalNode;
    EXPIREDATE(): TerminalNode[];
    EXPIREDATE(i: number): TerminalNode;
    RETAINDAYS(): TerminalNode[];
    RETAINDAYS(i: number): TerminalNode;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    ASYMMETRIC(): TerminalNode[];
    ASYMMETRIC(i: number): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Backup_logContext extends ParserRuleContext {
    _database_name: IdContext;
    _logical_device_name: IdContext;
    _backup_set_name: IdContext;
    _medianame: Token;
    _stats_percent: Token;
    _undo_file_name: Token;
    _encryptor_name: IdContext;
    BACKUP(): TerminalNode;
    LOG(): TerminalNode;
    TO(): TerminalNode[];
    TO(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    WITH(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    DISK(): TerminalNode[];
    DISK(i: number): TerminalNode;
    TAPE(): TerminalNode[];
    TAPE(i: number): TerminalNode;
    URL(): TerminalNode[];
    URL(i: number): TerminalNode;
    MIRROR(): TerminalNode[];
    MIRROR(i: number): TerminalNode;
    DIFFERENTIAL(): TerminalNode[];
    DIFFERENTIAL(i: number): TerminalNode;
    COPY_ONLY(): TerminalNode[];
    COPY_ONLY(i: number): TerminalNode;
    DESCRIPTION(): TerminalNode[];
    DESCRIPTION(i: number): TerminalNode;
    NAME(): TerminalNode[];
    NAME(i: number): TerminalNode;
    CREDENTIAL(): TerminalNode[];
    CREDENTIAL(i: number): TerminalNode;
    FILE_SNAPSHOT(): TerminalNode[];
    FILE_SNAPSHOT(i: number): TerminalNode;
    MEDIADESCRIPTION(): TerminalNode[];
    MEDIADESCRIPTION(i: number): TerminalNode;
    MEDIANAME(): TerminalNode[];
    MEDIANAME(i: number): TerminalNode;
    BLOCKSIZE(): TerminalNode[];
    BLOCKSIZE(i: number): TerminalNode;
    BUFFERCOUNT(): TerminalNode[];
    BUFFERCOUNT(i: number): TerminalNode;
    MAXTRANSFER(): TerminalNode[];
    MAXTRANSFER(i: number): TerminalNode;
    RESTART(): TerminalNode[];
    RESTART(i: number): TerminalNode;
    STATS(): TerminalNode[];
    STATS(i: number): TerminalNode;
    NO_TRUNCATE(): TerminalNode[];
    NO_TRUNCATE(i: number): TerminalNode;
    ENCRYPTION(): TerminalNode[];
    ENCRYPTION(i: number): TerminalNode;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    ALGORITHM(): TerminalNode[];
    ALGORITHM(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SERVER(): TerminalNode[];
    SERVER(i: number): TerminalNode;
    CERTIFICATE(): TerminalNode[];
    CERTIFICATE(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    COMPRESSION(): TerminalNode[];
    COMPRESSION(i: number): TerminalNode;
    NO_COMPRESSION(): TerminalNode[];
    NO_COMPRESSION(i: number): TerminalNode;
    NOINIT(): TerminalNode[];
    NOINIT(i: number): TerminalNode;
    INIT(): TerminalNode[];
    INIT(i: number): TerminalNode;
    NOSKIP(): TerminalNode[];
    NOSKIP(i: number): TerminalNode;
    SKIP_KEYWORD(): TerminalNode[];
    SKIP_KEYWORD(i: number): TerminalNode;
    NOFORMAT(): TerminalNode[];
    NOFORMAT(i: number): TerminalNode;
    FORMAT(): TerminalNode[];
    FORMAT(i: number): TerminalNode;
    NO_CHECKSUM(): TerminalNode[];
    NO_CHECKSUM(i: number): TerminalNode;
    CHECKSUM(): TerminalNode[];
    CHECKSUM(i: number): TerminalNode;
    STOP_ON_ERROR(): TerminalNode[];
    STOP_ON_ERROR(i: number): TerminalNode;
    CONTINUE_AFTER_ERROR(): TerminalNode[];
    CONTINUE_AFTER_ERROR(i: number): TerminalNode;
    REWIND(): TerminalNode[];
    REWIND(i: number): TerminalNode;
    NOREWIND(): TerminalNode[];
    NOREWIND(i: number): TerminalNode;
    LOAD(): TerminalNode[];
    LOAD(i: number): TerminalNode;
    NOUNLOAD(): TerminalNode[];
    NOUNLOAD(i: number): TerminalNode;
    AES_128(): TerminalNode[];
    AES_128(i: number): TerminalNode;
    AES_192(): TerminalNode[];
    AES_192(i: number): TerminalNode;
    AES_256(): TerminalNode[];
    AES_256(i: number): TerminalNode;
    TRIPLE_DES_3KEY(): TerminalNode[];
    TRIPLE_DES_3KEY(i: number): TerminalNode;
    EXPIREDATE(): TerminalNode[];
    EXPIREDATE(i: number): TerminalNode;
    RETAINDAYS(): TerminalNode[];
    RETAINDAYS(i: number): TerminalNode;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    NORECOVERY(): TerminalNode[];
    NORECOVERY(i: number): TerminalNode;
    STANDBY(): TerminalNode[];
    STANDBY(i: number): TerminalNode;
    ASYMMETRIC(): TerminalNode[];
    ASYMMETRIC(i: number): TerminalNode;
    KEY(): TerminalNode[];
    KEY(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Backup_certificateContext extends ParserRuleContext {
    _certname: IdContext;
    _cert_file: Token;
    _private_key_file: Token;
    _encryption_password: Token;
    _decryption_pasword: Token;
    BACKUP(): TerminalNode;
    CERTIFICATE(): TerminalNode;
    TO(): TerminalNode;
    FILE(): TerminalNode[];
    FILE(i: number): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    id(): IdContext;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    WITH(): TerminalNode | undefined;
    PRIVATE(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    ENCRYPTION(): TerminalNode[];
    ENCRYPTION(i: number): TerminalNode;
    BY(): TerminalNode[];
    BY(i: number): TerminalNode;
    PASSWORD(): TerminalNode[];
    PASSWORD(i: number): TerminalNode;
    DECRYPTION(): TerminalNode[];
    DECRYPTION(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Backup_master_keyContext extends ParserRuleContext {
    _master_key_backup_file: Token;
    _encryption_password: Token;
    BACKUP(): TerminalNode;
    MASTER(): TerminalNode;
    KEY(): TerminalNode;
    TO(): TerminalNode;
    FILE(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    ENCRYPTION(): TerminalNode;
    BY(): TerminalNode;
    PASSWORD(): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Backup_service_master_keyContext extends ParserRuleContext {
    _service_master_key_backup_file: Token;
    _encryption_password: Token;
    BACKUP(): TerminalNode;
    SERVICE(): TerminalNode;
    MASTER(): TerminalNode;
    KEY(): TerminalNode;
    TO(): TerminalNode;
    FILE(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    ENCRYPTION(): TerminalNode;
    BY(): TerminalNode;
    PASSWORD(): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Kill_statementContext extends ParserRuleContext {
    KILL(): TerminalNode;
    kill_process(): Kill_processContext | undefined;
    kill_query_notification(): Kill_query_notificationContext | undefined;
    kill_stats_job(): Kill_stats_jobContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Kill_processContext extends ParserRuleContext {
    _session_id: Token;
    UOW(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    STATUSONLY(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Kill_query_notificationContext extends ParserRuleContext {
    _subscription_id: Token;
    QUERY(): TerminalNode;
    NOTIFICATION(): TerminalNode;
    SUBSCRIPTION(): TerminalNode;
    ALL(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Kill_stats_jobContext extends ParserRuleContext {
    _job_id: Token;
    STATS(): TerminalNode;
    JOB(): TerminalNode;
    DECIMAL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Execute_statementContext extends ParserRuleContext {
    EXECUTE(): TerminalNode;
    execute_body(): Execute_bodyContext;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Execute_body_batchContext extends ParserRuleContext {
    func_proc_name_server_database_schema(): Func_proc_name_server_database_schemaContext;
    execute_statement_arg(): Execute_statement_argContext[];
    execute_statement_arg(i: number): Execute_statement_argContext;
    SEMI(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Execute_bodyContext extends ParserRuleContext {
    _return_status: Token;
    func_proc_name_server_database_schema(): Func_proc_name_server_database_schemaContext | undefined;
    execute_var_string(): Execute_var_stringContext[];
    execute_var_string(i: number): Execute_var_stringContext;
    EQUAL(): TerminalNode | undefined;
    execute_statement_arg(): Execute_statement_argContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    PLUS(): TerminalNode[];
    PLUS(i: number): TerminalNode;
    STRING(): TerminalNode | undefined;
    LOGIN(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Execute_statement_argContext extends ParserRuleContext {
    execute_statement_arg_unnamed(): Execute_statement_arg_unnamedContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    execute_statement_arg(): Execute_statement_argContext[];
    execute_statement_arg(i: number): Execute_statement_argContext;
    execute_statement_arg_named(): Execute_statement_arg_namedContext[];
    execute_statement_arg_named(i: number): Execute_statement_arg_namedContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Execute_statement_arg_namedContext extends ParserRuleContext {
    _name: Token;
    _value: Execute_parameterContext;
    EQUAL(): TerminalNode;
    LOCAL_ID(): TerminalNode;
    execute_parameter(): Execute_parameterContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Execute_statement_arg_unnamedContext extends ParserRuleContext {
    _value: Execute_parameterContext;
    execute_parameter(): Execute_parameterContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Execute_parameterContext extends ParserRuleContext {
    constant(): ConstantContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    id(): IdContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    OUTPUT(): TerminalNode | undefined;
    OUT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Execute_var_stringContext extends ParserRuleContext {
    LOCAL_ID(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Security_statementContext extends ParserRuleContext {
    _on_id: Table_nameContext;
    _principal_id: Principal_idContext;
    _to_principal: Principal_idContext[];
    _as_principal: Principal_idContext;
    execute_clause(): Execute_clauseContext | undefined;
    SEMI(): TerminalNode | undefined;
    GRANT(): TerminalNode[];
    GRANT(i: number): TerminalNode;
    TO(): TerminalNode | undefined;
    principal_id(): Principal_idContext[];
    principal_id(i: number): Principal_idContext;
    ALL(): TerminalNode | undefined;
    grant_permission(): Grant_permissionContext | undefined;
    ON(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    WITH(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    table_name(): Table_nameContext | undefined;
    PRIVILEGES(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    column_name_list(): Column_name_listContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    REVERT(): TerminalNode | undefined;
    COOKIE(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    open_key(): Open_keyContext | undefined;
    close_key(): Close_keyContext | undefined;
    create_key(): Create_keyContext | undefined;
    create_certificate(): Create_certificateContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Principal_idContext extends ParserRuleContext {
    id(): IdContext | undefined;
    PUBLIC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_certificateContext extends ParserRuleContext {
    _certificate_name: IdContext;
    _user_name: IdContext;
    CREATE(): TerminalNode;
    CERTIFICATE(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    FROM(): TerminalNode | undefined;
    existing_keys(): Existing_keysContext | undefined;
    generate_new_keys(): Generate_new_keysContext | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    ACTIVE(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    BEGIN(): TerminalNode | undefined;
    DIALOG(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Existing_keysContext extends ParserRuleContext {
    _assembly_name: IdContext;
    _path_to_file: Token;
    ASSEMBLY(): TerminalNode | undefined;
    id(): IdContext | undefined;
    FILE(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    EXECUTABLE(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    PRIVATE(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    private_key_options(): Private_key_optionsContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Private_key_optionsContext extends ParserRuleContext {
    _path: Token;
    _password: Token;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    FILE(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    COMMA(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    DECRYPTION(): TerminalNode | undefined;
    ENCRYPTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Generate_new_keysContext extends ParserRuleContext {
    _password: Token;
    _certificate_subject_name: Token;
    WITH(): TerminalNode;
    SUBJECT(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    ENCRYPTION(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    date_options(): Date_optionsContext[];
    date_options(i: number): Date_optionsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Date_optionsContext extends ParserRuleContext {
    EQUAL(): TerminalNode;
    STRING(): TerminalNode;
    START_DATE(): TerminalNode | undefined;
    EXPIRY_DATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Open_keyContext extends ParserRuleContext {
    _key_name: IdContext;
    _password: Token;
    OPEN(): TerminalNode;
    SYMMETRIC(): TerminalNode | undefined;
    KEY(): TerminalNode;
    DECRYPTION(): TerminalNode;
    BY(): TerminalNode;
    decryption_mechanism(): Decryption_mechanismContext | undefined;
    id(): IdContext | undefined;
    MASTER(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Close_keyContext extends ParserRuleContext {
    _key_name: IdContext;
    CLOSE(): TerminalNode;
    SYMMETRIC(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    id(): IdContext | undefined;
    ALL(): TerminalNode | undefined;
    KEYS(): TerminalNode | undefined;
    MASTER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_keyContext extends ParserRuleContext {
    _password: Token;
    _key_name: IdContext;
    _user_name: IdContext;
    _provider_name: IdContext;
    CREATE(): TerminalNode;
    MASTER(): TerminalNode | undefined;
    KEY(): TerminalNode;
    ENCRYPTION(): TerminalNode[];
    ENCRYPTION(i: number): TerminalNode;
    BY(): TerminalNode[];
    BY(i: number): TerminalNode;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    SYMMETRIC(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    AUTHORIZATION(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    PROVIDER(): TerminalNode | undefined;
    key_options(): Key_optionsContext[];
    key_options(i: number): Key_optionsContext;
    encryption_mechanism(): Encryption_mechanismContext[];
    encryption_mechanism(i: number): Encryption_mechanismContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Key_optionsContext extends ParserRuleContext {
    _pass_phrase: Token;
    _identity_phrase: Token;
    _key_name_in_provider: Token;
    KEY_SOURCE(): TerminalNode | undefined;
    EQUAL(): TerminalNode;
    STRING(): TerminalNode | undefined;
    ALGORITHM(): TerminalNode | undefined;
    algorithm(): AlgorithmContext | undefined;
    IDENTITY_VALUE(): TerminalNode | undefined;
    PROVIDER_KEY_NAME(): TerminalNode | undefined;
    CREATION_DISPOSITION(): TerminalNode | undefined;
    CREATE_NEW(): TerminalNode | undefined;
    OPEN_EXISTING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class AlgorithmContext extends ParserRuleContext {
    DES(): TerminalNode | undefined;
    TRIPLE_DES(): TerminalNode | undefined;
    TRIPLE_DES_3KEY(): TerminalNode | undefined;
    RC2(): TerminalNode | undefined;
    RC4(): TerminalNode | undefined;
    RC4_128(): TerminalNode | undefined;
    DESX(): TerminalNode | undefined;
    AES_128(): TerminalNode | undefined;
    AES_192(): TerminalNode | undefined;
    AES_256(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Encryption_mechanismContext extends ParserRuleContext {
    _certificate_name: IdContext;
    _asym_key_name: IdContext;
    _decrypting_Key_name: IdContext;
    CERTIFICATE(): TerminalNode | undefined;
    id(): IdContext | undefined;
    ASYMMETRIC(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    SYMMETRIC(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Decryption_mechanismContext extends ParserRuleContext {
    _certificate_name: IdContext;
    _asym_key_name: IdContext;
    _decrypting_Key_name: IdContext;
    CERTIFICATE(): TerminalNode | undefined;
    id(): IdContext | undefined;
    WITH(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    ASYMMETRIC(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    SYMMETRIC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Grant_permissionContext extends ParserRuleContext {
    EXECUTE(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    id(): IdContext | undefined;
    TAKE(): TerminalNode | undefined;
    CONTROL(): TerminalNode | undefined;
    CREATE(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    SHOWPLAN(): TerminalNode | undefined;
    IMPERSONATE(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    ALTER(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    ANY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Set_statementContext extends ParserRuleContext {
    _member_name: IdContext;
    SET(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    DOT(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    id(): IdContext | undefined;
    assignment_operator(): Assignment_operatorContext | undefined;
    CURSOR(): TerminalNode | undefined;
    declare_set_cursor_common(): Declare_set_cursor_commonContext | undefined;
    FOR(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    column_name_list(): Column_name_listContext | undefined;
    set_special(): Set_specialContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Transaction_statementContext extends ParserRuleContext {
    BEGIN(): TerminalNode | undefined;
    DISTRIBUTED(): TerminalNode | undefined;
    TRAN(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    id(): IdContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    MARK(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    DELAYED_DURABILITY(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    WORK(): TerminalNode | undefined;
    ROLLBACK(): TerminalNode | undefined;
    SAVE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Go_batch_statementContext extends ParserRuleContext {
    _count: Token;
    GO_BATCH(): TerminalNode;
    DECIMAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Go_statementContext extends ParserRuleContext {
    _count: Token;
    GO(): TerminalNode;
    DECIMAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Use_statementContext extends ParserRuleContext {
    _database: IdContext;
    USE(): TerminalNode;
    id(): IdContext;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Setuser_statementContext extends ParserRuleContext {
    _user: Token;
    SETUSER(): TerminalNode;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Reconfigure_statementContext extends ParserRuleContext {
    RECONFIGURE(): TerminalNode;
    WITH(): TerminalNode | undefined;
    OVERRIDE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Shutdown_statementContext extends ParserRuleContext {
    SHUTDOWN(): TerminalNode;
    WITH(): TerminalNode | undefined;
    NOWAIT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Dbcc_specialContext extends ParserRuleContext {
    DBCC(): TerminalNode;
    SHRINKLOG(): TerminalNode;
    LR_BRACKET(): TerminalNode | undefined;
    SIZE(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    constant_expression(): Constant_expressionContext | undefined;
    id(): IdContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Dbcc_clauseContext extends ParserRuleContext {
    _name: Dbcc_commandContext;
    DBCC(): TerminalNode;
    dbcc_command(): Dbcc_commandContext;
    LR_BRACKET(): TerminalNode | undefined;
    expression_list(): Expression_listContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    dbcc_options(): Dbcc_optionsContext | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Dbcc_commandContext extends ParserRuleContext {
    simple_id(): Simple_idContext | undefined;
    keyword(): KeywordContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Dbcc_optionsContext extends ParserRuleContext {
    simple_id(): Simple_idContext[];
    simple_id(i: number): Simple_idContext;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Execute_clauseContext extends ParserRuleContext {
    _clause: Token;
    EXECUTE(): TerminalNode;
    AS(): TerminalNode;
    CALLER(): TerminalNode | undefined;
    SELF(): TerminalNode | undefined;
    OWNER(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Declare_localContext extends ParserRuleContext {
    LOCAL_ID(): TerminalNode;
    data_type(): Data_typeContext;
    AS(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_type_definitionContext extends ParserRuleContext {
    TABLE(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    column_def_table_constraints(): Column_def_table_constraintsContext;
    RR_BRACKET(): TerminalNode;
    table_type_indices(): Table_type_indicesContext[];
    table_type_indices(i: number): Table_type_indicesContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_type_indicesContext extends ParserRuleContext {
    LR_BRACKET(): TerminalNode;
    column_name_list_with_order(): Column_name_list_with_orderContext | undefined;
    RR_BRACKET(): TerminalNode;
    UNIQUE(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    id(): IdContext | undefined;
    CLUSTERED(): TerminalNode | undefined;
    NONCLUSTERED(): TerminalNode | undefined;
    CHECK(): TerminalNode | undefined;
    search_condition(): Search_conditionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Xml_type_definitionContext extends ParserRuleContext {
    XML(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    xml_schema_collection(): Xml_schema_collectionContext;
    RR_BRACKET(): TerminalNode;
    CONTENT(): TerminalNode | undefined;
    DOCUMENT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Xml_schema_collectionContext extends ParserRuleContext {
    ID(): TerminalNode[];
    ID(i: number): TerminalNode;
    DOT(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Column_def_table_constraintsContext extends ParserRuleContext {
    column_def_table_constraint(): Column_def_table_constraintContext[];
    column_def_table_constraint(i: number): Column_def_table_constraintContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Column_def_table_constraintContext extends ParserRuleContext {
    column_definition(): Column_definitionContext | undefined;
    materialized_column_definition(): Materialized_column_definitionContext | undefined;
    table_constraint(): Table_constraintContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Column_definitionContext extends ParserRuleContext {
    _constraint: IdContext;
    _seed: Token;
    _increment: Token;
    id(): IdContext[];
    id(i: number): IdContext;
    data_type(): Data_typeContext | undefined;
    AS(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    COLLATE(): TerminalNode | undefined;
    null_notnull(): Null_notnullContext | undefined;
    null_or_default(): Null_or_defaultContext[];
    null_or_default(i: number): Null_or_defaultContext;
    IDENTITY(): TerminalNode | undefined;
    ROWGUIDCOL(): TerminalNode | undefined;
    column_constraint(): Column_constraintContext[];
    column_constraint(i: number): Column_constraintContext;
    PERSISTED(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    COMMA(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    REPLICATION(): TerminalNode | undefined;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Materialized_column_definitionContext extends ParserRuleContext {
    id(): IdContext;
    expression(): ExpressionContext;
    COMPUTE(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Column_constraintContext extends ParserRuleContext {
    _constraint: IdContext;
    _pk: Column_name_listContext;
    CHECK(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    search_condition(): Search_conditionContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    table_name(): Table_nameContext | undefined;
    null_notnull(): Null_notnullContext | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    column_name_list(): Column_name_listContext | undefined;
    id(): IdContext | undefined;
    PRIMARY(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    clustered(): ClusteredContext | undefined;
    index_options(): Index_optionsContext | undefined;
    NOT(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    REPLICATION(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    on_delete(): On_deleteContext | undefined;
    on_update(): On_updateContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_constraintContext extends ParserRuleContext {
    _constraint: IdContext;
    _fk: Column_name_listContext;
    _pk: Column_name_listContext;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    column_name_list_with_order(): Column_name_list_with_orderContext | undefined;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    CHECK(): TerminalNode | undefined;
    search_condition(): Search_conditionContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    FOREIGN(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    table_name(): Table_nameContext | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    column_name_list(): Column_name_listContext[];
    column_name_list(i: number): Column_name_listContext;
    PRIMARY(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    clustered(): ClusteredContext | undefined;
    index_options(): Index_optionsContext | undefined;
    ON(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    REPLICATION(): TerminalNode | undefined;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    PLUS(): TerminalNode[];
    PLUS(i: number): TerminalNode;
    function_call(): Function_callContext[];
    function_call(i: number): Function_callContext;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    on_delete(): On_deleteContext | undefined;
    on_update(): On_updateContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class On_deleteContext extends ParserRuleContext {
    ON(): TerminalNode;
    DELETE(): TerminalNode;
    NO(): TerminalNode | undefined;
    ACTION(): TerminalNode | undefined;
    CASCADE(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class On_updateContext extends ParserRuleContext {
    ON(): TerminalNode;
    UPDATE(): TerminalNode;
    NO(): TerminalNode | undefined;
    ACTION(): TerminalNode | undefined;
    CASCADE(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Index_optionsContext extends ParserRuleContext {
    WITH(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    index_option(): Index_optionContext[];
    index_option(i: number): Index_optionContext;
    RR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Index_optionContext extends ParserRuleContext {
    EQUAL(): TerminalNode;
    simple_id(): Simple_idContext[];
    simple_id(i: number): Simple_idContext;
    keyword(): KeywordContext[];
    keyword(i: number): KeywordContext;
    on_off(): On_offContext | undefined;
    DECIMAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Declare_cursorContext extends ParserRuleContext {
    DECLARE(): TerminalNode;
    cursor_name(): Cursor_nameContext;
    CURSOR(): TerminalNode | undefined;
    FOR(): TerminalNode[];
    FOR(i: number): TerminalNode;
    select_statement_standalone(): Select_statement_standaloneContext | undefined;
    SEMI(): TerminalNode | undefined;
    declare_set_cursor_common(): Declare_set_cursor_commonContext | undefined;
    SCROLL(): TerminalNode | undefined;
    SEMI_SENSITIVE(): TerminalNode | undefined;
    INSENSITIVE(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    column_name_list(): Column_name_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Declare_set_cursor_commonContext extends ParserRuleContext {
    FOR(): TerminalNode;
    select_statement_standalone(): Select_statement_standaloneContext;
    declare_set_cursor_common_partial(): Declare_set_cursor_common_partialContext[];
    declare_set_cursor_common_partial(i: number): Declare_set_cursor_common_partialContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Declare_set_cursor_common_partialContext extends ParserRuleContext {
    LOCAL(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    FORWARD_ONLY(): TerminalNode | undefined;
    SCROLL(): TerminalNode | undefined;
    STATIC(): TerminalNode | undefined;
    KEYSET(): TerminalNode | undefined;
    DYNAMIC(): TerminalNode | undefined;
    FAST_FORWARD(): TerminalNode | undefined;
    READ_ONLY(): TerminalNode | undefined;
    SCROLL_LOCKS(): TerminalNode | undefined;
    OPTIMISTIC(): TerminalNode | undefined;
    TYPE_WARNING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Fetch_cursorContext extends ParserRuleContext {
    FETCH(): TerminalNode;
    cursor_name(): Cursor_nameContext;
    FROM(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    INTO(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode[];
    LOCAL_ID(i: number): TerminalNode;
    SEMI(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    PRIOR(): TerminalNode | undefined;
    FIRST(): TerminalNode | undefined;
    LAST(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    ABSOLUTE(): TerminalNode | undefined;
    RELATIVE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Set_specialContext extends ParserRuleContext {
    SET(): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    constant_LOCAL_ID(): Constant_LOCAL_IDContext | undefined;
    on_off(): On_offContext | undefined;
    SEMI(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    IO(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    XML(): TerminalNode | undefined;
    PROFILE(): TerminalNode | undefined;
    ROWCOUNT(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    ISOLATION(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    UNCOMMITTED(): TerminalNode | undefined;
    COMMITTED(): TerminalNode | undefined;
    REPEATABLE(): TerminalNode | undefined;
    SNAPSHOT(): TerminalNode | undefined;
    SERIALIZABLE(): TerminalNode | undefined;
    IDENTITY_INSERT(): TerminalNode | undefined;
    table_name(): Table_nameContext | undefined;
    ANSI_NULLS(): TerminalNode | undefined;
    QUOTED_IDENTIFIER(): TerminalNode | undefined;
    ANSI_PADDING(): TerminalNode | undefined;
    ANSI_WARNINGS(): TerminalNode | undefined;
    ANSI_DEFAULTS(): TerminalNode | undefined;
    ANSI_NULL_DFLT_OFF(): TerminalNode | undefined;
    ANSI_NULL_DFLT_ON(): TerminalNode | undefined;
    ARITHABORT(): TerminalNode | undefined;
    ARITHIGNORE(): TerminalNode | undefined;
    CONCAT_NULL_YIELDS_NULL(): TerminalNode | undefined;
    CURSOR_CLOSE_ON_COMMIT(): TerminalNode | undefined;
    FMTONLY(): TerminalNode | undefined;
    FORCEPLAN(): TerminalNode | undefined;
    IMPLICIT_TRANSACTIONS(): TerminalNode | undefined;
    NOCOUNT(): TerminalNode | undefined;
    NOEXEC(): TerminalNode | undefined;
    NUMERIC_ROUNDABORT(): TerminalNode | undefined;
    PARSEONLY(): TerminalNode | undefined;
    REMOTE_PROC_TRANSACTIONS(): TerminalNode | undefined;
    SHOWPLAN_ALL(): TerminalNode | undefined;
    SHOWPLAN_TEXT(): TerminalNode | undefined;
    SHOWPLAN_XML(): TerminalNode | undefined;
    XACT_ABORT(): TerminalNode | undefined;
    modify_method(): Modify_methodContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Constant_LOCAL_IDContext extends ParserRuleContext {
    constant(): ConstantContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class ExpressionContext extends ParserRuleContext {
    _op: Token;
    primitive_expression(): Primitive_expressionContext | undefined;
    function_call(): Function_callContext | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    DOT(): TerminalNode | undefined;
    value_call(): Value_callContext | undefined;
    query_call(): Query_callContext | undefined;
    exist_call(): Exist_callContext | undefined;
    modify_call(): Modify_callContext | undefined;
    COLLATE(): TerminalNode | undefined;
    id(): IdContext | undefined;
    case_expression(): Case_expressionContext | undefined;
    full_column_name(): Full_column_nameContext | undefined;
    bracket_expression(): Bracket_expressionContext | undefined;
    unary_operator_expression(): Unary_operator_expressionContext | undefined;
    STAR(): TerminalNode | undefined;
    DIVIDE(): TerminalNode | undefined;
    MODULE(): TerminalNode | undefined;
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    BIT_AND(): TerminalNode | undefined;
    BIT_XOR(): TerminalNode | undefined;
    BIT_OR(): TerminalNode | undefined;
    DOUBLE_BAR(): TerminalNode | undefined;
    time_zone(): Time_zoneContext | undefined;
    over_clause(): Over_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Time_zoneContext extends ParserRuleContext {
    AT_KEYWORD(): TerminalNode;
    TIME(): TerminalNode;
    ZONE(): TerminalNode;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Primitive_expressionContext extends ParserRuleContext {
    DEFAULT(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    constant(): ConstantContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Case_expressionContext extends ParserRuleContext {
    _caseExpr: ExpressionContext;
    _elseExpr: ExpressionContext;
    CASE(): TerminalNode;
    END(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    switch_section(): Switch_sectionContext[];
    switch_section(i: number): Switch_sectionContext;
    ELSE(): TerminalNode | undefined;
    switch_search_condition_section(): Switch_search_condition_sectionContext[];
    switch_search_condition_section(i: number): Switch_search_condition_sectionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Unary_operator_expressionContext extends ParserRuleContext {
    _op: Token;
    BIT_NOT(): TerminalNode | undefined;
    expression(): ExpressionContext;
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Bracket_expressionContext extends ParserRuleContext {
    LR_BRACKET(): TerminalNode;
    expression(): ExpressionContext | undefined;
    RR_BRACKET(): TerminalNode;
    subquery(): SubqueryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Constant_expressionContext extends ParserRuleContext {
    NULL(): TerminalNode | undefined;
    constant(): ConstantContext | undefined;
    function_call(): Function_callContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    constant_expression(): Constant_expressionContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class SubqueryContext extends ParserRuleContext {
    select_statement(): Select_statementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class With_expressionContext extends ParserRuleContext {
    _common_table_expression: Common_table_expressionContext;
    _ctes: Common_table_expressionContext[];
    WITH(): TerminalNode;
    common_table_expression(): Common_table_expressionContext[];
    common_table_expression(i: number): Common_table_expressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Common_table_expressionContext extends ParserRuleContext {
    _expression_name: IdContext;
    _columns: Column_name_listContext;
    _cte_query: Select_statementContext;
    AS(): TerminalNode;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    id(): IdContext;
    select_statement(): Select_statementContext;
    column_name_list(): Column_name_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Update_elemContext extends ParserRuleContext {
    _udt_column_name: IdContext;
    _method_name: IdContext;
    LOCAL_ID(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    full_column_name(): Full_column_nameContext | undefined;
    expression(): ExpressionContext | undefined;
    assignment_operator(): Assignment_operatorContext | undefined;
    DOT(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    expression_list(): Expression_listContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Update_elem_mergeContext extends ParserRuleContext {
    _udt_column_name: IdContext;
    _method_name: IdContext;
    expression(): ExpressionContext | undefined;
    full_column_name(): Full_column_nameContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    assignment_operator(): Assignment_operatorContext | undefined;
    DOT(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    expression_list(): Expression_listContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Search_conditionContext extends ParserRuleContext {
    _predicate_br: Predicate_brContext;
    _pred: Predicate_brContext[];
    _log: Token;
    predicate_br(): Predicate_brContext[];
    predicate_br(i: number): Predicate_brContext;
    OR(): TerminalNode[];
    OR(i: number): TerminalNode;
    AND(): TerminalNode[];
    AND(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Predicate_brContext extends ParserRuleContext {
    predicate(): PredicateContext | undefined;
    NOT(): TerminalNode[];
    NOT(i: number): TerminalNode;
    LR_BRACKET(): TerminalNode | undefined;
    search_condition(): Search_conditionContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class PredicateContext extends ParserRuleContext {
    EXISTS(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    subquery(): SubqueryContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    freetext_predicate(): Freetext_predicateContext | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    comparison_operator(): Comparison_operatorContext | undefined;
    ALL(): TerminalNode | undefined;
    SOME(): TerminalNode | undefined;
    ANY(): TerminalNode | undefined;
    BETWEEN(): TerminalNode | undefined;
    AND(): TerminalNode | undefined;
    NOT(): TerminalNode[];
    NOT(i: number): TerminalNode;
    IN(): TerminalNode | undefined;
    expression_list(): Expression_listContext | undefined;
    LIKE(): TerminalNode | undefined;
    ESCAPE(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    null_notnull(): Null_notnullContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Query_expressionContext extends ParserRuleContext {
    _sql_union: Sql_unionContext;
    _unions: Sql_unionContext[];
    query_specification(): Query_specificationContext | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    query_expression(): Query_expressionContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    order_by_clause(): Order_by_clauseContext | undefined;
    sql_union(): Sql_unionContext[];
    sql_union(i: number): Sql_unionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Sql_unionContext extends ParserRuleContext {
    _spec: Query_specificationContext;
    _op: Query_expressionContext;
    UNION(): TerminalNode | undefined;
    EXCEPT(): TerminalNode | undefined;
    INTERSECT(): TerminalNode | undefined;
    query_specification(): Query_specificationContext | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    query_expression(): Query_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Query_specificationContext extends ParserRuleContext {
    _allOrDistinct: Token;
    _top: Top_clauseContext;
    _columns: Select_listContext;
    _into: Table_nameContext;
    _from: Table_sourcesContext;
    _where: Search_conditionContext;
    _groupByAll: Token;
    _group_by_item: Group_by_itemContext;
    _groupBys: Group_by_itemContext[];
    _having: Search_conditionContext;
    SELECT(): TerminalNode;
    select_list(): Select_listContext;
    INTO(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    WHERE(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    HAVING(): TerminalNode | undefined;
    top_clause(): Top_clauseContext | undefined;
    table_name(): Table_nameContext | undefined;
    table_sources(): Table_sourcesContext | undefined;
    search_condition(): Search_conditionContext[];
    search_condition(i: number): Search_conditionContext;
    group_by_item(): Group_by_itemContext[];
    group_by_item(i: number): Group_by_itemContext;
    ALL(): TerminalNode[];
    ALL(i: number): TerminalNode;
    DISTINCT(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Top_clauseContext extends ParserRuleContext {
    TOP(): TerminalNode;
    top_percent(): Top_percentContext | undefined;
    top_count(): Top_countContext | undefined;
    WITH(): TerminalNode | undefined;
    TIES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Top_percentContext extends ParserRuleContext {
    _percent_constant: Token;
    _topper_expression: ExpressionContext;
    PERCENT(): TerminalNode;
    REAL(): TerminalNode | undefined;
    FLOAT(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Top_countContext extends ParserRuleContext {
    _count_constant: Token;
    _topcount_expression: ExpressionContext;
    DECIMAL(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Order_by_clauseContext extends ParserRuleContext {
    _order_by_expression: Order_by_expressionContext;
    _order_bys: Order_by_expressionContext[];
    _offset_exp: ExpressionContext;
    _offset_rows: Token;
    _fetch_offset: Token;
    _fetch_exp: ExpressionContext;
    _fetch_rows: Token;
    ORDER(): TerminalNode;
    BY(): TerminalNode;
    order_by_expression(): Order_by_expressionContext[];
    order_by_expression(i: number): Order_by_expressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    OFFSET(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    ROW(): TerminalNode[];
    ROW(i: number): TerminalNode;
    ROWS(): TerminalNode[];
    ROWS(i: number): TerminalNode;
    FETCH(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    FIRST(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class For_clauseContext extends ParserRuleContext {
    FOR(): TerminalNode;
    BROWSE(): TerminalNode | undefined;
    XML(): TerminalNode | undefined;
    RAW(): TerminalNode | undefined;
    AUTO(): TerminalNode | undefined;
    xml_common_directives(): Xml_common_directivesContext[];
    xml_common_directives(i: number): Xml_common_directivesContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    ELEMENTS(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    XMLDATA(): TerminalNode | undefined;
    XMLSCHEMA(): TerminalNode | undefined;
    XSINIL(): TerminalNode | undefined;
    ABSENT(): TerminalNode | undefined;
    EXPLICIT(): TerminalNode | undefined;
    PATH(): TerminalNode | undefined;
    JSON(): TerminalNode | undefined;
    ROOT(): TerminalNode | undefined;
    INCLUDE_NULL_VALUES(): TerminalNode | undefined;
    WITHOUT_ARRAY_WRAPPER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Xml_common_directivesContext extends ParserRuleContext {
    COMMA(): TerminalNode;
    BINARY_BASE64(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    ROOT(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Order_by_expressionContext extends ParserRuleContext {
    _order_by: ExpressionContext;
    _ascending: Token;
    _descending: Token;
    expression(): ExpressionContext;
    ASC(): TerminalNode | undefined;
    DESC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Group_by_itemContext extends ParserRuleContext {
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Option_clauseContext extends ParserRuleContext {
    _option: OptionContext;
    _options: OptionContext[];
    OPTION(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    option(): OptionContext[];
    option(i: number): OptionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class OptionContext extends ParserRuleContext {
    _number_rows: Token;
    _number_of_processors: Token;
    _number_recursion: Token;
    FAST(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    HASH(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    UNION(): TerminalNode | undefined;
    MERGE(): TerminalNode | undefined;
    CONCAT(): TerminalNode | undefined;
    JOIN(): TerminalNode | undefined;
    LOOP(): TerminalNode | undefined;
    EXPAND(): TerminalNode | undefined;
    VIEWS(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(): TerminalNode | undefined;
    KEEP(): TerminalNode | undefined;
    PLAN(): TerminalNode | undefined;
    KEEPFIXED(): TerminalNode | undefined;
    MAXDOP(): TerminalNode | undefined;
    MAXRECURSION(): TerminalNode | undefined;
    OPTIMIZE(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    optimize_for_arg(): Optimize_for_argContext[];
    optimize_for_arg(i: number): Optimize_for_argContext;
    RR_BRACKET(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    UNKNOWN(): TerminalNode | undefined;
    PARAMETERIZATION(): TerminalNode | undefined;
    SIMPLE(): TerminalNode | undefined;
    FORCED(): TerminalNode | undefined;
    RECOMPILE(): TerminalNode | undefined;
    ROBUST(): TerminalNode | undefined;
    USE(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Optimize_for_argContext extends ParserRuleContext {
    LOCAL_ID(): TerminalNode;
    UNKNOWN(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    constant(): ConstantContext | undefined;
    NULL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Select_listContext extends ParserRuleContext {
    _select_list_elem: Select_list_elemContext;
    _selectElement: Select_list_elemContext[];
    select_list_elem(): Select_list_elemContext[];
    select_list_elem(i: number): Select_list_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Udt_method_argumentsContext extends ParserRuleContext {
    _execute_var_string: Execute_var_stringContext;
    _argument: Execute_var_stringContext[];
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    execute_var_string(): Execute_var_stringContext[];
    execute_var_string(i: number): Execute_var_stringContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class AsteriskContext extends ParserRuleContext {
    STAR(): TerminalNode;
    table_name(): Table_nameContext | undefined;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Column_elemContext extends ParserRuleContext {
    full_column_name(): Full_column_nameContext | undefined;
    DOLLAR(): TerminalNode | undefined;
    IDENTITY(): TerminalNode | undefined;
    ROWGUID(): TerminalNode | undefined;
    NULL(): TerminalNode | undefined;
    as_column_alias(): As_column_aliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Udt_elemContext extends ParserRuleContext {
    _udt_column_name: IdContext;
    _non_static_attr: IdContext;
    _static_attr: IdContext;
    DOT(): TerminalNode | undefined;
    udt_method_arguments(): Udt_method_argumentsContext | undefined;
    id(): IdContext[];
    id(i: number): IdContext;
    as_column_alias(): As_column_aliasContext | undefined;
    COLON(): TerminalNode[];
    COLON(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Expression_elemContext extends ParserRuleContext {
    _leftAlias: Column_aliasContext;
    _eq: Token;
    _leftAssignment: ExpressionContext;
    _expressionAs: ExpressionContext;
    column_alias(): Column_aliasContext | undefined;
    EQUAL(): TerminalNode | undefined;
    expression(): ExpressionContext;
    as_column_alias(): As_column_aliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Select_list_elemContext extends ParserRuleContext {
    asterisk(): AsteriskContext | undefined;
    column_elem(): Column_elemContext | undefined;
    udt_elem(): Udt_elemContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    assignment_operator(): Assignment_operatorContext | undefined;
    EQUAL(): TerminalNode | undefined;
    expression_elem(): Expression_elemContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_sourcesContext extends ParserRuleContext {
    _table_source: Table_sourceContext;
    _source: Table_sourceContext[];
    table_source(): Table_sourceContext[];
    table_source(i: number): Table_sourceContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_sourceContext extends ParserRuleContext {
    table_source_item_joined(): Table_source_item_joinedContext;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_source_item_joinedContext extends ParserRuleContext {
    _join_part: Join_partContext;
    _joins: Join_partContext[];
    table_source_item(): Table_source_itemContext;
    join_part(): Join_partContext[];
    join_part(i: number): Join_partContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_source_itemContext extends ParserRuleContext {
    _loc_id: Token;
    _loc_id_call: Token;
    _loc_fcall: Function_callContext;
    _oldstyle_fcall: Function_callContext;
    table_name_with_hint(): Table_name_with_hintContext | undefined;
    as_table_alias(): As_table_aliasContext | undefined;
    full_table_name(): Full_table_nameContext | undefined;
    rowset_function(): Rowset_functionContext | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    derived_table(): Derived_tableContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    column_alias_list(): Column_alias_listContext | undefined;
    change_table(): Change_tableContext | undefined;
    function_call(): Function_callContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    nodes_method(): Nodes_methodContext | undefined;
    DOT(): TerminalNode | undefined;
    open_xml(): Open_xmlContext | undefined;
    open_json(): Open_jsonContext | undefined;
    COLON(): TerminalNode[];
    COLON(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Open_xmlContext extends ParserRuleContext {
    OPENXML(): TerminalNode;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    WITH(): TerminalNode | undefined;
    schema_declaration(): Schema_declarationContext | undefined;
    as_table_alias(): As_table_aliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Open_jsonContext extends ParserRuleContext {
    OPENJSON(): TerminalNode;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    COMMA(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    json_declaration(): Json_declarationContext | undefined;
    as_table_alias(): As_table_aliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Json_declarationContext extends ParserRuleContext {
    _json_column_declaration: Json_column_declarationContext;
    _json_col: Json_column_declarationContext[];
    json_column_declaration(): Json_column_declarationContext[];
    json_column_declaration(i: number): Json_column_declarationContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Json_column_declarationContext extends ParserRuleContext {
    column_declaration(): Column_declarationContext;
    AS(): TerminalNode | undefined;
    JSON(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Schema_declarationContext extends ParserRuleContext {
    _column_declaration: Column_declarationContext;
    _xml_col: Column_declarationContext[];
    column_declaration(): Column_declarationContext[];
    column_declaration(i: number): Column_declarationContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Column_declarationContext extends ParserRuleContext {
    id(): IdContext;
    data_type(): Data_typeContext;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Change_tableContext extends ParserRuleContext {
    change_table_changes(): Change_table_changesContext | undefined;
    change_table_version(): Change_table_versionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Change_table_changesContext extends ParserRuleContext {
    _changetable: Table_nameContext;
    _changesid: Token;
    CHANGETABLE(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    CHANGES(): TerminalNode;
    COMMA(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    table_name(): Table_nameContext;
    NULL(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Change_table_versionContext extends ParserRuleContext {
    _versiontable: Table_nameContext;
    _pk_columns: Full_column_name_listContext;
    _pk_values: Select_listContext;
    CHANGETABLE(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    VERSION(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode;
    table_name(): Table_nameContext;
    full_column_name_list(): Full_column_name_listContext;
    select_list(): Select_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Join_partContext extends ParserRuleContext {
    join_on(): Join_onContext | undefined;
    cross_join(): Cross_joinContext | undefined;
    apply(): ApplyContext | undefined;
    pivot(): PivotContext | undefined;
    unpivot(): UnpivotContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Join_onContext extends ParserRuleContext {
    _inner: Token;
    _join_type: Token;
    _outer: Token;
    _join_hint: Token;
    _source: Table_sourceContext;
    _cond: Search_conditionContext;
    JOIN(): TerminalNode;
    ON(): TerminalNode;
    table_source(): Table_sourceContext;
    search_condition(): Search_conditionContext;
    LEFT(): TerminalNode | undefined;
    RIGHT(): TerminalNode | undefined;
    FULL(): TerminalNode | undefined;
    LOOP(): TerminalNode | undefined;
    HASH(): TerminalNode | undefined;
    MERGE(): TerminalNode | undefined;
    REMOTE(): TerminalNode | undefined;
    INNER(): TerminalNode | undefined;
    OUTER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Cross_joinContext extends ParserRuleContext {
    CROSS(): TerminalNode;
    JOIN(): TerminalNode;
    table_source(): Table_sourceContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class ApplyContext extends ParserRuleContext {
    _apply_style: Token;
    _source: Table_sourceContext;
    APPLY(): TerminalNode;
    table_source(): Table_sourceContext;
    CROSS(): TerminalNode | undefined;
    OUTER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class PivotContext extends ParserRuleContext {
    PIVOT(): TerminalNode;
    pivot_clause(): Pivot_clauseContext;
    as_table_alias(): As_table_aliasContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class UnpivotContext extends ParserRuleContext {
    UNPIVOT(): TerminalNode;
    unpivot_clause(): Unpivot_clauseContext;
    as_table_alias(): As_table_aliasContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Pivot_clauseContext extends ParserRuleContext {
    LR_BRACKET(): TerminalNode;
    aggregate_windowed_function(): Aggregate_windowed_functionContext;
    FOR(): TerminalNode;
    full_column_name(): Full_column_nameContext;
    IN(): TerminalNode;
    column_alias_list(): Column_alias_listContext;
    RR_BRACKET(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Unpivot_clauseContext extends ParserRuleContext {
    _unpivot_exp: ExpressionContext;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    FOR(): TerminalNode;
    full_column_name(): Full_column_nameContext;
    IN(): TerminalNode;
    full_column_name_list(): Full_column_name_listContext;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Full_column_name_listContext extends ParserRuleContext {
    _full_column_name: Full_column_nameContext;
    _column: Full_column_nameContext[];
    full_column_name(): Full_column_nameContext[];
    full_column_name(i: number): Full_column_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_name_with_hintContext extends ParserRuleContext {
    table_name(): Table_nameContext;
    with_table_hints(): With_table_hintsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Rowset_functionContext extends ParserRuleContext {
    _provider_name: Token;
    _connectionString: Token;
    _sql: Token;
    _data_file: Token;
    OPENROWSET(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode | undefined;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    BULK(): TerminalNode | undefined;
    bulk_option(): Bulk_optionContext[];
    bulk_option(i: number): Bulk_optionContext;
    id(): IdContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Bulk_optionContext extends ParserRuleContext {
    _bulk_option_value: Token;
    id(): IdContext;
    EQUAL(): TerminalNode;
    DECIMAL(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Derived_tableContext extends ParserRuleContext {
    subquery(): SubqueryContext | undefined;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    table_value_constructor(): Table_value_constructorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Function_callContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: Function_callContext): void;
}
export declare class RANKING_WINDOWED_FUNCContext extends Function_callContext {
    ranking_windowed_function(): Ranking_windowed_functionContext;
    constructor(ctx: Function_callContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class AGGREGATE_WINDOWED_FUNCContext extends Function_callContext {
    aggregate_windowed_function(): Aggregate_windowed_functionContext;
    constructor(ctx: Function_callContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class ANALYTIC_WINDOWED_FUNCContext extends Function_callContext {
    analytic_windowed_function(): Analytic_windowed_functionContext;
    constructor(ctx: Function_callContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class SCALAR_FUNCTIONContext extends Function_callContext {
    scalar_function_name(): Scalar_function_nameContext;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    expression_list(): Expression_listContext | undefined;
    constructor(ctx: Function_callContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class BUILT_IN_FUNCContext extends Function_callContext {
    build_in_functions(): Build_in_functionsContext;
    constructor(ctx: Function_callContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class FREE_TEXTContext extends Function_callContext {
    freetext_function(): Freetext_functionContext;
    constructor(ctx: Function_callContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Freetext_functionContext extends ParserRuleContext {
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    table_name(): Table_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    CONTAINSTABLE(): TerminalNode | undefined;
    FREETEXTTABLE(): TerminalNode | undefined;
    full_column_name(): Full_column_nameContext[];
    full_column_name(i: number): Full_column_nameContext;
    STAR(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    SEMANTICSIMILARITYTABLE(): TerminalNode | undefined;
    SEMANTICKEYPHRASETABLE(): TerminalNode | undefined;
    SEMANTICSIMILARITYDETAILSTABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Freetext_predicateContext extends ParserRuleContext {
    CONTAINS(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    full_column_name(): Full_column_nameContext[];
    full_column_name(i: number): Full_column_nameContext;
    STAR(): TerminalNode | undefined;
    PROPERTY(): TerminalNode | undefined;
    FREETEXT(): TerminalNode | undefined;
    table_name(): Table_nameContext | undefined;
    LANGUAGE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Build_in_functionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: Build_in_functionsContext): void;
}
export declare class BINARY_CHECKSUMContext extends Build_in_functionsContext {
    BINARY_CHECKSUM(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    STAR(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class CASTContext extends Build_in_functionsContext {
    CAST(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    expression(): ExpressionContext;
    AS(): TerminalNode;
    data_type(): Data_typeContext;
    RR_BRACKET(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class TRY_CASTContext extends Build_in_functionsContext {
    TRY_CAST(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    expression(): ExpressionContext;
    AS(): TerminalNode;
    data_type(): Data_typeContext;
    RR_BRACKET(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class CONVERTContext extends Build_in_functionsContext {
    _convert_data_type: Data_typeContext;
    _convert_expression: ExpressionContext;
    _style: ExpressionContext;
    CONVERT(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode;
    data_type(): Data_typeContext;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class CHECKSUMContext extends Build_in_functionsContext {
    CHECKSUM(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    STAR(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class COALESCEContext extends Build_in_functionsContext {
    COALESCE(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    expression_list(): Expression_listContext;
    RR_BRACKET(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class CURRENT_TIMESTAMPContext extends Build_in_functionsContext {
    CURRENT_TIMESTAMP(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class CURRENT_USERContext extends Build_in_functionsContext {
    CURRENT_USER(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class DATEADDContext extends Build_in_functionsContext {
    _datepart: Token;
    _number: ExpressionContext;
    _date: ExpressionContext;
    DATEADD(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode;
    ID(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class DATEDIFFContext extends Build_in_functionsContext {
    _datepart: Token;
    _date_first: ExpressionContext;
    _date_second: ExpressionContext;
    DATEDIFF(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode;
    ID(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class DATENAMEContext extends Build_in_functionsContext {
    _datepart: Token;
    _date: ExpressionContext;
    DATENAME(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    ID(): TerminalNode;
    expression(): ExpressionContext;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class DATEPARTContext extends Build_in_functionsContext {
    _datepart: Token;
    _date: ExpressionContext;
    DATEPART(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    ID(): TerminalNode;
    expression(): ExpressionContext;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class GETDATEContext extends Build_in_functionsContext {
    GETDATE(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class GETUTCDATEContext extends Build_in_functionsContext {
    GETUTCDATE(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class IDENTITYContext extends Build_in_functionsContext {
    _seed: Token;
    _increment: Token;
    IDENTITY(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    data_type(): Data_typeContext;
    RR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class MIN_ACTIVE_ROWVERSIONContext extends Build_in_functionsContext {
    MIN_ACTIVE_ROWVERSION(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class NULLIFContext extends Build_in_functionsContext {
    _left: ExpressionContext;
    _right: ExpressionContext;
    NULLIF(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class STUFFContext extends Build_in_functionsContext {
    _str: ExpressionContext;
    _from: Token;
    _to: Token;
    _str_with: ExpressionContext;
    STUFF(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class SESSION_USERContext extends Build_in_functionsContext {
    SESSION_USER(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class SYSTEM_USERContext extends Build_in_functionsContext {
    SYSTEM_USER(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class USERContext extends Build_in_functionsContext {
    USER(): TerminalNode;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class ISNULLContext extends Build_in_functionsContext {
    _left: ExpressionContext;
    _right: ExpressionContext;
    ISNULL(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class XML_DATA_TYPE_FUNCContext extends Build_in_functionsContext {
    xml_data_type_methods(): Xml_data_type_methodsContext;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class IIFContext extends Build_in_functionsContext {
    _cond: Search_conditionContext;
    _left: ExpressionContext;
    _right: ExpressionContext;
    IIF(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode;
    search_condition(): Search_conditionContext;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class STRINGAGGContext extends Build_in_functionsContext {
    _expr: ExpressionContext;
    _separator: ExpressionContext;
    STRING_AGG(): TerminalNode;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    COMMA(): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    WITHIN(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    order_by_clause(): Order_by_clauseContext | undefined;
    constructor(ctx: Build_in_functionsContext);
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Xml_data_type_methodsContext extends ParserRuleContext {
    value_method(): Value_methodContext | undefined;
    query_method(): Query_methodContext | undefined;
    exist_method(): Exist_methodContext | undefined;
    modify_method(): Modify_methodContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Value_methodContext extends ParserRuleContext {
    _loc_id: Token;
    _value_id: IdContext;
    _eventdata: Token;
    _query: Query_methodContext;
    _call: Value_callContext;
    DOT(): TerminalNode;
    value_call(): Value_callContext;
    LR_BRACKET(): TerminalNode | undefined;
    subquery(): SubqueryContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    id(): IdContext | undefined;
    EVENTDATA(): TerminalNode | undefined;
    query_method(): Query_methodContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Value_callContext extends ParserRuleContext {
    _xquery: Token;
    _sqltype: Token;
    VALUE(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    COMMA(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Query_methodContext extends ParserRuleContext {
    _loc_id: Token;
    _value_id: IdContext;
    _table: Full_table_nameContext;
    _call: Query_callContext;
    DOT(): TerminalNode;
    query_call(): Query_callContext;
    LR_BRACKET(): TerminalNode | undefined;
    subquery(): SubqueryContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    id(): IdContext | undefined;
    full_table_name(): Full_table_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Query_callContext extends ParserRuleContext {
    _xquery: Token;
    QUERY(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Exist_methodContext extends ParserRuleContext {
    _loc_id: Token;
    _value_id: IdContext;
    _call: Exist_callContext;
    DOT(): TerminalNode;
    exist_call(): Exist_callContext;
    LR_BRACKET(): TerminalNode | undefined;
    subquery(): SubqueryContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    id(): IdContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Exist_callContext extends ParserRuleContext {
    _xquery: Token;
    EXIST(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Modify_methodContext extends ParserRuleContext {
    _loc_id: Token;
    _value_id: IdContext;
    _call: Modify_callContext;
    DOT(): TerminalNode;
    modify_call(): Modify_callContext;
    LR_BRACKET(): TerminalNode | undefined;
    subquery(): SubqueryContext | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    id(): IdContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Modify_callContext extends ParserRuleContext {
    _xml_dml: Token;
    MODIFY(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    STRING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Nodes_methodContext extends ParserRuleContext {
    _loc_id: Token;
    _value_id: IdContext;
    _xquery: Token;
    DOT(): TerminalNode;
    NODES(): TerminalNode;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    STRING(): TerminalNode;
    subquery(): SubqueryContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    id(): IdContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Switch_sectionContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    THEN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Switch_search_condition_sectionContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    search_condition(): Search_conditionContext;
    THEN(): TerminalNode;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class As_column_aliasContext extends ParserRuleContext {
    column_alias(): Column_aliasContext;
    AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class As_table_aliasContext extends ParserRuleContext {
    table_alias(): Table_aliasContext;
    AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_aliasContext extends ParserRuleContext {
    id(): IdContext;
    with_table_hints(): With_table_hintsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class With_table_hintsContext extends ParserRuleContext {
    _table_hint: Table_hintContext;
    _hint: Table_hintContext[];
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    table_hint(): Table_hintContext[];
    table_hint(i: number): Table_hintContext;
    WITH(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Insert_with_table_hintsContext extends ParserRuleContext {
    _table_hint: Table_hintContext;
    _hint: Table_hintContext[];
    WITH(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    table_hint(): Table_hintContext[];
    table_hint(i: number): Table_hintContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_hintContext extends ParserRuleContext {
    INDEX(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    index_value(): Index_valueContext[];
    index_value(i: number): Index_valueContext;
    FORCESEEK(): TerminalNode | undefined;
    SERIALIZABLE(): TerminalNode | undefined;
    SNAPSHOT(): TerminalNode | undefined;
    SPATIAL_WINDOW_MAX_CELLS(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    HOLDLOCK(): TerminalNode | undefined;
    ID(): TerminalNode[];
    ID(i: number): TerminalNode;
    NOEXPAND(): TerminalNode | undefined;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Index_valueContext extends ParserRuleContext {
    id(): IdContext | undefined;
    DECIMAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Column_alias_listContext extends ParserRuleContext {
    _column_alias: Column_aliasContext;
    _alias: Column_aliasContext[];
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    column_alias(): Column_aliasContext[];
    column_alias(i: number): Column_aliasContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Column_aliasContext extends ParserRuleContext {
    id(): IdContext | undefined;
    STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_value_constructorContext extends ParserRuleContext {
    _expression_list: Expression_listContext;
    _exps: Expression_listContext[];
    VALUES(): TerminalNode;
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    expression_list(): Expression_listContext[];
    expression_list(i: number): Expression_listContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Expression_listContext extends ParserRuleContext {
    _expression: ExpressionContext;
    _exp: ExpressionContext[];
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Ranking_windowed_functionContext extends ParserRuleContext {
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    over_clause(): Over_clauseContext;
    RANK(): TerminalNode | undefined;
    DENSE_RANK(): TerminalNode | undefined;
    ROW_NUMBER(): TerminalNode | undefined;
    NTILE(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Aggregate_windowed_functionContext extends ParserRuleContext {
    _agg_func: Token;
    _cnt: Token;
    LR_BRACKET(): TerminalNode;
    all_distinct_expression(): All_distinct_expressionContext | undefined;
    RR_BRACKET(): TerminalNode;
    AVG(): TerminalNode | undefined;
    MAX(): TerminalNode | undefined;
    MIN(): TerminalNode | undefined;
    SUM(): TerminalNode | undefined;
    STDEV(): TerminalNode | undefined;
    STDEVP(): TerminalNode | undefined;
    VAR(): TerminalNode | undefined;
    VARP(): TerminalNode | undefined;
    over_clause(): Over_clauseContext | undefined;
    COUNT(): TerminalNode | undefined;
    COUNT_BIG(): TerminalNode | undefined;
    STAR(): TerminalNode | undefined;
    CHECKSUM_AGG(): TerminalNode | undefined;
    GROUPING(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    GROUPING_ID(): TerminalNode | undefined;
    expression_list(): Expression_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Analytic_windowed_functionContext extends ParserRuleContext {
    LR_BRACKET(): TerminalNode[];
    LR_BRACKET(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    RR_BRACKET(): TerminalNode[];
    RR_BRACKET(i: number): TerminalNode;
    over_clause(): Over_clauseContext | undefined;
    FIRST_VALUE(): TerminalNode | undefined;
    LAST_VALUE(): TerminalNode | undefined;
    LAG(): TerminalNode | undefined;
    LEAD(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    OVER(): TerminalNode | undefined;
    order_by_clause(): Order_by_clauseContext | undefined;
    CUME_DIST(): TerminalNode | undefined;
    PERCENT_RANK(): TerminalNode | undefined;
    PARTITION(): TerminalNode | undefined;
    BY(): TerminalNode[];
    BY(i: number): TerminalNode;
    expression_list(): Expression_listContext | undefined;
    WITHIN(): TerminalNode | undefined;
    GROUP(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    PERCENTILE_CONT(): TerminalNode | undefined;
    PERCENTILE_DISC(): TerminalNode | undefined;
    ASC(): TerminalNode | undefined;
    DESC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class All_distinct_expressionContext extends ParserRuleContext {
    expression(): ExpressionContext;
    ALL(): TerminalNode | undefined;
    DISTINCT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Over_clauseContext extends ParserRuleContext {
    OVER(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    PARTITION(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    expression_list(): Expression_listContext | undefined;
    order_by_clause(): Order_by_clauseContext | undefined;
    row_or_range_clause(): Row_or_range_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Row_or_range_clauseContext extends ParserRuleContext {
    window_frame_extent(): Window_frame_extentContext;
    ROWS(): TerminalNode | undefined;
    RANGE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Window_frame_extentContext extends ParserRuleContext {
    window_frame_preceding(): Window_frame_precedingContext | undefined;
    BETWEEN(): TerminalNode | undefined;
    window_frame_bound(): Window_frame_boundContext[];
    window_frame_bound(i: number): Window_frame_boundContext;
    AND(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Window_frame_boundContext extends ParserRuleContext {
    window_frame_preceding(): Window_frame_precedingContext | undefined;
    window_frame_following(): Window_frame_followingContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Window_frame_precedingContext extends ParserRuleContext {
    UNBOUNDED(): TerminalNode | undefined;
    PRECEDING(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    CURRENT(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Window_frame_followingContext extends ParserRuleContext {
    UNBOUNDED(): TerminalNode | undefined;
    FOLLOWING(): TerminalNode;
    DECIMAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Create_database_optionContext extends ParserRuleContext {
    FILESTREAM(): TerminalNode | undefined;
    database_filestream_option(): Database_filestream_optionContext[];
    database_filestream_option(i: number): Database_filestream_optionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    DEFAULT_LANGUAGE(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    id(): IdContext | undefined;
    STRING(): TerminalNode | undefined;
    DEFAULT_FULLTEXT_LANGUAGE(): TerminalNode | undefined;
    NESTED_TRIGGERS(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    TRANSFORM_NOISE_WORDS(): TerminalNode | undefined;
    TWO_DIGIT_YEAR_CUTOFF(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    DB_CHAINING(): TerminalNode | undefined;
    TRUSTWORTHY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Database_filestream_optionContext extends ParserRuleContext {
    LR_BRACKET(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    NON_TRANSACTED_ACCESS(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    DIRECTORY_NAME(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    READ_ONLY(): TerminalNode | undefined;
    FULL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Database_file_specContext extends ParserRuleContext {
    file_group(): File_groupContext | undefined;
    file_spec(): File_specContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class File_groupContext extends ParserRuleContext {
    FILEGROUP(): TerminalNode;
    id(): IdContext;
    file_spec(): File_specContext[];
    file_spec(i: number): File_specContext;
    CONTAINS(): TerminalNode[];
    CONTAINS(i: number): TerminalNode;
    FILESTREAM(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    MEMORY_OPTIMIZED_DATA(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class File_specContext extends ParserRuleContext {
    _file: Token;
    LR_BRACKET(): TerminalNode;
    NAME(): TerminalNode;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    FILENAME(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    id(): IdContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    SIZE(): TerminalNode | undefined;
    file_size(): File_sizeContext[];
    file_size(i: number): File_sizeContext;
    MAXSIZE(): TerminalNode | undefined;
    FILEGROWTH(): TerminalNode | undefined;
    UNLIMITED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Entity_nameContext extends ParserRuleContext {
    _server: IdContext;
    _database: IdContext;
    _schema: IdContext;
    _table: IdContext;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Entity_name_for_azure_dwContext extends ParserRuleContext {
    _schema: IdContext;
    _object_name: IdContext;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Entity_name_for_parallel_dwContext extends ParserRuleContext {
    _schema_database: IdContext;
    _schema: IdContext;
    _object_name: IdContext;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Full_table_nameContext extends ParserRuleContext {
    _server: IdContext;
    _database: IdContext;
    _schema: IdContext;
    _table: IdContext;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Table_nameContext extends ParserRuleContext {
    _database: IdContext;
    _schema: IdContext;
    _table: IdContext;
    _blocking_hierarchy: Token;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    BLOCKING_HIERARCHY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Simple_nameContext extends ParserRuleContext {
    _schema: IdContext;
    _name: IdContext;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Func_proc_name_schemaContext extends ParserRuleContext {
    _schema: IdContext;
    _procedure: IdContext;
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Func_proc_name_database_schemaContext extends ParserRuleContext {
    _database: IdContext;
    _schema: IdContext;
    _procedure: IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    func_proc_name_schema(): Func_proc_name_schemaContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Func_proc_name_server_database_schemaContext extends ParserRuleContext {
    _server: IdContext;
    _database: IdContext;
    _schema: IdContext;
    _procedure: IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    func_proc_name_database_schema(): Func_proc_name_database_schemaContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Ddl_objectContext extends ParserRuleContext {
    full_table_name(): Full_table_nameContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Full_column_nameContext extends ParserRuleContext {
    _server: IdContext;
    _schema: IdContext;
    _tablename: IdContext;
    _column_name: IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Column_name_list_with_orderContext extends ParserRuleContext {
    id(): IdContext[];
    id(i: number): IdContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    ASC(): TerminalNode[];
    ASC(i: number): TerminalNode;
    DESC(): TerminalNode[];
    DESC(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Insert_column_name_listContext extends ParserRuleContext {
    _insert_column_id: Insert_column_idContext;
    _col: Insert_column_idContext[];
    insert_column_id(): Insert_column_idContext[];
    insert_column_id(i: number): Insert_column_idContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Insert_column_idContext extends ParserRuleContext {
    _id: IdContext;
    _ignore: IdContext[];
    id(): IdContext[];
    id(i: number): IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Column_name_listContext extends ParserRuleContext {
    _id: IdContext;
    _col: IdContext[];
    id(): IdContext[];
    id(i: number): IdContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Cursor_nameContext extends ParserRuleContext {
    id(): IdContext | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class On_offContext extends ParserRuleContext {
    ON(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class ClusteredContext extends ParserRuleContext {
    CLUSTERED(): TerminalNode | undefined;
    NONCLUSTERED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Null_notnullContext extends ParserRuleContext {
    NULL(): TerminalNode;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Null_or_defaultContext extends ParserRuleContext {
    null_notnull(): Null_notnullContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    constant_expression(): Constant_expressionContext | undefined;
    COLLATE(): TerminalNode | undefined;
    id(): IdContext | undefined;
    WITH(): TerminalNode | undefined;
    VALUES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Scalar_function_nameContext extends ParserRuleContext {
    func_proc_name_server_database_schema(): Func_proc_name_server_database_schemaContext | undefined;
    RIGHT(): TerminalNode | undefined;
    LEFT(): TerminalNode | undefined;
    BINARY_CHECKSUM(): TerminalNode | undefined;
    CHECKSUM(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Begin_conversation_timerContext extends ParserRuleContext {
    BEGIN(): TerminalNode;
    CONVERSATION(): TerminalNode;
    TIMER(): TerminalNode;
    LR_BRACKET(): TerminalNode;
    LOCAL_ID(): TerminalNode;
    RR_BRACKET(): TerminalNode;
    TIMEOUT(): TerminalNode;
    EQUAL(): TerminalNode;
    time(): TimeContext;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Begin_conversation_dialogContext extends ParserRuleContext {
    _dialog_handle: Token;
    _initiator_service_name: Service_nameContext;
    _target_service_name: Service_nameContext;
    _service_broker_guid: Token;
    BEGIN(): TerminalNode;
    DIALOG(): TerminalNode;
    FROM(): TerminalNode;
    SERVICE(): TerminalNode[];
    SERVICE(i: number): TerminalNode;
    TO(): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    CONTRACT(): TerminalNode;
    contract_name(): Contract_nameContext;
    LOCAL_ID(): TerminalNode[];
    LOCAL_ID(i: number): TerminalNode;
    service_name(): Service_nameContext[];
    service_name(i: number): Service_nameContext;
    CONVERSATION(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    WITH(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    STRING(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    LIFETIME(): TerminalNode | undefined;
    ENCRYPTION(): TerminalNode | undefined;
    RELATED_CONVERSATION(): TerminalNode | undefined;
    RELATED_CONVERSATION_GROUP(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Contract_nameContext extends ParserRuleContext {
    id(): IdContext | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Service_nameContext extends ParserRuleContext {
    id(): IdContext | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class End_conversationContext extends ParserRuleContext {
    _conversation_handle: Token;
    _faliure_code: Token;
    _failure_text: Token;
    END(): TerminalNode;
    CONVERSATION(): TerminalNode;
    LOCAL_ID(): TerminalNode[];
    LOCAL_ID(i: number): TerminalNode;
    SEMI(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    ERROR(): TerminalNode | undefined;
    EQUAL(): TerminalNode[];
    EQUAL(i: number): TerminalNode;
    DESCRIPTION(): TerminalNode | undefined;
    CLEANUP(): TerminalNode | undefined;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Waitfor_conversationContext extends ParserRuleContext {
    _timeout: TimeContext;
    LR_BRACKET(): TerminalNode;
    get_conversation(): Get_conversationContext;
    RR_BRACKET(): TerminalNode;
    WAITFOR(): TerminalNode | undefined;
    TIMEOUT(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    time(): TimeContext | undefined;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Get_conversationContext extends ParserRuleContext {
    _conversation_group_id: Token;
    _queue: Queue_idContext;
    GET(): TerminalNode;
    CONVERSATION(): TerminalNode;
    GROUP(): TerminalNode;
    FROM(): TerminalNode;
    queue_id(): Queue_idContext;
    STRING(): TerminalNode | undefined;
    LOCAL_ID(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Queue_idContext extends ParserRuleContext {
    _database_name: IdContext;
    _schema_name: IdContext;
    _name: IdContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    id(): IdContext[];
    id(i: number): IdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Send_conversationContext extends ParserRuleContext {
    _conversation_handle: Token;
    _message_type_name: ExpressionContext;
    _message_body_expression: Token;
    SEND(): TerminalNode;
    ON(): TerminalNode;
    CONVERSATION(): TerminalNode;
    MESSAGE(): TerminalNode;
    TYPE(): TerminalNode;
    expression(): ExpressionContext;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    LOCAL_ID(): TerminalNode[];
    LOCAL_ID(i: number): TerminalNode;
    LR_BRACKET(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Data_typeContext extends ParserRuleContext {
    _scaled: Token;
    _ext_type: IdContext;
    _scale: Token;
    _prec: Token;
    _seed: Token;
    _inc: Token;
    _double_prec: Token;
    _unscaled_type: IdContext;
    LR_BRACKET(): TerminalNode | undefined;
    MAX(): TerminalNode | undefined;
    RR_BRACKET(): TerminalNode | undefined;
    VARCHAR(): TerminalNode | undefined;
    NVARCHAR(): TerminalNode | undefined;
    BINARY_KEYWORD(): TerminalNode | undefined;
    VARBINARY_KEYWORD(): TerminalNode | undefined;
    COMMA(): TerminalNode | undefined;
    id(): IdContext | undefined;
    DECIMAL(): TerminalNode[];
    DECIMAL(i: number): TerminalNode;
    IDENTITY(): TerminalNode | undefined;
    DOUBLE(): TerminalNode | undefined;
    PRECISION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Default_valueContext extends ParserRuleContext {
    NULL(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    constant(): ConstantContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class ConstantContext extends ParserRuleContext {
    _dollar: Token;
    STRING(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    DECIMAL(): TerminalNode | undefined;
    sign(): SignContext | undefined;
    REAL(): TerminalNode | undefined;
    FLOAT(): TerminalNode | undefined;
    DOLLAR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class SignContext extends ParserRuleContext {
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class KeywordContext extends ParserRuleContext {
    ABSOLUTE(): TerminalNode | undefined;
    ACCENT_SENSITIVITY(): TerminalNode | undefined;
    ACTION(): TerminalNode | undefined;
    ACTIVATION(): TerminalNode | undefined;
    ACTIVE(): TerminalNode | undefined;
    ADDRESS(): TerminalNode | undefined;
    AES_128(): TerminalNode | undefined;
    AES_192(): TerminalNode | undefined;
    AES_256(): TerminalNode | undefined;
    AFFINITY(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    AGGREGATE(): TerminalNode | undefined;
    ALGORITHM(): TerminalNode | undefined;
    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(): TerminalNode | undefined;
    ALLOW_SNAPSHOT_ISOLATION(): TerminalNode | undefined;
    ALLOWED(): TerminalNode | undefined;
    ANSI_NULL_DEFAULT(): TerminalNode | undefined;
    ANSI_NULLS(): TerminalNode | undefined;
    ANSI_PADDING(): TerminalNode | undefined;
    ANSI_WARNINGS(): TerminalNode | undefined;
    APPLICATION_LOG(): TerminalNode | undefined;
    APPLY(): TerminalNode | undefined;
    ARITHABORT(): TerminalNode | undefined;
    ASSEMBLY(): TerminalNode | undefined;
    AT_KEYWORD(): TerminalNode | undefined;
    AUDIT(): TerminalNode | undefined;
    AUDIT_GUID(): TerminalNode | undefined;
    AUTO(): TerminalNode | undefined;
    AUTO_CLEANUP(): TerminalNode | undefined;
    AUTO_CLOSE(): TerminalNode | undefined;
    AUTO_CREATE_STATISTICS(): TerminalNode | undefined;
    AUTO_SHRINK(): TerminalNode | undefined;
    AUTO_UPDATE_STATISTICS(): TerminalNode | undefined;
    AUTO_UPDATE_STATISTICS_ASYNC(): TerminalNode | undefined;
    AVAILABILITY(): TerminalNode | undefined;
    AVG(): TerminalNode | undefined;
    BACKUP_PRIORITY(): TerminalNode | undefined;
    BEGIN_DIALOG(): TerminalNode | undefined;
    BIGINT(): TerminalNode | undefined;
    BINARY_BASE64(): TerminalNode | undefined;
    BINARY_CHECKSUM(): TerminalNode | undefined;
    BINDING(): TerminalNode | undefined;
    BLOB_STORAGE(): TerminalNode | undefined;
    BROKER(): TerminalNode | undefined;
    BROKER_INSTANCE(): TerminalNode | undefined;
    BULK_LOGGED(): TerminalNode | undefined;
    CALLER(): TerminalNode | undefined;
    CAP_CPU_PERCENT(): TerminalNode | undefined;
    CAST(): TerminalNode | undefined;
    CATALOG(): TerminalNode | undefined;
    CATCH(): TerminalNode | undefined;
    CHANGE_RETENTION(): TerminalNode | undefined;
    CHANGE_TRACKING(): TerminalNode | undefined;
    CHECKSUM(): TerminalNode | undefined;
    CHECKSUM_AGG(): TerminalNode | undefined;
    CLEANUP(): TerminalNode | undefined;
    COLLECTION(): TerminalNode | undefined;
    COLUMN_MASTER_KEY(): TerminalNode | undefined;
    COMMITTED(): TerminalNode | undefined;
    COMPATIBILITY_LEVEL(): TerminalNode | undefined;
    CONCAT(): TerminalNode | undefined;
    CONCAT_NULL_YIELDS_NULL(): TerminalNode | undefined;
    CONTENT(): TerminalNode | undefined;
    CONTROL(): TerminalNode | undefined;
    COOKIE(): TerminalNode | undefined;
    COUNT(): TerminalNode | undefined;
    COUNT_BIG(): TerminalNode | undefined;
    COUNTER(): TerminalNode | undefined;
    CPU(): TerminalNode | undefined;
    CREATE_NEW(): TerminalNode | undefined;
    CREATION_DISPOSITION(): TerminalNode | undefined;
    CREDENTIAL(): TerminalNode | undefined;
    CRYPTOGRAPHIC(): TerminalNode | undefined;
    CURSOR_CLOSE_ON_COMMIT(): TerminalNode | undefined;
    CURSOR_DEFAULT(): TerminalNode | undefined;
    DATA(): TerminalNode | undefined;
    DATE_CORRELATION_OPTIMIZATION(): TerminalNode | undefined;
    DATEADD(): TerminalNode | undefined;
    DATEDIFF(): TerminalNode | undefined;
    DATENAME(): TerminalNode | undefined;
    DATEPART(): TerminalNode | undefined;
    DAYS(): TerminalNode | undefined;
    DB_CHAINING(): TerminalNode | undefined;
    DB_FAILOVER(): TerminalNode | undefined;
    DECRYPTION(): TerminalNode | undefined;
    DEFAULT_DOUBLE_QUOTE(): TerminalNode | undefined;
    DEFAULT_FULLTEXT_LANGUAGE(): TerminalNode | undefined;
    DEFAULT_LANGUAGE(): TerminalNode | undefined;
    DELAY(): TerminalNode | undefined;
    DELAYED_DURABILITY(): TerminalNode | undefined;
    DELETED(): TerminalNode | undefined;
    DENSE_RANK(): TerminalNode | undefined;
    DEPENDENTS(): TerminalNode | undefined;
    DES(): TerminalNode | undefined;
    DESCRIPTION(): TerminalNode | undefined;
    DESX(): TerminalNode | undefined;
    DHCP(): TerminalNode | undefined;
    DIALOG(): TerminalNode | undefined;
    DIRECTORY_NAME(): TerminalNode | undefined;
    DISABLE(): TerminalNode | undefined;
    DISABLE_BROKER(): TerminalNode | undefined;
    DISABLED(): TerminalNode | undefined;
    DISK_DRIVE(): TerminalNode | undefined;
    DOCUMENT(): TerminalNode | undefined;
    DYNAMIC(): TerminalNode | undefined;
    ELEMENTS(): TerminalNode | undefined;
    EMERGENCY(): TerminalNode | undefined;
    EMPTY(): TerminalNode | undefined;
    ENABLE(): TerminalNode | undefined;
    ENABLE_BROKER(): TerminalNode | undefined;
    ENCRYPTED_VALUE(): TerminalNode | undefined;
    ENCRYPTION(): TerminalNode | undefined;
    ENDPOINT_URL(): TerminalNode | undefined;
    ERROR_BROKER_CONVERSATIONS(): TerminalNode | undefined;
    EXCLUSIVE(): TerminalNode | undefined;
    EXECUTABLE(): TerminalNode | undefined;
    EXIST(): TerminalNode | undefined;
    EXPAND(): TerminalNode | undefined;
    EXPIRY_DATE(): TerminalNode | undefined;
    EXPLICIT(): TerminalNode | undefined;
    FAIL_OPERATION(): TerminalNode | undefined;
    FAILOVER_MODE(): TerminalNode | undefined;
    FAILURE(): TerminalNode | undefined;
    FAILURE_CONDITION_LEVEL(): TerminalNode | undefined;
    FAST(): TerminalNode | undefined;
    FAST_FORWARD(): TerminalNode | undefined;
    FILEGROUP(): TerminalNode | undefined;
    FILEGROWTH(): TerminalNode | undefined;
    FILEPATH(): TerminalNode | undefined;
    FILESTREAM(): TerminalNode | undefined;
    FILTER(): TerminalNode | undefined;
    FIRST(): TerminalNode | undefined;
    FIRST_VALUE(): TerminalNode | undefined;
    FOLLOWING(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    FORCE_FAILOVER_ALLOW_DATA_LOSS(): TerminalNode | undefined;
    FORCED(): TerminalNode | undefined;
    FORMAT(): TerminalNode | undefined;
    FORWARD_ONLY(): TerminalNode | undefined;
    FULLSCAN(): TerminalNode | undefined;
    FULLTEXT(): TerminalNode | undefined;
    GB(): TerminalNode | undefined;
    GETDATE(): TerminalNode | undefined;
    GETUTCDATE(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    GO(): TerminalNode | undefined;
    GO_BATCH(): TerminalNode | undefined;
    GROUP_MAX_REQUESTS(): TerminalNode | undefined;
    GROUPING(): TerminalNode | undefined;
    GROUPING_ID(): TerminalNode | undefined;
    HADR(): TerminalNode | undefined;
    HASH(): TerminalNode | undefined;
    HEALTH_CHECK_TIMEOUT(): TerminalNode | undefined;
    HIGH(): TerminalNode | undefined;
    HONOR_BROKER_PRIORITY(): TerminalNode | undefined;
    HOURS(): TerminalNode | undefined;
    IDENTITY_VALUE(): TerminalNode | undefined;
    IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    IMPERSONATE(): TerminalNode | undefined;
    IMPORTANCE(): TerminalNode | undefined;
    INCLUDE_NULL_VALUES(): TerminalNode | undefined;
    INCREMENTAL(): TerminalNode | undefined;
    INITIATOR(): TerminalNode | undefined;
    INPUT(): TerminalNode | undefined;
    INSENSITIVE(): TerminalNode | undefined;
    INSERTED(): TerminalNode | undefined;
    INT(): TerminalNode | undefined;
    IP(): TerminalNode | undefined;
    ISOLATION(): TerminalNode | undefined;
    JOB(): TerminalNode | undefined;
    JSON(): TerminalNode | undefined;
    KB(): TerminalNode | undefined;
    KEEP(): TerminalNode | undefined;
    KEEPFIXED(): TerminalNode | undefined;
    KEY_SOURCE(): TerminalNode | undefined;
    KEYS(): TerminalNode | undefined;
    KEYSET(): TerminalNode | undefined;
    LAG(): TerminalNode | undefined;
    LAST(): TerminalNode | undefined;
    LAST_VALUE(): TerminalNode | undefined;
    LEAD(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    LIST(): TerminalNode | undefined;
    LISTENER(): TerminalNode | undefined;
    LISTENER_URL(): TerminalNode | undefined;
    LOB_COMPACTION(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    LOCATION(): TerminalNode | undefined;
    LOCK(): TerminalNode | undefined;
    LOCK_ESCALATION(): TerminalNode | undefined;
    LOGIN(): TerminalNode | undefined;
    LOOP(): TerminalNode | undefined;
    LOW(): TerminalNode | undefined;
    MANUAL(): TerminalNode | undefined;
    MARK(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    MAX(): TerminalNode | undefined;
    MAX_CPU_PERCENT(): TerminalNode | undefined;
    MAX_DOP(): TerminalNode | undefined;
    MAX_FILES(): TerminalNode | undefined;
    MAX_IOPS_PER_VOLUME(): TerminalNode | undefined;
    MAX_MEMORY_PERCENT(): TerminalNode | undefined;
    MAX_PROCESSES(): TerminalNode | undefined;
    MAX_QUEUE_READERS(): TerminalNode | undefined;
    MAX_ROLLOVER_FILES(): TerminalNode | undefined;
    MAXDOP(): TerminalNode | undefined;
    MAXRECURSION(): TerminalNode | undefined;
    MAXSIZE(): TerminalNode | undefined;
    MB(): TerminalNode | undefined;
    MEDIUM(): TerminalNode | undefined;
    MEMORY_OPTIMIZED_DATA(): TerminalNode | undefined;
    MESSAGE(): TerminalNode | undefined;
    MIN(): TerminalNode | undefined;
    MIN_ACTIVE_ROWVERSION(): TerminalNode | undefined;
    MIN_CPU_PERCENT(): TerminalNode | undefined;
    MIN_IOPS_PER_VOLUME(): TerminalNode | undefined;
    MIN_MEMORY_PERCENT(): TerminalNode | undefined;
    MINUTES(): TerminalNode | undefined;
    MIRROR_ADDRESS(): TerminalNode | undefined;
    MIXED_PAGE_ALLOCATION(): TerminalNode | undefined;
    MODE(): TerminalNode | undefined;
    MODIFY(): TerminalNode | undefined;
    MOVE(): TerminalNode | undefined;
    MULTI_USER(): TerminalNode | undefined;
    NAME(): TerminalNode | undefined;
    NESTED_TRIGGERS(): TerminalNode | undefined;
    NEW_ACCOUNT(): TerminalNode | undefined;
    NEW_BROKER(): TerminalNode | undefined;
    NEW_PASSWORD(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    NO_TRUNCATE(): TerminalNode | undefined;
    NO_WAIT(): TerminalNode | undefined;
    NOCOUNT(): TerminalNode | undefined;
    NODES(): TerminalNode | undefined;
    NOEXPAND(): TerminalNode | undefined;
    NON_TRANSACTED_ACCESS(): TerminalNode | undefined;
    NORECOMPUTE(): TerminalNode | undefined;
    NORECOVERY(): TerminalNode | undefined;
    NOWAIT(): TerminalNode | undefined;
    NTILE(): TerminalNode | undefined;
    NUMANODE(): TerminalNode | undefined;
    NUMBER(): TerminalNode | undefined;
    NUMERIC_ROUNDABORT(): TerminalNode | undefined;
    OBJECT(): TerminalNode | undefined;
    OFFLINE(): TerminalNode | undefined;
    OFFSET(): TerminalNode | undefined;
    OLD_ACCOUNT(): TerminalNode | undefined;
    ONLINE(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    OPEN_EXISTING(): TerminalNode | undefined;
    OPENJSON(): TerminalNode | undefined;
    OPTIMISTIC(): TerminalNode | undefined;
    OPTIMIZE(): TerminalNode | undefined;
    OUT(): TerminalNode | undefined;
    OUTPUT(): TerminalNode | undefined;
    OVERRIDE(): TerminalNode | undefined;
    OWNER(): TerminalNode | undefined;
    PAGE_VERIFY(): TerminalNode | undefined;
    PARAMETERIZATION(): TerminalNode | undefined;
    PARTITION(): TerminalNode | undefined;
    PARTITIONS(): TerminalNode | undefined;
    PARTNER(): TerminalNode | undefined;
    PATH(): TerminalNode | undefined;
    POISON_MESSAGE_HANDLING(): TerminalNode | undefined;
    POOL(): TerminalNode | undefined;
    PORT(): TerminalNode | undefined;
    PRECEDING(): TerminalNode | undefined;
    PRIMARY_ROLE(): TerminalNode | undefined;
    PRIOR(): TerminalNode | undefined;
    PRIORITY(): TerminalNode | undefined;
    PRIORITY_LEVEL(): TerminalNode | undefined;
    PRIVATE(): TerminalNode | undefined;
    PRIVATE_KEY(): TerminalNode | undefined;
    PRIVILEGES(): TerminalNode | undefined;
    PROCEDURE_NAME(): TerminalNode | undefined;
    PROPERTY(): TerminalNode | undefined;
    PROVIDER(): TerminalNode | undefined;
    PROVIDER_KEY_NAME(): TerminalNode | undefined;
    QUERY(): TerminalNode | undefined;
    QUEUE(): TerminalNode | undefined;
    QUEUE_DELAY(): TerminalNode | undefined;
    QUOTED_IDENTIFIER(): TerminalNode | undefined;
    RANGE(): TerminalNode | undefined;
    RANK(): TerminalNode | undefined;
    RC2(): TerminalNode | undefined;
    RC4(): TerminalNode | undefined;
    RC4_128(): TerminalNode | undefined;
    READ_COMMITTED_SNAPSHOT(): TerminalNode | undefined;
    READ_ONLY(): TerminalNode | undefined;
    READ_ONLY_ROUTING_LIST(): TerminalNode | undefined;
    READ_WRITE(): TerminalNode | undefined;
    READONLY(): TerminalNode | undefined;
    REBUILD(): TerminalNode | undefined;
    RECEIVE(): TerminalNode | undefined;
    RECOMPILE(): TerminalNode | undefined;
    RECOVERY(): TerminalNode | undefined;
    RECURSIVE_TRIGGERS(): TerminalNode | undefined;
    RELATIVE(): TerminalNode | undefined;
    REMOTE(): TerminalNode | undefined;
    REMOTE_SERVICE_NAME(): TerminalNode | undefined;
    REMOVE(): TerminalNode | undefined;
    REORGANIZE(): TerminalNode | undefined;
    REPEATABLE(): TerminalNode | undefined;
    REPLICA(): TerminalNode | undefined;
    REQUEST_MAX_CPU_TIME_SEC(): TerminalNode | undefined;
    REQUEST_MAX_MEMORY_GRANT_PERCENT(): TerminalNode | undefined;
    REQUEST_MEMORY_GRANT_TIMEOUT_SEC(): TerminalNode | undefined;
    REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT(): TerminalNode | undefined;
    RESERVE_DISK_SPACE(): TerminalNode | undefined;
    RESOURCE(): TerminalNode | undefined;
    RESOURCE_MANAGER_LOCATION(): TerminalNode | undefined;
    RESTRICTED_USER(): TerminalNode | undefined;
    RETENTION(): TerminalNode | undefined;
    ROBUST(): TerminalNode | undefined;
    ROOT(): TerminalNode | undefined;
    ROUTE(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    ROW_NUMBER(): TerminalNode | undefined;
    ROWGUID(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    SAMPLE(): TerminalNode | undefined;
    SCHEMABINDING(): TerminalNode | undefined;
    SCOPED(): TerminalNode | undefined;
    SCROLL(): TerminalNode | undefined;
    SCROLL_LOCKS(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    SECONDARY(): TerminalNode | undefined;
    SECONDARY_ONLY(): TerminalNode | undefined;
    SECONDARY_ROLE(): TerminalNode | undefined;
    SECONDS(): TerminalNode | undefined;
    SECRET(): TerminalNode | undefined;
    SECURITY(): TerminalNode | undefined;
    SECURITY_LOG(): TerminalNode | undefined;
    SEEDING_MODE(): TerminalNode | undefined;
    SELF(): TerminalNode | undefined;
    SEMI_SENSITIVE(): TerminalNode | undefined;
    SEND(): TerminalNode | undefined;
    SENT(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    SERIALIZABLE(): TerminalNode | undefined;
    SESSION_TIMEOUT(): TerminalNode | undefined;
    SETERROR(): TerminalNode | undefined;
    SHARE(): TerminalNode | undefined;
    SHOWPLAN(): TerminalNode | undefined;
    SIGNATURE(): TerminalNode | undefined;
    SIMPLE(): TerminalNode | undefined;
    SINGLE_USER(): TerminalNode | undefined;
    SIZE(): TerminalNode | undefined;
    SMALLINT(): TerminalNode | undefined;
    SNAPSHOT(): TerminalNode | undefined;
    SPATIAL_WINDOW_MAX_CELLS(): TerminalNode | undefined;
    STANDBY(): TerminalNode | undefined;
    START_DATE(): TerminalNode | undefined;
    STATIC(): TerminalNode | undefined;
    STATS_STREAM(): TerminalNode | undefined;
    STATUS(): TerminalNode | undefined;
    STATUSONLY(): TerminalNode | undefined;
    STDEV(): TerminalNode | undefined;
    STDEVP(): TerminalNode | undefined;
    STOPLIST(): TerminalNode | undefined;
    STRING_AGG(): TerminalNode | undefined;
    STUFF(): TerminalNode | undefined;
    SUBJECT(): TerminalNode | undefined;
    SUBSCRIPTION(): TerminalNode | undefined;
    SUM(): TerminalNode | undefined;
    SUSPEND(): TerminalNode | undefined;
    SYMMETRIC(): TerminalNode | undefined;
    SYNCHRONOUS_COMMIT(): TerminalNode | undefined;
    SYNONYM(): TerminalNode | undefined;
    SYSTEM(): TerminalNode | undefined;
    TAKE(): TerminalNode | undefined;
    TARGET_RECOVERY_TIME(): TerminalNode | undefined;
    TB(): TerminalNode | undefined;
    TEXTIMAGE_ON(): TerminalNode | undefined;
    THROW(): TerminalNode | undefined;
    TIES(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    TIMEOUT(): TerminalNode | undefined;
    TIMER(): TerminalNode | undefined;
    TINYINT(): TerminalNode | undefined;
    TORN_PAGE_DETECTION(): TerminalNode | undefined;
    TRANSFORM_NOISE_WORDS(): TerminalNode | undefined;
    TRIPLE_DES(): TerminalNode | undefined;
    TRIPLE_DES_3KEY(): TerminalNode | undefined;
    TRUSTWORTHY(): TerminalNode | undefined;
    TRY(): TerminalNode | undefined;
    TSQL(): TerminalNode | undefined;
    TWO_DIGIT_YEAR_CUTOFF(): TerminalNode | undefined;
    TYPE(): TerminalNode | undefined;
    TYPE_WARNING(): TerminalNode | undefined;
    UNBOUNDED(): TerminalNode | undefined;
    UNCOMMITTED(): TerminalNode | undefined;
    UNKNOWN(): TerminalNode | undefined;
    UNLIMITED(): TerminalNode | undefined;
    UOW(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    VALID_XML(): TerminalNode | undefined;
    VALIDATION(): TerminalNode | undefined;
    VALUE(): TerminalNode | undefined;
    VAR(): TerminalNode | undefined;
    VARP(): TerminalNode | undefined;
    VIEW_METADATA(): TerminalNode | undefined;
    VIEWS(): TerminalNode | undefined;
    WAIT(): TerminalNode | undefined;
    WELL_FORMED_XML(): TerminalNode | undefined;
    WITHOUT_ARRAY_WRAPPER(): TerminalNode | undefined;
    WORK(): TerminalNode | undefined;
    WORKLOAD(): TerminalNode | undefined;
    XML(): TerminalNode | undefined;
    XMLDATA(): TerminalNode | undefined;
    XMLNAMESPACES(): TerminalNode | undefined;
    XMLSCHEMA(): TerminalNode | undefined;
    XSINIL(): TerminalNode | undefined;
    ABSENT(): TerminalNode | undefined;
    AES(): TerminalNode | undefined;
    ALLOW_CONNECTIONS(): TerminalNode | undefined;
    ALLOW_MULTIPLE_EVENT_LOSS(): TerminalNode | undefined;
    ALLOW_SINGLE_EVENT_LOSS(): TerminalNode | undefined;
    ANONYMOUS(): TerminalNode | undefined;
    APPEND(): TerminalNode | undefined;
    APPLICATION(): TerminalNode | undefined;
    ASYMMETRIC(): TerminalNode | undefined;
    ASYNCHRONOUS_COMMIT(): TerminalNode | undefined;
    AUTHENTICATION(): TerminalNode | undefined;
    AUTOMATED_BACKUP_PREFERENCE(): TerminalNode | undefined;
    AUTOMATIC(): TerminalNode | undefined;
    AVAILABILITY_MODE(): TerminalNode | undefined;
    BEFORE(): TerminalNode | undefined;
    BLOCK(): TerminalNode | undefined;
    BLOCKSIZE(): TerminalNode | undefined;
    BLOCKING_HIERARCHY(): TerminalNode | undefined;
    BUFFER(): TerminalNode | undefined;
    BUFFERCOUNT(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    CALLED(): TerminalNode | undefined;
    CERTIFICATE(): TerminalNode | undefined;
    CHANGETABLE(): TerminalNode | undefined;
    CHANGES(): TerminalNode | undefined;
    CHECK_POLICY(): TerminalNode | undefined;
    CHECK_EXPIRATION(): TerminalNode | undefined;
    CLASSIFIER_FUNCTION(): TerminalNode | undefined;
    CLUSTER(): TerminalNode | undefined;
    COMPRESSION(): TerminalNode | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    CONTAINMENT(): TerminalNode | undefined;
    CONTEXT(): TerminalNode | undefined;
    CONTINUE_AFTER_ERROR(): TerminalNode | undefined;
    CONTRACT(): TerminalNode | undefined;
    CONTRACT_NAME(): TerminalNode | undefined;
    CONVERSATION(): TerminalNode | undefined;
    COPY_ONLY(): TerminalNode | undefined;
    CUME_DIST(): TerminalNode | undefined;
    CYCLE(): TerminalNode | undefined;
    DATA_COMPRESSION(): TerminalNode | undefined;
    DATA_SOURCE(): TerminalNode | undefined;
    DATABASE_MIRRORING(): TerminalNode | undefined;
    DEFAULT_DATABASE(): TerminalNode | undefined;
    DEFAULT_SCHEMA(): TerminalNode | undefined;
    DIAGNOSTICS(): TerminalNode | undefined;
    DIFFERENTIAL(): TerminalNode | undefined;
    DTC_SUPPORT(): TerminalNode | undefined;
    ENABLED(): TerminalNode | undefined;
    ENDPOINT(): TerminalNode | undefined;
    ERROR(): TerminalNode | undefined;
    EVENT(): TerminalNode | undefined;
    EVENTDATA(): TerminalNode | undefined;
    EVENT_RETENTION_MODE(): TerminalNode | undefined;
    EXECUTABLE_FILE(): TerminalNode | undefined;
    EXPIREDATE(): TerminalNode | undefined;
    EXTENSION(): TerminalNode | undefined;
    EXTERNAL_ACCESS(): TerminalNode | undefined;
    FAILOVER(): TerminalNode | undefined;
    FAILURECONDITIONLEVEL(): TerminalNode | undefined;
    FAN_IN(): TerminalNode | undefined;
    FILE_SNAPSHOT(): TerminalNode | undefined;
    FILENAME(): TerminalNode | undefined;
    FORCESEEK(): TerminalNode | undefined;
    FORCE_SERVICE_ALLOW_DATA_LOSS(): TerminalNode | undefined;
    GET(): TerminalNode | undefined;
    GOVERNOR(): TerminalNode | undefined;
    HASHED(): TerminalNode | undefined;
    HEALTHCHECKTIMEOUT(): TerminalNode | undefined;
    IIF(): TerminalNode | undefined;
    IO(): TerminalNode | undefined;
    INCLUDE(): TerminalNode | undefined;
    INCREMENT(): TerminalNode | undefined;
    INFINITE(): TerminalNode | undefined;
    INIT(): TerminalNode | undefined;
    INSTEAD(): TerminalNode | undefined;
    ISNULL(): TerminalNode | undefined;
    KERBEROS(): TerminalNode | undefined;
    KEY_PATH(): TerminalNode | undefined;
    KEY_STORE_PROVIDER_NAME(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    LIBRARY(): TerminalNode | undefined;
    LIFETIME(): TerminalNode | undefined;
    LINUX(): TerminalNode | undefined;
    LISTENER_IP(): TerminalNode | undefined;
    LISTENER_PORT(): TerminalNode | undefined;
    LOCAL_SERVICE_NAME(): TerminalNode | undefined;
    LOG(): TerminalNode | undefined;
    MATCHED(): TerminalNode | undefined;
    MASTER(): TerminalNode | undefined;
    MAX_MEMORY(): TerminalNode | undefined;
    MAXTRANSFER(): TerminalNode | undefined;
    MAXVALUE(): TerminalNode | undefined;
    MAX_DISPATCH_LATENCY(): TerminalNode | undefined;
    MAX_EVENT_SIZE(): TerminalNode | undefined;
    MAX_SIZE(): TerminalNode | undefined;
    MAX_OUTSTANDING_IO_PER_VOLUME(): TerminalNode | undefined;
    MEDIADESCRIPTION(): TerminalNode | undefined;
    MEDIANAME(): TerminalNode | undefined;
    MEMBER(): TerminalNode | undefined;
    MEMORY_PARTITION_MODE(): TerminalNode | undefined;
    MESSAGE_FORWARDING(): TerminalNode | undefined;
    MESSAGE_FORWARD_SIZE(): TerminalNode | undefined;
    MINVALUE(): TerminalNode | undefined;
    MIRROR(): TerminalNode | undefined;
    MUST_CHANGE(): TerminalNode | undefined;
    NOFORMAT(): TerminalNode | undefined;
    NOINIT(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    NOREWIND(): TerminalNode | undefined;
    NOSKIP(): TerminalNode | undefined;
    NOUNLOAD(): TerminalNode | undefined;
    NO_CHECKSUM(): TerminalNode | undefined;
    NO_COMPRESSION(): TerminalNode | undefined;
    NO_EVENT_LOSS(): TerminalNode | undefined;
    NOTIFICATION(): TerminalNode | undefined;
    NTLM(): TerminalNode | undefined;
    OLD_PASSWORD(): TerminalNode | undefined;
    ON_FAILURE(): TerminalNode | undefined;
    PAGE(): TerminalNode | undefined;
    PARAM_NODE(): TerminalNode | undefined;
    PARTIAL(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    PERMISSION_SET(): TerminalNode | undefined;
    PER_CPU(): TerminalNode | undefined;
    PER_DB(): TerminalNode | undefined;
    PER_NODE(): TerminalNode | undefined;
    PERCENTILE_CONT(): TerminalNode | undefined;
    PERCENTILE_DISC(): TerminalNode | undefined;
    PERCENT_RANK(): TerminalNode | undefined;
    PERSISTED(): TerminalNode | undefined;
    PLATFORM(): TerminalNode | undefined;
    POLICY(): TerminalNode | undefined;
    PREDICATE(): TerminalNode | undefined;
    PROCESS(): TerminalNode | undefined;
    PROFILE(): TerminalNode | undefined;
    PYTHON(): TerminalNode | undefined;
    R(): TerminalNode | undefined;
    READ_WRITE_FILEGROUPS(): TerminalNode | undefined;
    REGENERATE(): TerminalNode | undefined;
    RELATED_CONVERSATION(): TerminalNode | undefined;
    RELATED_CONVERSATION_GROUP(): TerminalNode | undefined;
    REQUIRED(): TerminalNode | undefined;
    RESET(): TerminalNode | undefined;
    RESTART(): TerminalNode | undefined;
    RESUME(): TerminalNode | undefined;
    RETAINDAYS(): TerminalNode | undefined;
    RETURNS(): TerminalNode | undefined;
    REWIND(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    RSA_512(): TerminalNode | undefined;
    RSA_1024(): TerminalNode | undefined;
    RSA_2048(): TerminalNode | undefined;
    RSA_3072(): TerminalNode | undefined;
    RSA_4096(): TerminalNode | undefined;
    SAFETY(): TerminalNode | undefined;
    SAFE(): TerminalNode | undefined;
    SCHEDULER(): TerminalNode | undefined;
    SCHEME(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    SERVICE(): TerminalNode | undefined;
    SERVICE_BROKER(): TerminalNode | undefined;
    SERVICE_NAME(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    SID(): TerminalNode | undefined;
    SKIP_KEYWORD(): TerminalNode | undefined;
    SOFTNUMA(): TerminalNode | undefined;
    SOURCE(): TerminalNode | undefined;
    SPECIFICATION(): TerminalNode | undefined;
    SPLIT(): TerminalNode | undefined;
    SQLDUMPERFLAGS(): TerminalNode | undefined;
    SQLDUMPERPATH(): TerminalNode | undefined;
    SQLDUMPERTIMEOUT(): TerminalNode | undefined;
    STATE(): TerminalNode | undefined;
    STATS(): TerminalNode | undefined;
    START(): TerminalNode | undefined;
    STARTED(): TerminalNode | undefined;
    STARTUP_STATE(): TerminalNode | undefined;
    STOP(): TerminalNode | undefined;
    STOPPED(): TerminalNode | undefined;
    STOP_ON_ERROR(): TerminalNode | undefined;
    SUPPORTED(): TerminalNode | undefined;
    TAPE(): TerminalNode | undefined;
    TARGET(): TerminalNode | undefined;
    TCP(): TerminalNode | undefined;
    TRACK_CAUSALITY(): TerminalNode | undefined;
    TRANSFER(): TerminalNode | undefined;
    TRY_CAST(): TerminalNode | undefined;
    UNCHECKED(): TerminalNode | undefined;
    UNLOCK(): TerminalNode | undefined;
    UNSAFE(): TerminalNode | undefined;
    URL(): TerminalNode | undefined;
    USED(): TerminalNode | undefined;
    VERBOSELOGGING(): TerminalNode | undefined;
    VISIBILITY(): TerminalNode | undefined;
    WINDOWS(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    WITNESS(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    VARCHAR(): TerminalNode | undefined;
    NVARCHAR(): TerminalNode | undefined;
    BINARY_KEYWORD(): TerminalNode | undefined;
    VARBINARY_KEYWORD(): TerminalNode | undefined;
    PRECISION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class IdContext extends ParserRuleContext {
    ID(): TerminalNode | undefined;
    DOUBLE_QUOTE_ID(): TerminalNode | undefined;
    SQUARE_BRACKET_ID(): TerminalNode | undefined;
    keyword(): KeywordContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Simple_idContext extends ParserRuleContext {
    ID(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Comparison_operatorContext extends ParserRuleContext {
    EQUAL(): TerminalNode | undefined;
    GREATER(): TerminalNode | undefined;
    LESS(): TerminalNode | undefined;
    EXCLAMATION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class Assignment_operatorContext extends ParserRuleContext {
    PLUS_ASSIGN(): TerminalNode | undefined;
    MINUS_ASSIGN(): TerminalNode | undefined;
    MULT_ASSIGN(): TerminalNode | undefined;
    DIV_ASSIGN(): TerminalNode | undefined;
    MOD_ASSIGN(): TerminalNode | undefined;
    AND_ASSIGN(): TerminalNode | undefined;
    XOR_ASSIGN(): TerminalNode | undefined;
    OR_ASSIGN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
export declare class File_sizeContext extends ParserRuleContext {
    DECIMAL(): TerminalNode;
    KB(): TerminalNode | undefined;
    MB(): TerminalNode | undefined;
    GB(): TerminalNode | undefined;
    TB(): TerminalNode | undefined;
    MODULE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: TSqlParserListener): void;
    exitRule(listener: TSqlParserListener): void;
}
